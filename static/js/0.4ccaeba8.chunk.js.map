{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","hooks/useLastUpdated.ts","hooks/useTokenBalance.ts","hooks/usePreviousValue.ts","utils/callHelpers.ts","hooks/useApprove.ts"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useERC721","getErc721Contract","useCake","getCakeContract","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","fastRefresh","useRefresh","a","contract","methods","allowance","call","res","BigNumber","console","error","prev","fetchBalance","useGetBnbBalance","setBalance","eth","getBalance","walletBalance","refresh","useTokenBalance","balanceOf","value","ref","approve","lpContract","masterChefContract","options","ethers","constants","MaxUint256","send","from","approveWithAmount","amount","stake","pid","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","chainId","parseInt","process","cakeBnbFarm","farms","find","farm","Token","getCakeAddress","tokens","wbnb","getAddress","lpAddresses","useApprove","contractAddress","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress"],"mappings":"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","file":"static/js/0.4ccaeba8.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, amount)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\nconst CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\nconst WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\nconst CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n\n/**\n * Returns the total CAKE staked in the CAKE-BNB LP\n */\nexport const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n    const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n    const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n    const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n\n    const pair: Pair = new Pair(\n      new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n      new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n    )\n    const cakeLPBalance = pair.getLiquidityValue(\n      pair.token0,\n      new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n      new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n      false,\n    )\n\n    return new BigNumber(cakeLPBalance.toSignificant(18))\n  } catch (error) {\n    console.error(`CAKE-BNB LP error: ${error}`)\n    return BIG_ZERO\n  }\n}\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n"],"sourceRoot":""}
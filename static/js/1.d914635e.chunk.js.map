{"version":3,"sources":["hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useContract.ts","components/UnlockButton.tsx","utils/bscscan.ts","utils/callHelpers.ts","hooks/useApprove.ts","hooks/useWeb3.ts","hooks/useTokenBalance.ts"],"names":["usePreviousValue","value","ref","useRef","useEffect","current","useLastUpdated","useState","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useCallback","useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveWithAmount","amount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","chainId","parseInt","process","cakeBnbFarm","farms","find","farm","Token","getCakeAddress","tokens","wbnb","getAddress","lpAddresses","useApprove","contractAddress","useWeb3React","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress","library","refEth","Web3","web3NoAccount","setweb3","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","balanceOf"],"mappings":"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","file":"static/js/1.d914635e.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, amount)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\nconst CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\nconst WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\nconst CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n\n/**\n * Returns the total CAKE staked in the CAKE-BNB LP\n */\nexport const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n    const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n    const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n    const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n\n    const pair: Pair = new Pair(\n      new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n      new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n    )\n    const cakeLPBalance = pair.getLiquidityValue(\n      pair.token0,\n      new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n      new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n      false,\n    )\n\n    return new BigNumber(cakeLPBalance.toSignificant(18))\n  } catch (error) {\n    console.error(`CAKE-BNB LP error: ${error}`)\n    return BIG_ZERO\n  }\n}\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}
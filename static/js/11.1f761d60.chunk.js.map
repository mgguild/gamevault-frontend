{"version":3,"sources":["components/Balance.tsx","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseMap.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","../node_modules/lodash/partition.js","../node_modules/react-feather/dist/icons/chevron-down.js","../node_modules/react-feather/dist/icons/chevron-up.js","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","duration","separator","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","address","getAddress","symbol","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","sousId","isUsingBnb","dispatch","useAppDispatch","useWeb3React","account","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","a","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","contract","txHash","console","info","useExit","stakingContract","useLPStakingContract","onUnstake","exit","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","useState","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","error","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","tokenAddress","price","_token1Price","_token2Price","res","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","BigNumber","balance","Number","_totalToken2InPool","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","ref","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","arrayAggregator","require","baseAggregator","baseIteratee","isArray","module","exports","setter","initializer","collection","iteratee","func","accumulator","array","index","length","baseEach","key","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","baseOrderBy","iteratees","orders","guard","undefined","arrayMap","baseGet","baseMap","baseSortBy","baseUnary","compareMultiple","object","other","isArrayLike","Array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","partition","createAggregator","push","_extends","Object","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ChevronDown","forwardRef","_ref","_ref$color","_ref$size","rest","createElement","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","PropTypes","string","oneOfType","number","displayName","ChevronUp","ViewMode","StyledCard","keyframes","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","cake","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","as","external","BASE_EXCHANGE_URL","ModalBody","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","userData","stakingLimit","stakingTokenContract","useERC20","useToast","toastSuccess","toastError","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","fullDecimalStakeAmount","plus","gte","handleConfirmClick","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","Math","floor","handleStakeInputChange","currentTarget","addLiquidityUrl","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","log","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","isWithdrawDisabled","type","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","userDataReady","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","stakingAddess","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","getPoolApr","getBscScanLink","UnlockButton","getBscScanAddressUrl","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","process","onPresentApyModal","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","withdrawalFee","feeAsDecimal","parseInt","noFeeToPay","shouldShowTimer","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","accountHasVaultShares","useMemo","cakePool","map","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","path","url","isExact","setFetchData","mggPool","isMain","prevStakingPrice","prevRewardPrice","poolApr","tvr","minHeight","padding","flex","borderBottom","Page"],"mappings":"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","file":"static/js/11.1f761d60.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","const useChainFinder = (chainId:number) => {\n  switch (chainId){\n    case 1:\n      return \"eth\"\n    case 3:\n      return \"ropsten\"\n    case 56:\n      return \"bsc\"\n    case 97:\n      return \"bsc testnet\"\n    default:\n      return \"bsc\"\n  }\n}\n\nexport default useChainFinder","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers';\n\nexport const useTokenPrice = (tokenAddress: string) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n  \n    const chainName = useChainFinder(chainId);\n    \n    const [tokenPrice, setTokenPrice] = useState(0)\n    const web3 = useWeb3()\n  \n    let _tokenAddress\n    try{\n      if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\n      _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\n            const _tokenPrice = result.usdPrice\n            \n            setTokenPrice(_tokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n  \n    return {tokenPrice}\n  }\n\n\n  export const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n    chainName = useChainFinder(chainId)\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n  \n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try {\n      _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          let result\n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n          const _stakingTokenPrice = result.usdPrice\n  \n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n          const _rewardTokenPrice = result.usdPrice\n  \n          setStakingPrice(_stakingTokenPrice)\n          setRewardPrice(_rewardTokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n      if (isFetchData){\n        fetchData()\n      }\n      \n    }, [setStakingPrice, setRewardPrice, _stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName, isFetchData])\n  \n    return { stakingPrice, rewardPrice }\n  }\n  \n  export const useFarmPrice = (\n    lpTotalSupply: number,\n    token1Address: string,\n    token2Address: string,\n    rewardTokenAddress: string,\n    lpAddress: string,\n    isFetchData?: boolean,\n  ) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n    chainName = useChainFinder(chainId)\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n      const findPrice = async (tokenAddress: string) => {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n        const price = result.usdPrice\n        return price\n      }\n  \n      const fetchData = async () => {\n        try {\n          let _totalToken1InPool\n          let _totalToken2InPool\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n          const _token1Price = findPrice(_token1Address)\n          const _token2Price = findPrice(_token2Address)\n          const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n          const res = MoralisWeb3Api.account.getTokenBalances({\n            chain: chainName,\n            address: _lpAddress,\n            token_addresses: [_token1Address, _token2Address],\n          })\n          const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n          const result = data[3]\n          if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n          } else {\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance),  Number(result[0].decimals))\n          }\n  \n          if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance),  Number(result[1].decimals))\n          } else {\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n          }\n  \n          setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n          setRewardPrice(data[2])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n      if (isFetchData) {\n        fetchData()\n      }\n     \n     \n    }, [\n      isFetchData,\n      setLPPrice,\n      setRewardPrice,\n      lpTotalSupply,\n      _token1Address,\n      _token2Address,\n      _rewardTokenAddress,\n      _lpAddress,\n      chainName,\n      MoralisWeb3Api,\n    ])\n  \n    return { LPPrice, rewardPrice }\n  }\n\nexport default usePoolPrice","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, {useRef, useEffect} from 'react';\n\nfunction usePrevious(value) {\n    const ref = React.useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); \n    return ref.current;\n}\n\nexport default usePrevious;","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronDown = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"6 9 12 15 18 9\"\n  }));\n});\nChevronDown.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronDown.displayName = 'ChevronDown';\nexport default ChevronDown;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronUp = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"18 15 12 9 6 15\"\n  }));\n});\nChevronUp.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronUp.displayName = 'ChevronUp';\nexport default ChevronUp;","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n/*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext);\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\n          <Heading color='text' size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br/>\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button} from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null);\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance);\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals) : BIG_ZERO\n  const totalAllowance = useTokenAllowance(getAddress(stakingToken.address), getAddress(pool.contractAddress))\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(stakingTokenContract, sousId, earningToken.symbol, getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals))\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [requestedApproval, stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, totalAllowance, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center'}}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {handleChangePercent(100)}}\n          onChange={e => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=''\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n\n        <div>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n          Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n        </Text>\n        </div>\n\n\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\"  marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{width: '100%'}}>\n        <Button\n          isLoading={pendingTx}\n          // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          // onClick={handleApproveClick}\n          // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n          onClick={handleApprove}\n          disabled={!stakeAmount || isApproved}\n          mt=\"24px\"\n          fullWidth\n          marginRight=\"20px\"\n        >\n         Approve\n        </Button>\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n          // disabled={!approvedTx}\n          mt=\"24px\"\n          fullWidth\n          marginLeft=\"20px\"\n        >\n          {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n          {t('Deposit')}\n        </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nimport StakeTokenModal from './Stake'\nimport { BASE_SWAP_URL } from '../../../../../config'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n                                                 isBnbPool,\n                                                 pool,\n                                                 stakingTokenBalance,\n                                                 stakingTokenPrice,\n                                                 addTokenUrl,\n                                                 isRemovingStake = false,\n                                                 onDismiss,\n                                               }) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  console.log(isAddTokenDisabled ?? false)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : 0\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(<StakeTokenModal isBnbPool={isBnbPool} pool={pool}\n                                                           stakingTokenBalance={stakingTokenBalance}\n                                                           stakingTokenPrice={stakingTokenPrice} />)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18), stakingToken.decimals)\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n\n  return (\n    <Modal\n      title=''\n      onDismiss={onDismiss}\n    >\n      <Flex flexDirection='column' style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize='20px' marginBottom='10px' marginLeft='10px'>Account Info</Text>\n        <Text fontSize='15px' marginLeft='10px'>Staking, balances & earnings</Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop='21px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Tokens</Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className='disabled'\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[56]}`, '_blank')\n              }}\n            >Add More</Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol &&\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarningTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.earningToken.symbol} Tokens</Text>\n            <Button\n              fullWidth\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[56]}`, '_blank')\n              }}>Add More</Button>\n          </Flex>\n          }\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Staked</Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>Stake Tokens</Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop='30px' marginBottom='20px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color='textSubtle' fontSize='17px'>Your Rate {pool.earningToken.symbol}/block</Text>\n          </Flex>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' fontSize='17px'>{pool.earningToken.symbol} Token Earnings</Text>\n          </Flex>\n          <Flex flexDirection='column' mb='16px' marginLeft='5px'\n                onMouseEnter={() => setActiveSelect(true)}\n                onMouseLeave={() => setActiveSelect(false)}>\n\n            {userData.stakedBalance.eq(0) ? <Button disabled fullWidth> Withdraw </Button> : <Dropdown\n              position='top'\n              target={\n                // Disable component if total staked tokens is empty\n                <Button fullWidth variant='secondary' disabled={pool.isWithdrawDisabled}>\n                  <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                </Button>\n              }\n            >\n              {/* Disable Claim & Withdraw if no staked tokens */}\n              <Button type='button' disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                Claim\n              </Button>\n              <Button type='button' disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                Claim & Withdraw\n              </Button>\n            </Dropdown>\n\n            }\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && < Text className='yellow' fontSize='15px' marginLeft='10px'>SRKb and SFUEL Withdrawals and Deposits are\n          locked for 48 hours during launchpad</Text>}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={ onPresentStake }>\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake' }\n      </Button>\n    )\n  }\n\n  return <Flex justifyContent=\"space-between\" alignItems=\"center\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\" >\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalStaked,2,5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalEarned,2,5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n          <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n             <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n             {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n          </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { ThemeContext } from 'styled-components'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport {\n  ActionContainer,\n  ActionContent,\n  ActionTitles,\n  Earned,\n} from '../../../Farms/components/FarmTable/Actions/styles'\n\ninterface StakeActionsProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  addTokenUrl?: string\n}\n\nconst ClaimAction: React.FC<StakeActionsProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const [pendingTx, setPendingTx] = useState(false)\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `Claimed!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {earningToken.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\n        </div>\n        <Button\n          disabled={userData.stakedBalance.eq(0)}\n          onClick={handleHarvestConfirm}\n          style={{ borderRadius: '3px', height: '40px' }}\n          ml=\"4px\"\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default ClaimAction","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { PoolCategory } from 'config/constants/types'\nimport { ThemeContext } from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\n\nconst PoolCard: React.FC<{ pool: Pool; account: string, userDataReady: boolean }> = ({ pool, account, userDataReady }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData, startBlock, endBlock, isComingSoon, poolCategory, stakingTokenPrice } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress);\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n    const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n        <ClaimAction\n            stakingTokenBalance={stakingTokenBalance}\n            isBnbPool={isBnbPool}\n            pool={pool}\n            stakingTokenPrice={stakingTokenPrice}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection \n            stakingAddress={getBscScanAddressUrl(stakingAddess)}\n        />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport {Box,CardBody} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport { Oval } from 'react-loading-icons'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showUpcomingPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} userDataReady={userDataReady} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \n  const mggPool = openPools.filter((pool) => pool.isMain)[0]\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[56], mggPool.earningToken.address[56], isFetchData)\n  \n  const prevStakingPrice = usePrevious(stakingPrice);\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if ((stakingPrice > 0) || (rewardPrice > 0)) {\n      setFetchData(false);\n    }   \n    setTimeout(() => {\n      setFetchData(true);\n      if ((stakingPrice !== prevStakingPrice) || (rewardPrice !== prevRewardPrice)) {\n        setFetchData(true);\n      } else {\n        setFetchData(false);\n      }\n    }, 60000);\n    if ((prevStakingPrice === stakingPrice) || (prevRewardPrice === rewardPrice)) {\n      setFetchData(false);\n    }\n    \n    \n  }, [stakingPrice, rewardPrice, setFetchData, prevStakingPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const tvr = useMemo(\n    () => new BigNumber(totalStaked).times(stakingPrice).toFixed(4),\n    [totalStaked, stakingPrice])  \n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG and other tokens by staking!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked ? `${totalStaked} MGG` : <Oval width=\"20px\" height=\"20px\" />} </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex\n            style={\n              isMobile\n                ? {\n                    fontSize: '150px',\n                    margin: 'auto',\n                    marginTop: '20px',\n                    marginBottom: '20px',\n                  }\n                : { fontSize: '240px', marginRight: '-118px' }\n            }\n          >\n            <SvgIcon\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\n              viewBox=\"0  0 384 512\"\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\n              fontSize=\"inherit\"\n            />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools  \n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}
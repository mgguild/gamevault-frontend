{"version":3,"sources":["utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx","components/Balance.tsx","hooks/usePersistState.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx"],"names":["getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","Wrapper","styled","Flex","theme","colors","MGG_active","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","token","pairToken","justifyContent","alignItems","mb","flexDirection","style","textAlign","split","TokenPairImage","variant","primaryToken","secondaryToken","width","height","CircularIndeterminate","Box","sx","display","color","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","onDismiss","max","tokenName","useState","val","setVal","pendingTx","setPendingTx","t","useTranslation","fullBalance","useMemo","getFullDisplayBalance","BigNumber","useToast","toastError","toastSuccess","useCallback","e","currentTarget","validity","valid","value","replace","title","marginTop","fontSize","bold","quoteToken","symbol","lpSymbol","margin","padding","disabled","fullWidth","onClick","a","console","error","Container","div","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","pid","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","dispatch","useAppDispatch","account","useWeb3React","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","ModalInput","onSelectMax","onChange","isFinite","eq","gt","ClaimModal","DepositModal","addTokenUrl","handleUnstake","maxStake","requestedApproval","setRequestedApproval","setActiveSelect","userData","allowance","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","lpAddress","getAddress","lpContract","useERC20","RewardTokenBalance","useTokenBalance","address","formatTokenBalance","getBalanceAmount","balance","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useLPStakingContract","onApprove","useApprove","handleApprove","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","href","onMouseEnter","onMouseLeave","StakeAction","userDataReady","onStake","useStake","onUnstake","useExit","location","useLocation","handleStake","useLpTokenPrice","amount","contract","stakedBalanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","UnlockButton","mt","HarvestAction","stakingContract","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","BIG_ZERO","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","onReward","useClaim","textTransform","MGG_accent2","pr","Balance","decimals","unit","prefix","borderRadius","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","props","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","apr","maximumFractionDigits","stakingAddress","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","useFarmPrice","Number","lpTotalSupply","LPPrice","rewardPrice","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","DetailsSection","getBscScanAddressUrl","lpInfoAddress","infoURL","BASE_INFO_URL","ApyButton","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","scale","text","textSubtle","AprWrapper","Apr","tokenAddress","quoteTokenAddress","originalValue","hideButton","mediaQueries","sm","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","getBalanceNumber","Amount","span","earned","textDisabled","Earned","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","useUnstake","lpPrice","times","mr","marginBottom","expandAnimation","collapseAnimation","css","background","StyledLinkExternal","LinkExternal","StakeContainer","TagsContainer","ActionContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","info","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","xl","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","usePersistState","CARD","localStorageKey","viewMode","sortOption","isArchived","isInactive","useMedia","maxWidth","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","mggFarm","totalStaked","PageHeader","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent","isDisabled","previousValue","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","initialValue","userOptions","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePoolPrice","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","token1Address","token2Address","_token1Address","_token2Address","setLPPrice","API_SUMMARY","summary","pairLiquidity","prototype","hasOwnProperty","call","API_LIQUIDITY","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","tokens","wbnb","iconExtension","src","alt","useSousStake","sousId","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","txHash","exit","useSousUnstake","enableEmergencyWithdraw","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionTitles","ActionContent","Grid","GridItem","GridHeaderItem","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","freq","fee","CoreTag","outline","startIcon","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","Latinise","latin_map","τ","Τ","input","x","StyledHr","ModalHr","hr","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","isDark","modal","Inner","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","isBalanceZero","position","pattern","inputMode","step","min","placeholder","size"],"mappings":"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","file":"static/js/11.fd2da01d.chunk.js","sourcesContent":["// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\r\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\r\n  const firstPart =\r\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\r\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  farmSymbol?: string\r\n  tokenSymbol?: string\r\n  rewardToken?:string\r\n  token: Token\r\n  quoteToken: Token\r\n  pairToken?: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  farmSymbol,\r\n  rewardToken,\r\n  token,\r\n  pairToken\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"row\" alignItems=\"\">\r\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}}>Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\r\n      </Flex>\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\r\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import * as React from 'react'\r\nimport { Box, CircularProgress } from '@material-ui/core'\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\r\n      <CircularProgress color='inherit' />\r\n    </Box>\r\n  );\r\n}\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from '../../../hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  farm?: any,\r\n  staked?: any,\r\n  earnings?: any,\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\r\n  {\r\n    farm,\r\n    staked,\r\n    earnings,\r\n    onConfirm,\r\n    onDismiss,\r\n    max, tokenName = '',\r\n  }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title='' onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\r\n        <Text>and withdrawing the staked amount of</Text>\r\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\r\n        <Button\r\n          disabled={pendingTx}\r\n          fullWidth onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onConfirm(val)\r\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\r\n            onDismiss()\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n        }}>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\n\r\nconst Container = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: auto;\r\n`\r\n\r\nconst DetailsCont = styled.div`\r\n    width: 30%;\r\n    height: auto;\r\n    overflow: visible;\r\n`\r\n\r\nconst ActionDiv = styled.div`\r\n    margin: 15px 0px;\r\n    padding: 10px;\r\n`\r\nconst ModalFooter = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport { DetailsCont, ActionDiv, ModalFooter }\r\nexport default Container;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \r\n\r\nconst Container = styled.div`\r\n    margin-top: -30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 500px;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n    padding: 10px 0px;\r\n`\r\nconst CancelButton = styled(Button)`\r\n    flex: 1;\r\n    margin-right: 10px;\r\n`\r\nconst DepositButton = styled(Button)`\r\n    flex: 1;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport {StyledFlex, CancelButton, DepositButton}\r\nexport default Container;\r\n\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { Modal, Text } from '@metagg/mgg-uikit'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\r\nimport useToast from '../../../../hooks/useToast'\r\nimport { useTranslation } from '../../../../contexts/Localization'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\ninterface StakeModalInterface {\r\n  pid: number,\r\n  onDismiss?: () => void\r\n  max: BigNumber\r\n  symbol: string\r\n  placeholder?: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  lpStakingContract?: Contract\r\n}\r\n\r\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\r\n  const [val, setVal] = useState('0')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const onClick = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      await onConfirm(val, lpStakingContract)\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        `${t('Staked')}!`,\r\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\r\n      )\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(\r\n        t('Error'),\r\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n      console.error(e)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  return (\r\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\r\n      <Container>\r\n        <Text>Stake amount: </Text>\r\n        <ModalInput\r\n          value={val}\r\n          onSelectMax={handleSelectMax}\r\n          onChange={handleChange}\r\n          max={fullBalance}\r\n          symbol={symbol}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          //  inputTitle={t('Stake')}\r\n        />\r\n      </Container>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <Text>{ symbol } balance: </Text>\r\n        <Text>{ fullBalance }</Text>\r\n      </StyledFlex>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <CancelButton\r\n          onClick={onDismiss}\r\n        >\r\n         Close\r\n        </CancelButton>\r\n        <DepositButton\r\n          onClick={onClick}\r\n          // disable Deposit button if not yet approved\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n        >\r\n        Deposit\r\n        </DepositButton>\r\n      </StyledFlex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Stake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\r\n\r\ninterface ClaimModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\r\n  \r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\r\n        <Button fullWidth>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Modal, Skeleton, Text, useModal } from '@sparkpointio/sparkswap-uikit'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\r\nimport { ModalHr } from './Divider'\r\nimport StakeModal from './Modals/Stake'\r\nimport ClaimModal from './Modals/ClaimModal'\r\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\r\n\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n  handleUnstake?: (amount: string) => void\r\n  maxStake?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = (\r\n  {\r\n    max,\r\n    onConfirm,\r\n    onDismiss,\r\n    tokenName = '',\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n    handleUnstake,\r\n    farm,\r\n    maxStake,\r\n  }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  } = farm.userData || {}\r\n  const userRate = calculateUserRewardRate(farm)\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { pid, lpAddresses } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpContract = useERC20(lpAddress)\r\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\r\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\r\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\r\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\r\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\r\n\r\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\r\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setIsApproved(true)\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      pid={pid}\r\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      inputTitle={t('Stake')} />,\r\n  )\r\n\r\n  const [onPresentClaim] = useModal(<ClaimModal />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedTokenBalance}\r\n      earnings={formatTokenEarnings}\r\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\r\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\r\n        Staking, balances & earnings\r\n      </Text>\r\n      <Container>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {farm.quoteToken.symbol}\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\r\n              Get {farm.quoteToken.symbol}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {tokenName} Tokens\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\r\n              Get {tokenName}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            Your {tokenName} Deposits\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            {isApproved ?\r\n              <Button fullWidth onClick={onPresentStake}>\r\n                Stake {tokenName}\r\n              </Button>\r\n              :\r\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\r\n                Enable Farm\r\n              </Button>\r\n            }\r\n\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n      </Container>\r\n      <ModalHr />\r\n      <ModalFooter>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {userRate}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont\r\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n          onMouseEnter={() => setActiveSelect(true)}\r\n          onMouseLeave={() => setActiveSelect(false)}\r\n        >\r\n          <Button fullWidth onClick={onPresentWithdraw}>\r\n            <Text>Claim & Withdraw</Text>\r\n          </Button>\r\n        </DetailsCont>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake, { useExit } from 'hooks/useUnstake'\r\nimport { Farm } from 'state/types'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Loading from 'components/Loading'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady?: boolean\r\n  userRate?:string,\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  addTokenUrl,\r\n  farm,\r\n  userDataReady\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string, contract?: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      addTokenUrl={addTokenUrl}\r\n      farm={farm}\r\n      handleUnstake={handleUnstake}\r\n      maxStake={stakedBalance}\r\n    />\r\n  )\r\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\r\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedBalance}\r\n      earnings={earnings}\r\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    let buttonTxt = 'Deposit'\r\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\r\n      buttonTxt = 'Withdraw'\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\r\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        fullWidth\r\n      >\r\n        {userDataReady?\r\n          buttonTxt\r\n          : <Loading /> }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = (\r\n  {\r\n    userDataReady,\r\n    farm,\r\n    account,\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n  }) => {\r\n  const { t } = useTranslation()\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n\r\n  const renderDepositButton = () => {\r\n    return (\r\n      <StakeAction\r\n        userDataReady={userDataReady}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        addTokenUrl={addTokenUrl}\r\n        farm={farm}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useClaim } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\r\nimport useToast from '../../../../../hooks/useToast'\r\n\r\n\r\ninterface HarvestActionProps {\r\n  pid: number\r\n  stakingContract?: string,\r\n  tokenRewardSymbol?: string,\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\r\n  {\r\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady,\r\n  }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useClaim(stakingContract)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          {tokenRewardSymbol}\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\r\n          )}\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Claimed')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml='4px'\r\n        >\r\n          {t('Claim')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes, ThemeContext } from 'styled-components'\r\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { getFarmV2Apr } from 'utils/apr'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  max-width: 450px;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  // padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.card};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\r\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.quoteToken.symbol\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  \r\n  const stakingAddress = getAddress(farm.stakingAddresses);\r\n\r\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[56]}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const theme = useContext(ThemeContext)\r\n\r\n\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56])\r\n\r\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\r\n  const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        farmSymbol={farm.lpSymbol}\r\n        tokenSymbol={farm.token.symbol}\r\n        rewardToken={farm.quoteToken.symbol}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n        pairToken={farm.pairToken}\r\n      />\r\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )} */}\r\n\r\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\r\n        <Text>{t('Total Deposits')}</Text>\r\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\r\n      </Flex> */}\r\n      <div style={{margin: '24px'}}>\r\n      <Flex>\r\n        <HarvestAction stakingContract={getAddress(farm.stakingAddresses)}\r\n                       tokenRewardSymbol={earnLabel} userDataReady={userDataReady} userData={farm.userData}\r\n                       pid={farm.pid} />\r\n      </Flex>\r\n      {/* <Flex justifyContent='space-between'>\r\n        <Text>{t('APR')}</Text>\r\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\r\n      </Flex> */}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Rate')}</Text>\r\n        <Text color='textSubtle'>\r\n          {formatTotalRewardRate ?? <Skeleton width={60} display='inline-block' />} {earnLabel} / week</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{t('Duration')}</Text>\r\n        <Text color='textSubtle'>{farm.remainingDays ??  <Skeleton width={60} display='inline-block' />} Days</Text>\r\n      </Flex>\r\n      <CardActionsContainer userDataReady={userDataReady} farm={farm} account={account}\r\n                            addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\r\n\r\n      <DetailsSection\r\n        removed={removed}\r\n        stakingAddress={getBscScanAddressUrl(stakingAddress)}\r\n        lpInfoAddress={`${farm.infoURL?? BASE_INFO_URL}/${lpAddress}`}\r\n        lpLabel={lpLabel}\r\n      />\r\n\r\n      {/* <Divider />\r\n       <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={farm.totalDeposits}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n      <Flex justifyContent='center'>\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\r\n      </Flex> */}\r\n      </div>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const mainTokenAddress = quoteTokenAddress;\r\n  const pairTokenAddress = tokenAddress\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  token,\r\n  pairToken,\r\n  userDataReady,\r\n  stakingAddresses,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: token.address,\r\n    pairTokenAddress: pairToken.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string, contract: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const lpStakingAddress = getAddress(stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.boxShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport useMedia from 'use-media'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('earned')\r\n  const theme = useContext(ThemeContext)\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid === 260 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid === 260 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n            || latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        // case 'promoted':\r\n        //   return orderBy(\r\n        //     farms,\r\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\r\n        //     'desc',\r\n        //   )\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'duration':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\r\n            'desc',\r\n          )\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const handleItemClick = (index: number) => setActiveTab(index)\r\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n    // Uncomment this if !comingsoon\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div style={{marginTop: '25x', paddingTop: '25px' }}>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          {/* {farmsList(activeFarms).map((farm) => ( */}\r\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\r\n          {/* ))} */}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const renderInactiveContent = (): JSX.Element => {\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '20px' }}>\r\n          <Text fontSize='24px' bold> Inactive Liquidity Pools </Text>\r\n        </div>\r\n\r\n        <FlexLayout>\r\n          {farmsList(inactiveFarms).map((farm) => (\r\n            <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                      removed />\r\n          ))}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const mggFarm = farmsStakedMemoized[0];\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(mggFarm.lpTotalSupply), mggFarm.token.address[56], mggFarm.pairToken.address[56], mggFarm.quoteToken.address[56])\r\n  const apr = getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate))\r\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex alignItems='center' justifyContent='space-around' flexDirection={['column', null, 'row']}\r\n              style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n              padding='24px'>\r\n\r\n        <Flex flexDirection='column' flex=\"2\">\r\n          <Flex justifyContent='space-around' flexDirection='column' padding=\"25px 25px 25px 0px\" mr={['8px', 0]} style={{borderBottom: `1px solid ${theme.colors.MGG_active}`}}>\r\n            <Text color={theme.colors.primary} fontSize='60px' bold>\r\n              Liquidity Staking\r\n            </Text>\r\n            <Text color='text' bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n              Stake LP token and earn MGG!\r\n            </Text>\r\n          </Flex>\r\n          <InfoBox style={{width: '100%'}} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total MGG Staked</Text>\r\n             <Text fontSize='20px'> {totalStaked} MGG</Text>\r\n           </Flex>\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total value Locked</Text>\r\n             <Text fontSize='20px'>- USD</Text>\r\n           </Flex>\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>APR</Text>\r\n             <Text fontSize='20px'>{apr} % </Text>\r\n           </Flex>\r\n        </InfoBox>\r\n        </Flex>\r\n          {/* <Flex style={isMobile ? {\r\n            fontSize: '150px',\r\n            margin: 'auto',\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n          } : { fontSize: '240px', marginRight: '-118px' }}>\r\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\r\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        { /* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> \r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          {/* <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  // {\r\n                  //   label: t('APR'),\r\n                  //   value: 'apr',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Multiplier'),\r\n                  //   value: 'multiplier',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Promoted'),\r\n                  //   value: 'promoted',\r\n                  // },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Duration'),\r\n                    value: 'duration',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform='uppercase'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\r\n            </LabelWrapper>\r\n          </FilterContainer> \r\n        </ControlContainer> */}\r\n\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json();\r\n            const lastPrice = \"last_price\"\r\n            \r\n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\r\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string) => {\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json()\r\n            let summary = await fetch(SPARKSWAP_API.concat(API_SUMMARY))\r\n            summary = await summary.json()\r\n\r\n            let pairLiquidity\r\n\r\n            if(Object.prototype.hasOwnProperty.call(summary, _token1Address.concat(\"_\",_token2Address))){\r\n                pairLiquidity = summary[_token1Address.concat(\"_\",_token2Address)][API_LIQUIDITY];\r\n            }\r\n            else{\r\n                pairLiquidity = summary[_token2Address.concat(\"_\",_token1Address)][API_LIQUIDITY];\r\n            }\r\n\r\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\r\n            setRewardPrice(assets[_rewardTokenAddress][API_LASTPRICE])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n    // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n                                                 max,\r\n                                                 // symbol,\r\n                                                 onChange,\r\n                                                 onSelectMax,\r\n                                                 value,\r\n                                                 // addLiquidityUrl,\r\n                                                 // inputTitle,\r\n                                                 decimals = 18,\r\n                                               }) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems='flex-end' justifyContent='space-around'>\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode='decimal'\r\n            step='any'\r\n            min='0'\r\n            onChange={onChange}\r\n            placeholder='0'\r\n            value={value}\r\n          />\r\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n\r\n\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n"],"sourceRoot":""}
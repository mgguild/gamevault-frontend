{"version":3,"sources":["hooks/useContract.ts","components/UnlockButton.tsx","components/Balance.tsx","hooks/useWeb3.ts","utils/callHelpers.ts","utils/bscscan.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useTokenBalance.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIfoV1Contract","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","Balance","value","color","decimals","isDisabled","unit","prefix","previousValue","useRef","useEffect","current","start","end","duration","separator","library","useWeb3React","refEth","useState","Web3","web3NoAccount","setweb3","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","buyBox","inoContract","rarity","amount","buy","getDecimalAmount","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","useApprove","contractAddress","onApprove","useCallback","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","customAccount","balanceOf","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","HarvestAction","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","farmV2Apr","getFarmV2Apr","rewardRate","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/12.4c0064b4.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract, getInoContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods\n    .buy(rarity)\n    .send({ from: account, value: getDecimalAmount(amount) }) // to fix\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, amount)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = \"0x0000\") => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  let { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  if (customAccount !== \"0x0000\") account = customAccount;\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","const useChainFinder = (chainId:number) => {\n  switch (chainId){\n    case 1:\n      return \"eth\"\n    case 3:\n      return \"ropsten\"\n    case 56:\n      return \"bsc\"\n    case 97:\n      return \"bsc testnet\"\n    default:\n      return \"bsc\"\n  }\n}\n\nexport default useChainFinder","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers';\n\nexport const useTokenPrice = (tokenAddress: string) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n  \n    const chainName = useChainFinder(chainId);\n    \n    const [tokenPrice, setTokenPrice] = useState(0)\n    const web3 = useWeb3()\n  \n    let _tokenAddress\n    try{\n      if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\n      _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\n            const _tokenPrice = result.usdPrice\n            \n            setTokenPrice(_tokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n  \n    return {tokenPrice}\n  }\n\n\n  export const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n    chainName = useChainFinder(chainId)\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n  \n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try {\n      _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          let result\n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n          const _stakingTokenPrice = result.usdPrice\n  \n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n          const _rewardTokenPrice = result.usdPrice\n  \n          setStakingPrice(_stakingTokenPrice)\n          setRewardPrice(_rewardTokenPrice)\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n      if (isFetchData){\n        fetchData()\n      }\n      \n    }, [setStakingPrice, setRewardPrice, _stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName, isFetchData])\n  \n    return { stakingPrice, rewardPrice }\n  }\n  \n  export const useFarmPrice = (\n    lpTotalSupply: number,\n    token1Address: string,\n    token2Address: string,\n    rewardTokenAddress: string,\n    lpAddress: string,\n    isFetchData?: boolean,\n  ) => {\n    const MoralisWeb3Api = useMoralisWeb3Api()\n    const { chainId } = useWeb3React()\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n    chainName = useChainFinder(chainId)\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n  \n    useEffect(() => {\n      const findPrice = async (tokenAddress: string) => {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n        const price = result.usdPrice\n        return price\n      }\n  \n      const fetchData = async () => {\n        try {\n          let _totalToken1InPool\n          let _totalToken2InPool\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n          const _token1Price = findPrice(_token1Address)\n          const _token2Price = findPrice(_token2Address)\n          const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n          const res = MoralisWeb3Api.account.getTokenBalances({\n            chain: chainName,\n            address: _lpAddress,\n            token_addresses: [_token1Address, _token2Address],\n          })\n          const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n          const result = data[3]\n          if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n          } else {\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance),  Number(result[0].decimals))\n          }\n  \n          if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance),  Number(result[1].decimals))\n          } else {\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n          }\n  \n          setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n          setRewardPrice(data[2])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n      if (isFetchData) {\n        fetchData()\n      }\n     \n     \n    }, [\n      isFetchData,\n      setLPPrice,\n      setRewardPrice,\n      lpTotalSupply,\n      _token1Address,\n      _token2Address,\n      _rewardTokenAddress,\n      _lpAddress,\n      chainName,\n      MoralisWeb3Api,\n    ])\n  \n    return { LPPrice, rewardPrice }\n  }\n\nexport default usePoolPrice","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, {useRef, useEffect} from 'react';\n\nfunction usePrevious(value) {\n    const ref = React.useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); \n    return ref.current;\n}\n\nexport default usePrevious;","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?:string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color='inherit' />\n    </Box>\n  );\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any,\n  staked?: any,\n  earnings?: any,\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\n  {\n    farm,\n    staked,\n    earnings,\n    onConfirm,\n    onDismiss,\n    max, tokenName = '',\n  }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title='' onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\n      </Flex>\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\n        <Button\n          disabled={pendingTx}\n          fullWidth onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onConfirm(val)\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n            onDismiss()\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n        }}>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\n\nconst Container = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n    height: auto;\n`\n\nconst DetailsCont = styled.div`\n    width: 30%;\n    height: auto;\n    overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n    margin: 15px 0px;\n    padding: 10px;\n`\nconst ModalFooter = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container;\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \n\nconst Container = styled.div`\n    margin-top: -30px;\n    display: flex;\n    flex-direction: column;\n    min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n    padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n    flex: 1;\n    margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n    flex: 1;\n    margin-left: 10px;\n`\n\nexport {StyledFlex, CancelButton, DepositButton}\nexport default Container;\n\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\n\ninterface StakeModalInterface {\n  pid: number,\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(\n        `${t('Staked')}!`,\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\n      )\n      onDismiss()\n    } catch (e) {\n      toastError(\n        t('Error'),\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{ symbol } balance: </Text>\n        <Text>{ fullBalance }</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton\n          onClick={onDismiss}\n        >\n         Close\n        </CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n        Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\n  \n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = (\n  {\n    max,\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    addLiquidityUrl,\n    addTokenUrl,\n    handleUnstake,\n    farm,\n    maxStake,\n  }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  } = farm.userData || {}\n  const userRate = calculateUserRewardRate(farm)\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')} />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ?\n              <Button fullWidth onClick={onPresentStake}>\n                Stake {tokenName}\n              </Button>\n              :\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            }\n\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {userRate}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?:string,\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\n        fullWidth\n      >\n        {userDataReady?\n          buttonTxt\n          : <Loading /> }\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = (\n  {\n    userDataReady,\n    farm,\n    account,\n    addLiquidityUrl,\n    addTokenUrl,\n  }) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return (\n    <Action>\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\n\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string,\n  tokenRewardSymbol?: string,\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\n  {\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady,\n  }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext);\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\n          )}\n        </div>\n        <Button\n          style={{borderRadius: '3px', height: '40px'}}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml='4px'\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const stakingAddress = getAddress(farm.stakingAddresses);\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n  // const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\n  // const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\n  // const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.lpAddresses[56])\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\n  // const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{ margin: '24px' }}>\n        <Flex>\n          <HarvestAction\n            stakingContract={getAddress(farm.stakingAddresses)}\n            tokenRewardSymbol={earnLabel}\n            userDataReady={userDataReady}\n            userData={farm.userData}\n            pid={farm.pid}\n          />\n        </Flex>\n        {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Rate')}</Text>\n          <Text color=\"textSubtle\">\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Duration')}</Text>\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\n        </Flex>\n        <CardActionsContainer\n          userDataReady={userDataReady}\n          farm={farm}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          addTokenUrl={AddTokenUrl}\n        />\n\n        <DetailsSection\n          removed={removed}\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\n          lpLabel={lpLabel}\n        />\n\n        {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const mainTokenAddress = quoteTokenAddress;\n  const pairTokenAddress = tokenAddress\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { Contract } from 'web3-eth-contract'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  token,\n  pairToken,\n  userDataReady,\n  stakingAddresses,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: token.address,\n    pairTokenAddress: pairToken.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string, contract: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const lpStakingAddress = getAddress(stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const dispatch = useAppDispatch()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.boxShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Oval } from 'react-loading-icons'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n    return (\n      <div>\n        <div style={{ margin: '20px' }}>\n          <Text fontSize=\"24px\" bold>\n            {' '}\n            Inactive Liquidity Pools{' '}\n          </Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(inactiveFarms).map((farm) => (\n            <FarmCard\n              userDataReady={userDataReady}\n              key={farm.pid}\n              farm={farm}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\n\n  // const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\n  // const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\n  const lpTotalSupply = getBalanceNumber(new BigNumber(mggFarm.totalDeposits ?? 0))\n  const { LPPrice, rewardPrice } = useFarmPrice(\n    Number(lpTotalSupply),\n    mggFarm.token.address[56],\n    mggFarm.pairToken.address[56],\n    mggFarm.quoteToken.address[56],\n    mggFarm.lpAddresses[56],\n    isFetchData\n  )\n  const prevLPPrice = usePrevious(LPPrice);\n  const prevRewardPrice = usePrevious(rewardPrice);\n  useEffect(() => {\n    if ((LPPrice > 0) || (rewardPrice > 0)) {\n      setFetchData(false);\n    }   \n    setTimeout(() => {\n      setFetchData(true);\n      if ((LPPrice !== prevLPPrice) || (rewardPrice !== prevRewardPrice)) {\n        setFetchData(true);\n      } else {\n        setFetchData(false);\n      }\n    }, 60000);\n    if ((prevLPPrice === LPPrice) || (prevRewardPrice === rewardPrice)) {\n      setFetchData(false);\n    }\n    \n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)),\n    [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate],\n  )\n  \n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4) ?? (\n    <Oval width=\"20px\" height=\"20px\" />\n  )\n  const tvr = useMemo(\n    () => getBalanceAmount(new BigNumber(mggFarm.lpTotalSupply)).times(LPPrice).toFixed(4),\n    [mggFarm.lpTotalSupply, LPPrice],\n  )\n\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Liquidity Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG with your LP tokens!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Tokens Staked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {' '}\n                  {totalStaked} {mggFarm.lpSymbol}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\">{apr}</Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}
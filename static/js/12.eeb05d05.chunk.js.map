{"version":3,"sources":["hooks/useContract.ts","components/UnlockButton.tsx","components/Balance.tsx","hooks/useWeb3.ts","utils/callHelpers.ts","utils/bscscan.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useTokenBalance.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIfoV1Contract","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","Balance","value","color","decimals","isDisabled","unit","prefix","previousValue","useRef","useEffect","current","start","end","duration","separator","library","useWeb3React","refEth","useState","Web3","web3NoAccount","setweb3","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","buyBox","inoContract","rarity","amount","buy","getDecimalAmount","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","useApprove","contractAddress","onApprove","useCallback","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","customAccount","balanceOf","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","HarvestAction","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","farmV2Apr","getFarmV2Apr","rewardRate","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Infinity","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/12.eeb05d05.chunk.js","sourcesContent":["import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getLpStakingContract, getInoContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useInoContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getInoContract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useLPStakingContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\r\n      {t('Connect Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : web3NoAccount)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\r\nimport farms from 'config/constants/farms'\r\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\r\nimport tokens from 'config/constants/tokens'\r\nimport { web3WithArchivedNodeProvider } from './web3'\r\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const buyBox = async (inoContract, rarity, account, amount) => {\r\n  return inoContract.methods\r\n    .buy(rarity)\r\n    .send({ from: account, value: getDecimalAmount(amount) }) // to fix\r\n}\r\n\r\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, amount)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\r\n  if (useV2) {\r\n    return masterChefContract.methods\r\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({\r\n      from: account,\r\n      gas: DEFAULT_GAS_LIMIT,\r\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const exit = async (contract: Contract, account) => {\r\n  return contract.methods\r\n    .exit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claim = async (contract, account) => {\r\n  return contract.methods\r\n    .getReward()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\nconst cakeBnbPid = 251\r\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\r\n\r\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\r\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\r\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\r\n//\r\n// /**\r\n//  * Returns the total CAKE staked in the CAKE-BNB LP\r\n//  */\r\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\r\n//   try {\r\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\r\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\r\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\r\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\r\n//\r\n//     const pair: Pair = new Pair(\r\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\r\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\r\n//     )\r\n//     const cakeLPBalance = pair.getLiquidityValue(\r\n//       pair.token0,\r\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\r\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\r\n//       false,\r\n//     )\r\n//\r\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\r\n//   } catch (error) {\r\n//     console.error(`CAKE-BNB LP error: ${error}`)\r\n//     return BIG_ZERO\r\n//   }\r\n// }\r\n\r\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\r\n  try {\r\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\r\n\r\n    return {\r\n      stakedTokens: await contract.methods.balanceOf(account).call(),\r\n      totalDeposits: await contract.methods.totalSupply().call(),\r\n      rewardRate: await contract.methods.rewardRate().call(),\r\n    }\r\n  } catch (error) {\r\n    console.error(`LP Staking error: ${error}`)\r\n    return {\r\n      totalDeposits: '-',\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the cake staked in the main pool\r\n */\r\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\r\n  try {\r\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\r\n\r\n    return getBalanceAmount(new BigNumber(response.amount))\r\n  } catch (error) {\r\n    console.error('Error getting stake in CAKE pool', error)\r\n    return BIG_ZERO\r\n  }\r\n}\r\n","import { BASE_BSC_SCAN_URL } from 'config'\r\n\r\nexport const getBscScanAddressUrl = (address: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { approve, approveWithAmount } from 'utils/callHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\r\nimport useToast from './useToast'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\r\n  const { account } = useWeb3React()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(lpContract, contractAddress, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lpContract, contractAddress])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = () => {\r\n    cakeContract.methods\r\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setRequestedApproval(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n        setLastUpdated()\r\n        setRequestedApproval(false)\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      })\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\r\n        const currentAllowance = new BigNumber(response)\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(cakeContract, lotteryContract, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string, customAccount = \"0x0000\") => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  let { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  if (customAccount !== \"0x0000\") account = customAccount;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.allowance(account, allowedAddress).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","const useChainFinder = (chainId:number) => {\r\n  switch (chainId){\r\n    case 1:\r\n      return \"eth\"\r\n    case 3:\r\n      return \"ropsten\"\r\n    case 56:\r\n      return \"bsc\"\r\n    case 97:\r\n      return \"bsc testnet\"\r\n    default:\r\n      return \"bsc\"\r\n  }\r\n}\r\n\r\nexport default useChainFinder","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useMoralisWeb3Api } from 'react-moralis'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useChainFinder from './chainHelpers';\r\n\r\nexport const useTokenPrice = (tokenAddress: string) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n  \r\n    const chainName = useChainFinder(chainId);\r\n    \r\n    const [tokenPrice, setTokenPrice] = useState(0)\r\n    const web3 = useWeb3()\r\n  \r\n    let _tokenAddress\r\n    try{\r\n      if (tokenAddress === undefined) throw new Error(\"Token address undefined\");\r\n      _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n  \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            const result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _tokenAddress})\r\n            const _tokenPrice = result.usdPrice\r\n            \r\n            setTokenPrice(_tokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\r\n  \r\n    return {tokenPrice}\r\n  }\r\n\r\n\r\n  export const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\r\n    chainName = useChainFinder(chainId)\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n  \r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try {\r\n      _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    } catch {\r\n      console.error('Invalid staking and reward address')\r\n    }\r\n  \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          let result\r\n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\r\n          const _stakingTokenPrice = result.usdPrice\r\n  \r\n          result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\r\n          const _rewardTokenPrice = result.usdPrice\r\n  \r\n          setStakingPrice(_stakingTokenPrice)\r\n          setRewardPrice(_rewardTokenPrice)\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n      if (isFetchData){\r\n        fetchData()\r\n      }\r\n      \r\n    }, [setStakingPrice, setRewardPrice, _stakingTokenAddress, _rewardTokenAddress, MoralisWeb3Api, chainName, isFetchData])\r\n  \r\n    return { stakingPrice, rewardPrice }\r\n  }\r\n  \r\n  export const useFarmPrice = (\r\n    lpTotalSupply: number,\r\n    token1Address: string,\r\n    token2Address: string,\r\n    rewardTokenAddress: string,\r\n    lpAddress: string,\r\n    isFetchData?: boolean,\r\n  ) => {\r\n    const MoralisWeb3Api = useMoralisWeb3Api()\r\n    const { chainId } = useWeb3React()\r\n    let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\r\n    chainName = useChainFinder(chainId)\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    let _lpAddress\r\n    try {\r\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\r\n    } catch {\r\n      console.error('Invalid staking and reward address')\r\n    }\r\n  \r\n    useEffect(() => {\r\n      const findPrice = async (tokenAddress: string) => {\r\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\r\n        const price = result.usdPrice\r\n        return price\r\n      }\r\n  \r\n      const fetchData = async () => {\r\n        try {\r\n          let _totalToken1InPool\r\n          let _totalToken2InPool\r\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\r\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\r\n          // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\r\n          const _token1Price = findPrice(_token1Address)\r\n          const _token2Price = findPrice(_token2Address)\r\n          const _rewardTokenPrice = findPrice(_rewardTokenAddress)\r\n          const res = MoralisWeb3Api.account.getTokenBalances({\r\n            chain: chainName,\r\n            address: _lpAddress,\r\n            token_addresses: [_token1Address, _token2Address],\r\n          })\r\n          const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\r\n          const result = data[3]\r\n          if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\r\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\r\n          } else {\r\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance),  Number(result[0].decimals))\r\n          }\r\n  \r\n          if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\r\n            _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance),  Number(result[1].decimals))\r\n          } else {\r\n            _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\r\n          }\r\n  \r\n          setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\r\n          setRewardPrice(data[2])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n      if (isFetchData) {\r\n        fetchData()\r\n      }\r\n     \r\n     \r\n    }, [\r\n      isFetchData,\r\n      setLPPrice,\r\n      setRewardPrice,\r\n      lpTotalSupply,\r\n      _token1Address,\r\n      _token2Address,\r\n      _rewardTokenAddress,\r\n      _lpAddress,\r\n      chainName,\r\n      MoralisWeb3Api,\r\n    ])\r\n  \r\n    return { LPPrice, rewardPrice }\r\n  }\r\n\r\nexport default usePoolPrice","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React, {useRef, useEffect} from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref = React.useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]); \r\n    return ref.current;\r\n}\r\n\r\nexport default usePrevious;","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n  // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  // symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  // addLiquidityUrl,\r\n  // inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\r\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\r\n  const firstPart =\r\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\r\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  farmSymbol?: string\r\n  tokenSymbol?: string\r\n  rewardToken?:string\r\n  token: Token\r\n  quoteToken: Token\r\n  pairToken?: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  farmSymbol,\r\n  rewardToken,\r\n  token,\r\n  pairToken\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"row\" alignItems=\"\">\r\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\r\n      </Flex>\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\r\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import * as React from 'react'\r\nimport { Box, CircularProgress } from '@material-ui/core'\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\r\n      <CircularProgress color='inherit' />\r\n    </Box>\r\n  );\r\n}\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from '../../../hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  farm?: any,\r\n  staked?: any,\r\n  earnings?: any,\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\r\n  {\r\n    farm,\r\n    staked,\r\n    earnings,\r\n    onConfirm,\r\n    onDismiss,\r\n    max, tokenName = '',\r\n  }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title='' onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\r\n        <Text>and withdrawing the staked amount of</Text>\r\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\r\n        <Button\r\n          disabled={pendingTx}\r\n          fullWidth onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onConfirm(val)\r\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\r\n            onDismiss()\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n        }}>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\n\r\nconst Container = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: auto;\r\n`\r\n\r\nconst DetailsCont = styled.div`\r\n    width: 30%;\r\n    height: auto;\r\n    overflow: visible;\r\n`\r\n\r\nconst ActionDiv = styled.div`\r\n    margin: 15px 0px;\r\n    padding: 10px;\r\n`\r\nconst ModalFooter = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport { DetailsCont, ActionDiv, ModalFooter }\r\nexport default Container;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \r\n\r\nconst Container = styled.div`\r\n    margin-top: -30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 500px;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n    padding: 10px 0px;\r\n`\r\nconst CancelButton = styled(Button)`\r\n    flex: 1;\r\n    margin-right: 10px;\r\n`\r\nconst DepositButton = styled(Button)`\r\n    flex: 1;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport {StyledFlex, CancelButton, DepositButton}\r\nexport default Container;\r\n\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { Modal, Text } from '@metagg/mgg-uikit'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\r\nimport useToast from '../../../../hooks/useToast'\r\nimport { useTranslation } from '../../../../contexts/Localization'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\ninterface StakeModalInterface {\r\n  pid: number,\r\n  onDismiss?: () => void\r\n  max: BigNumber\r\n  symbol: string\r\n  placeholder?: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  lpStakingContract?: Contract\r\n}\r\n\r\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\r\n  const [val, setVal] = useState('0')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const onClick = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      await onConfirm(val, lpStakingContract)\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        `${t('Staked')}!`,\r\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\r\n      )\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(\r\n        t('Error'),\r\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n      console.error(e)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  return (\r\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\r\n      <Container>\r\n        <Text>Stake amount: </Text>\r\n        <ModalInput\r\n          value={val}\r\n          onSelectMax={handleSelectMax}\r\n          onChange={handleChange}\r\n          max={fullBalance}\r\n          symbol={symbol}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          //  inputTitle={t('Stake')}\r\n        />\r\n      </Container>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <Text>{ symbol } balance: </Text>\r\n        <Text>{ fullBalance }</Text>\r\n      </StyledFlex>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <CancelButton\r\n          onClick={onDismiss}\r\n        >\r\n         Close\r\n        </CancelButton>\r\n        <DepositButton\r\n          onClick={onClick}\r\n          // disable Deposit button if not yet approved\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n        >\r\n        Deposit\r\n        </DepositButton>\r\n      </StyledFlex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Stake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\r\n\r\ninterface ClaimModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\r\n  \r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\r\n        <Button fullWidth>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\r\nimport { ModalHr } from './Divider'\r\nimport StakeModal from './Modals/Stake'\r\nimport ClaimModal from './Modals/ClaimModal'\r\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\r\n\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n  handleUnstake?: (amount: string) => void\r\n  maxStake?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = (\r\n  {\r\n    max,\r\n    onConfirm,\r\n    onDismiss,\r\n    tokenName = '',\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n    handleUnstake,\r\n    farm,\r\n    maxStake,\r\n  }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  } = farm.userData || {}\r\n  const userRate = calculateUserRewardRate(farm)\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { pid, lpAddresses } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpContract = useERC20(lpAddress)\r\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\r\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\r\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\r\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\r\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\r\n\r\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\r\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setIsApproved(true)\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      pid={pid}\r\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      inputTitle={t('Stake')} />,\r\n  )\r\n\r\n  const [onPresentClaim] = useModal(<ClaimModal />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedTokenBalance}\r\n      earnings={formatTokenEarnings}\r\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\r\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\r\n        Staking, balances & earnings\r\n      </Text>\r\n      <Container>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {farm.quoteToken.symbol}\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\r\n              Get {farm.quoteToken.symbol}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {tokenName} Tokens\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\r\n              Get {tokenName}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            Your {tokenName} Deposits\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            {isApproved ?\r\n              <Button fullWidth onClick={onPresentStake}>\r\n                Stake {tokenName}\r\n              </Button>\r\n              :\r\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\r\n                Enable Farm\r\n              </Button>\r\n            }\r\n\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n      </Container>\r\n      <ModalHr />\r\n      <ModalFooter>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {userRate}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont\r\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n          onMouseEnter={() => setActiveSelect(true)}\r\n          onMouseLeave={() => setActiveSelect(false)}\r\n        >\r\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\r\n            <Text>Claim & Withdraw</Text>\r\n          </Button>\r\n        </DetailsCont>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake, { useExit } from 'hooks/useUnstake'\r\nimport { Farm } from 'state/types'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Loading from 'components/Loading'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady?: boolean\r\n  userRate?:string,\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  addTokenUrl,\r\n  farm,\r\n  userDataReady\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string, contract?: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      addTokenUrl={addTokenUrl}\r\n      farm={farm}\r\n      handleUnstake={handleUnstake}\r\n      maxStake={stakedBalance}\r\n    />\r\n  )\r\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\r\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedBalance}\r\n      earnings={earnings}\r\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    let buttonTxt = 'Deposit'\r\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\r\n      buttonTxt = 'Withdraw'\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\r\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        fullWidth\r\n      >\r\n        {userDataReady?\r\n          buttonTxt\r\n          : <Loading /> }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = (\r\n  {\r\n    userDataReady,\r\n    farm,\r\n    account,\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n  }) => {\r\n  const { t } = useTranslation()\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n\r\n  const renderDepositButton = () => {\r\n    return (\r\n      <StakeAction\r\n        userDataReady={userDataReady}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        addTokenUrl={addTokenUrl}\r\n        farm={farm}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useClaim } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\r\nimport useToast from '../../../../../hooks/useToast'\r\n\r\n\r\ninterface HarvestActionProps {\r\n  pid: number\r\n  stakingContract?: string,\r\n  tokenRewardSymbol?: string,\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\r\n  {\r\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady,\r\n  }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useClaim(stakingContract)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          {tokenRewardSymbol}\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\r\n          )}\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Claimed')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml='4px'\r\n        >\r\n          {t('Claim')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes, ThemeContext } from 'styled-components'\r\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { getFarmV2Apr } from 'utils/apr'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  max-width: 450px;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  // padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.card};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\r\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.quoteToken.symbol\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n\r\n  const stakingAddress = getAddress(farm.stakingAddresses);\r\n\r\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const theme = useContext(ThemeContext)\r\n\r\n  // const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\r\n  // const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\r\n  // const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.lpAddresses[56])\r\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\r\n  // const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        farmSymbol={farm.lpSymbol}\r\n        tokenSymbol={farm.token.symbol}\r\n        rewardToken={farm.quoteToken.symbol}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n        pairToken={farm.pairToken}\r\n      />\r\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )} */}\r\n\r\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\r\n        <Text>{t('Total Deposits')}</Text>\r\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\r\n      </Flex> */}\r\n      <div style={{ margin: '24px' }}>\r\n        <Flex>\r\n          <HarvestAction\r\n            stakingContract={getAddress(farm.stakingAddresses)}\r\n            tokenRewardSymbol={earnLabel}\r\n            userDataReady={userDataReady}\r\n            userData={farm.userData}\r\n            pid={farm.pid}\r\n          />\r\n        </Flex>\r\n        {/* <Flex justifyContent='space-between'>\r\n        <Text>{t('APR')}</Text>\r\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\r\n      </Flex> */}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Rate')}</Text>\r\n          <Text color=\"textSubtle\">\r\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Duration')}</Text>\r\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          userDataReady={userDataReady}\r\n          farm={farm}\r\n          account={account}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          addTokenUrl={AddTokenUrl}\r\n        />\r\n\r\n        <DetailsSection\r\n          removed={removed}\r\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\r\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\r\n          lpLabel={lpLabel}\r\n        />\r\n\r\n        {/* <Divider />\r\n       <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={farm.totalDeposits}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n      <Flex justifyContent='center'>\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\r\n      </Flex> */}\r\n      </div>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const mainTokenAddress = quoteTokenAddress;\r\n  const pairTokenAddress = tokenAddress\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  token,\r\n  pairToken,\r\n  userDataReady,\r\n  stakingAddresses,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: token.address,\r\n    pairTokenAddress: pairToken.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string, contract: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const lpStakingAddress = getAddress(stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.boxShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\r\nimport { Oval } from 'react-loading-icons'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport useMedia from 'use-media'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport usePrevious from 'utils/refHelpers'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\r\n  const { account, chainId } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('earned')\r\n  const theme = useContext(ThemeContext)\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return (\r\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\r\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\r\n          )\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        // case 'promoted':\r\n        //   return orderBy(\r\n        //     farms,\r\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\r\n        //     'desc',\r\n        //   )\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'duration':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\r\n            'desc',\r\n          )\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const handleItemClick = (index: number) => setActiveTab(index)\r\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n    // Uncomment this if !comingsoon\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                userDataReady={userDataReady}\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          {/* {farmsList(activeFarms).map((farm) => ( */}\r\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\r\n          {/* ))} */}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const renderInactiveContent = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '20px' }}>\r\n          <Text fontSize=\"24px\" bold>\r\n            {' '}\r\n            Inactive Liquidity Pools{' '}\r\n          </Text>\r\n        </div>\r\n\r\n        <FlexLayout>\r\n          {farmsList(inactiveFarms).map((farm) => (\r\n            <FarmCard\r\n              userDataReady={userDataReady}\r\n              key={farm.pid}\r\n              farm={farm}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const [ isFetchData, setFetchData] = useState<boolean | null>(true); \r\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\r\n\r\n  // const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\r\n  // const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\r\n  const lpTotalSupply = getBalanceNumber(new BigNumber(mggFarm.totalDeposits ?? 0))\r\n  const { LPPrice, rewardPrice } = useFarmPrice(\r\n    Number(lpTotalSupply),\r\n    mggFarm.token.address[56],\r\n    mggFarm.pairToken.address[56],\r\n    mggFarm.quoteToken.address[56],\r\n    mggFarm.lpAddresses[56],\r\n    isFetchData\r\n  )\r\n  const prevLPPrice = usePrevious(LPPrice);\r\n  const prevRewardPrice = usePrevious(rewardPrice);\r\n  useEffect(() => {\r\n    if ((LPPrice > 0) || (rewardPrice > 0)) {\r\n      setFetchData(false);\r\n    }   \r\n    setTimeout(() => {\r\n      setFetchData(true);\r\n      if ((LPPrice !== prevLPPrice) || (rewardPrice !== prevRewardPrice)) {\r\n        setFetchData(true);\r\n      } else {\r\n        setFetchData(false);\r\n      }\r\n    }, 60000);\r\n    if ((prevLPPrice === LPPrice) || (prevRewardPrice === rewardPrice)) {\r\n      setFetchData(false);\r\n    }\r\n    \r\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\r\n  useEffect(() => {\r\n    return setFetchData(null)\r\n  }, [])\r\n  const farmV2Apr = useMemo(\r\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)),\r\n    [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate],\r\n  )\r\n  \r\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\r\n  const totalStaked = getBalanceNumber(new BigNumber(mggFarm.totalDeposits)) > 0? `${getBalanceAmount(new BigNumber(mggFarm.totalDeposits)).toFormat(4)} ${mggFarm.lpSymbol}` : (\r\n    <Oval width=\"20px\" height=\"20px\" />\r\n  )\r\n  const tvr = useMemo(\r\n    () => getBalanceAmount(new BigNumber(mggFarm.lpTotalSupply)).times(LPPrice).toFixed(4),\r\n    [mggFarm.lpTotalSupply, LPPrice],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-around\"\r\n          flexDirection={['column', null, 'row']}\r\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n          padding=\"24px\"\r\n        >\r\n          <Flex flexDirection=\"column\" flex=\"2\">\r\n            <Flex\r\n              justifyContent=\"space-around\"\r\n              flexDirection=\"column\"\r\n              padding=\"25px 25px 25px 0px\"\r\n              mr={['8px', 0]}\r\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\r\n            >\r\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\r\n                Liquidity Staking\r\n              </Text>\r\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n                Earn MGG with your LP tokens!\r\n              </Text>\r\n            </Flex>\r\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Tokens Staked\r\n                </Text>\r\n                <Text fontSize=\"20px\">\r\n                  {' '}\r\n                  {totalStaked}\r\n                </Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Value Locked\r\n                </Text>\r\n                <Text fontSize=\"20px\">{Number(tvr) > 0 && Number(tvr) !== Infinity? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  APR\r\n                </Text>\r\n                <Text fontSize=\"20px\">{apr}</Text>\r\n              </Flex>\r\n            </InfoBox>\r\n          </Flex>\r\n          {/* <Flex style={isMobile ? {\r\n            fontSize: '150px',\r\n            margin: 'auto',\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n          } : { fontSize: '240px', marginRight: '-118px' }}>\r\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\r\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        {/* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          {/* <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  // {\r\n                  //   label: t('APR'),\r\n                  //   value: 'apr',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Multiplier'),\r\n                  //   value: 'multiplier',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Promoted'),\r\n                  //   value: 'promoted',\r\n                  // },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Duration'),\r\n                    value: 'duration',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform='uppercase'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer> */}\r\n\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}
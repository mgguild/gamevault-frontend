{"version":3,"sources":["components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","utils/getTimePeriods.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx","components/Balance.tsx","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts"],"names":["Grid","styled","div","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","color","textTransform","mb","mr","ml","symbol","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","props","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","ModalInput","max","onChange","onSelectMax","decimals","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","onClick","ViewMode","StyledCard","keyframes","MGG_active","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","getAddress","tokens","cake","address","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","height","TokenPairImage","primaryToken","secondaryToken","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","as","external","BASE_EXCHANGE_URL","ModalBody","Flex","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","sousId","userData","stakingLimit","stakingTokenContract","useRef","useERC20","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","useToast","toastSuccess","toastError","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","getBalanceNumber","BigNumber","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","fullDecimalStakeAmount","plus","balance","gte","handleConfirmClick","a","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","handleStakeInputChange","currentTarget","addLiquidityUrl","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","console","log","onReward","useSousHarvest","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","handleUnstake","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","target","isWithdrawDisabled","type","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","harvest","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","account","userDataReady","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","stakingAddess","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","usePoolPrice","stakingPrice","rewardPrice","getPoolApr","getBscScanLink","UnlockButton","getBscScanAddressUrl","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","process","onPresentApyModal","ref","Balance","isDisabled","unit","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","useWeb3React","withdrawalFee","feeAsDecimal","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","dispatch","useAppDispatch","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","src","alt","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","prefix","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","xl","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","chainId","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","accountHasVaultShares","useMemo","cakePool","map","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","current","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","mggPool","path","url","isExact","isMain","minHeight","padding","flex","borderBottom","Page","previousValue","start","end","duration","separator","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","token1Balance","token2Balance","_token1Address","_token2Address","_stakingAddress","LPPrice","setLPPrice","assetsRewardToken","assetsToken1","assetsToken2","pairLiquidity","API_DATA","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","token","wbnb","iconExtension","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","exit","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","claim","handleHarvest","soushHarvestBnb","soushHarvest","ActionContainer","ActionTitles","ActionContent","Earned"],"mappings":"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","file":"static/js/13.45f99203.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n/*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext);\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\n          <Heading color='text' size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br/>\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button} from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null);\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance);\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals) : BIG_ZERO\n  const totalAllowance = useTokenAllowance(getAddress(stakingToken.address), getAddress(pool.contractAddress))\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(stakingTokenContract, sousId, earningToken.symbol, getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals))\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [requestedApproval, stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, totalAllowance, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center'}}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {handleChangePercent(100)}}\n          onChange={e => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=''\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n\n        <div>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n          Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n        </Text>\n        </div>\n\n\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\"  marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{width: '100%'}}>\n        <Button\n          isLoading={pendingTx}\n          // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          // onClick={handleApproveClick}\n          // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n          onClick={handleApprove}\n          disabled={!stakeAmount || isApproved}\n          mt=\"24px\"\n          fullWidth\n          marginRight=\"20px\"\n        >\n         Approve\n        </Button>\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n          // disabled={!approvedTx}\n          mt=\"24px\"\n          fullWidth\n          marginLeft=\"20px\"\n        >\n          {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n          {t('Deposit')}\n        </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nimport StakeTokenModal from './Stake'\nimport { BASE_SWAP_URL } from '../../../../../config'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n                                                 isBnbPool,\n                                                 pool,\n                                                 stakingTokenBalance,\n                                                 stakingTokenPrice,\n                                                 addTokenUrl,\n                                                 isRemovingStake = false,\n                                                 onDismiss,\n                                               }) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  console.log(isAddTokenDisabled ?? false)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : 0\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(<StakeTokenModal isBnbPool={isBnbPool} pool={pool}\n                                                           stakingTokenBalance={stakingTokenBalance}\n                                                           stakingTokenPrice={stakingTokenPrice} />)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18), stakingToken.decimals)\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n\n  return (\n    <Modal\n      title=''\n      onDismiss={onDismiss}\n    >\n      <Flex flexDirection='column' style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize='20px' marginBottom='10px' marginLeft='10px'>Account Info</Text>\n        <Text fontSize='15px' marginLeft='10px'>Staking, balances & earnings</Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop='21px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Tokens</Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className='disabled'\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[56]}`, '_blank')\n              }}\n            >Add More</Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol &&\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarningTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.earningToken.symbol} Tokens</Text>\n            <Button\n              fullWidth\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[56]}`, '_blank')\n              }}>Add More</Button>\n          </Flex>\n          }\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Staked</Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>Stake Tokens</Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop='30px' marginBottom='20px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color='textSubtle' fontSize='17px'>Your Rate {pool.earningToken.symbol}/block</Text>\n          </Flex>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' fontSize='17px'>{pool.earningToken.symbol} Token Earnings</Text>\n          </Flex>\n          <Flex flexDirection='column' mb='16px' marginLeft='5px'\n                onMouseEnter={() => setActiveSelect(true)}\n                onMouseLeave={() => setActiveSelect(false)}>\n\n            {userData.stakedBalance.eq(0) ? <Button disabled fullWidth> Withdraw </Button> : <Dropdown\n              position='top'\n              target={\n                // Disable component if total staked tokens is empty\n                <Button fullWidth variant='secondary' disabled={pool.isWithdrawDisabled}>\n                  <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                </Button>\n              }\n            >\n              {/* Disable Claim & Withdraw if no staked tokens */}\n              <Button type='button' disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                Claim\n              </Button>\n              <Button type='button' disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                Claim & Withdraw\n              </Button>\n            </Dropdown>\n\n            }\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && < Text className='yellow' fontSize='15px' marginLeft='10px'>SRKb and SFUEL Withdrawals and Deposits are\n          locked for 48 hours during launchpad</Text>}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={ onPresentStake }>\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake' }\n      </Button>\n    )\n  }\n\n  return <Flex justifyContent=\"space-between\" alignItems=\"center\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\" >\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalStaked,2,5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalEarned,2,5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n          <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n             <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n             {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n          </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { ThemeContext } from 'styled-components'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport {\n  ActionContainer,\n  ActionContent,\n  ActionTitles,\n  Earned,\n} from '../../../Farms/components/FarmTable/Actions/styles'\n\ninterface StakeActionsProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  addTokenUrl?: string\n}\n\nconst ClaimAction: React.FC<StakeActionsProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const [pendingTx, setPendingTx] = useState(false)\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `Claimed!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {earningToken.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\n        </div>\n        <Button\n          disabled={userData.stakedBalance.eq(0)}\n          onClick={handleHarvestConfirm}\n          style={{ borderRadius: '3px', height: '40px' }}\n          ml=\"4px\"\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default ClaimAction","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { PoolCategory } from 'config/constants/types'\nimport { ThemeContext } from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\n\nconst PoolCard: React.FC<{ pool: Pool; account: string, userDataReady: boolean }> = ({ pool, account, userDataReady }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData, startBlock, endBlock, isComingSoon, poolCategory, stakingTokenPrice } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress);\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n    const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n        <ClaimAction\n            stakingTokenBalance={stakingTokenBalance}\n            isBnbPool={isBnbPool}\n            pool={pool}\n            stakingTokenPrice={stakingTokenPrice}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection \n            stakingAddress={getBscScanAddressUrl(stakingAddess)}\n        />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport {Box,CardBody} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showUpcomingPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} userDataReady={userDataReady} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n\n  const mggPool = openPools.filter((pool) => pool.isMain)[0]\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[chainId], mggPool.earningToken.address[chainId])\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  // const totalStaked = getBalanceAmount(new BigNumber(mggPool.totalStaked ?? 0)).toFormat(4)\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG and other tokens by staking!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked} MGG</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">- USD</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} % </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex\n            style={\n              isMobile\n                ? {\n                    fontSize: '150px',\n                    margin: 'auto',\n                    marginTop: '20px',\n                    marginBottom: '20px',\n                  }\n                : { fontSize: '240px', marginRight: '-118px' }\n            }\n          >\n            <SvgIcon\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\n              viewBox=\"0  0 384 512\"\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\n              fontSize=\"inherit\"\n            />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools  \n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try{\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\n            assets = await assets.json();\n            const lastPrice = \"last_price\"\n            \n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\n\n    return {stakingPrice, rewardPrice}\n}\n\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, stakingAddress: string, token1Balance: BigNumber, token2Balance: BigNumber) => {\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _stakingAddress\n    try{\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n        _stakingAddress = web3.utils.toChecksumAddress(stakingAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let assetsRewardToken = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_rewardTokenAddress))\n            assetsRewardToken = await assetsRewardToken.json()\n\n            let assetsToken1 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token1Address))\n            assetsToken1 = await assetsToken1.json()\n\n            let assetsToken2 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token2Address))\n            assetsToken2 = await assetsToken2.json()\n\n            console.log(_token1Address.concat(\"-\",getBalanceNumber(token1Balance, 18).toString()))\n            const pairLiquidity = ( getBalanceNumber(token1Balance, 18) * assetsToken1[API_DATA][API_LASTPRICE] ) + ( getBalanceNumber(token2Balance, 18) * assetsToken2[API_DATA][API_LASTPRICE] )\n\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\n            setRewardPrice(assetsRewardToken[API_DATA][API_LASTPRICE])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _stakingAddress, token1Balance, token2Balance])\n\n    return {LPPrice, rewardPrice}\n}\n\nexport default usePoolPrice","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n"],"sourceRoot":""}
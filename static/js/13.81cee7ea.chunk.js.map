{"version":3,"sources":["components/Tags.tsx","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","utils/getTimePeriods.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx","components/Balance.tsx","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx"],"names":["CoreTag","props","t","useTranslation","variant","outline","startIcon","width","color","mr","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","styled","div","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","href","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","ModalInput","max","onChange","onSelectMax","decimals","isBalanceZero","style","position","margin","alignItems","justifyContent","pattern","inputMode","step","min","placeholder","size","onClick","mb","ViewMode","StyledCard","keyframes","MGG_active","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","getAddress","tokens","cake","address","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","symbol","useContext","ThemeContext","flexDirection","textAlign","height","TokenPairImage","primaryToken","secondaryToken","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","bold","mt","as","external","BASE_EXCHANGE_URL","ml","ModalBody","Flex","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","sousId","userData","stakingLimit","stakingTokenContract","useRef","useERC20","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","useToast","toastSuccess","toastError","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","getBalanceNumber","BigNumber","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","fullDecimalStakeAmount","plus","balance","gte","handleConfirmClick","a","fontSize","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","handleStakeInputChange","currentTarget","addLiquidityUrl","toFixed","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","console","log","onReward","useSousHarvest","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","handleUnstake","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","target","isWithdrawDisabled","type","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","harvest","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","textTransform","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","account","userDataReady","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","stakingAddess","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","usePoolPrice","stakingPrice","rewardPrice","getPoolApr","getBscScanLink","UnlockButton","getBscScanAddressUrl","AprRow","performanceFee","apr","tooltipContent","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","process","ApyCalculatorModal","tokenPrice","linkLabel","linkHref","earningTokenSymbol","onPresentApyModal","ref","Balance","isDisabled","unit","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","useWeb3React","withdrawalFee","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","dispatch","useAppDispatch","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","src","alt","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","prefix","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","xl","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","chainId","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","maxWidth","accountHasVaultShares","useMemo","cakePool","map","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","current","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","mggPool","path","url","isExact","isMain","minHeight","padding","flex","borderBottom","Page","previousValue","start","end","duration","separator","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","token1Balance","token2Balance","_token1Address","_token2Address","_stakingAddress","LPPrice","setLPPrice","assetsRewardToken","assetsToken1","assetsToken2","pairLiquidity","API_DATA","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","token","wbnb","iconExtension","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","exit","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","claim","handleHarvest","soushHarvestBnb","soushHarvest","ActionContainer","ActionTitles","ActionContent","Earned","Grid","GridItem","GridHeaderItem","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","freq"],"mappings":"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","file":"static/js/13.81cee7ea.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n  // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  // symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  // addLiquidityUrl,\r\n  // inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-right: 0px;\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import styled, { css, keyframes } from 'styled-components'\r\nimport { Card } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst PromotedGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n  max-width: 450px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: baseline;\r\n  position: relative;\r\n  justify-content: space-around;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin: 0 12px 46px;\r\n  }\r\n`\r\n\r\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\r\n  background: ${({ theme }) => theme.card.background};\r\n\r\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\r\n`\r\n\r\nexport default StyledCard\r\n","import React from 'react'\r\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\r\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\r\n\r\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\r\n}\r\n\r\nexport default CakeVaultTokenPairImage\r\n","import React, { useContext } from 'react'\r\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n//  background: ${({ isFinished, background, theme }) =>\r\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n// border-radius: ${({ theme, isPromotedPool }) =>\r\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\r\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n  const background = 'cardHeader'\r\n\r\n/*\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n*/\r\n\r\n  const getCardTitle = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t(`Stake CAKE to Earn CAKE`)\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\r\n          <Heading color='text' size=\"lg\">\r\n            {`Stake ${stakingToken.symbol}`} <br/>\r\n            to <br />\r\n            {`Earn ${earningToken.symbol}`}\r\n          </Heading>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface NotEnoughTokensModalProps {\r\n  tokenSymbol: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('%symbol% required', { symbol: tokenSymbol })}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Text color=\"failure\" bold>\r\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\r\n      </Text>\r\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\r\n      <Text>\r\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\r\n          symbol: tokenSymbol,\r\n        })}\r\n      </Text>\r\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\r\n        {t('Buy')} {tokenSymbol}\r\n      </Button>\r\n      <StyledLink href=\"https://yieldwatch.net\" external>\r\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\r\n          {t('Locate Assets')}\r\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\r\n        </Button>\r\n      </StyledLink>\r\n      <Button variant=\"text\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotEnoughTokensModal\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { Modal, Text, Flex, Image, Button} from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useSousStake } from 'hooks/useStake'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\r\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onSelectMax?: () => void\r\n  onDismiss?: () => void\r\n  isApprove?: boolean\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst ModalBody = styled(Flex)`\r\n  width: 450px;\r\n  margin-top: -20px;\r\n  padding: 20px;\r\n`\r\nconst StakeActionModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n  isApprove = false,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const approveBtn = useRef(null);\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useSousStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  // const [approvedTx, setApprovedTx] = useState(false)\r\n  const [isApproved, setIsApproved] = useState(isApprove)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const userLimit = stakingLimit.minus(userData.stakedBalance);\r\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : BIG_ZERO\r\n  const numTotalStaked = totalStakedTokens\r\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : BIG_ZERO\r\n  const remainingStakeTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals) : BIG_ZERO\r\n  const totalAllowance = useTokenAllowance(getAddress(stakingToken.address), getAddress(pool.contractAddress))\r\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(stakingTokenContract, sousId, earningToken.symbol, getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals))\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\r\n  }\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\r\n  }, [requestedApproval, stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, totalAllowance, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // const handleApproveClick = async () => {\r\n  //   setApprovedTx(true)\r\n  // }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        setIsApproved(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      <ModalBody flexDirection=\"column\">\r\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\r\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n            {t('Max stake for this pool: %amount% %token%', {\r\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n\r\n        <Flex justifyContent=\"center\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center'}}>\r\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\r\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\r\n              tokensymbol: pool.stakingToken.symbol\r\n            })}\r\n          </Text>\r\n        </Flex>\r\n\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text bold>Stake amount</Text>\r\n          {/* <Flex alignItems=\"center\">\r\n            <Image\r\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n              width={24}\r\n              height={24}\r\n              alt={stakingToken.symbol}\r\n            />\r\n            <Text ml=\"4px\" bold>\r\n              {stakingToken.symbol}\r\n            </Text>\r\n          </Flex> */}\r\n        </Flex>\r\n        <ModalInput\r\n          value={stakeAmount}\r\n          onSelectMax={() => {handleChangePercent(100)}}\r\n          onChange={e => handleStakeInputChange(e.currentTarget.value)}\r\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\r\n          symbol={stakingToken.symbol}\r\n          addLiquidityUrl=''\r\n        />\r\n\r\n        {/* Fetch and display actual balance */}\r\n\r\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\r\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\r\n        </Text>\r\n\r\n\r\n        <div>\r\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\r\n          {/* {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })} */}\r\n          Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\r\n        </Text>\r\n        </div>\r\n\r\n\r\n\r\n        {/* {hasReachedStakeLimit && (\r\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n            {t('Maximum total stake: %amount% %token%', {\r\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n        {/* <Flex>\r\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\r\n          {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })}\r\n        </Text>\r\n        </Flex> */}\r\n        {/* <Slider\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handleChangePercent}\r\n          name=\"stake\"\r\n          valueLabel={`${percent}%`}\r\n          step={1}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n        </Flex> */}\r\n\r\n        <Flex justifyContent=\"space-between\"  marginTop=\"17px\" marginBottom=\"17px\">\r\n          <Text bold>Approved Tokens</Text>\r\n          <Text>\r\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Flex style={{width: '100%'}}>\r\n        <Button\r\n          isLoading={pendingTx}\r\n          // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          // onClick={handleApproveClick}\r\n          // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\r\n          onClick={handleApprove}\r\n          disabled={!stakeAmount || isApproved}\r\n          mt=\"24px\"\r\n          fullWidth\r\n          marginRight=\"20px\"\r\n        >\r\n         Approve\r\n        </Button>\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\r\n          // disabled={!approvedTx}\r\n          mt=\"24px\"\r\n          fullWidth\r\n          marginLeft=\"20px\"\r\n        >\r\n          {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\r\n          {t('Deposit')}\r\n        </Button>\r\n        </Flex>\r\n        {/* {!isRemovingStake && (\r\n          <StyledLink external href={BASE_EXCHANGE_URL}>\r\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\r\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n            </Button>\r\n          </StyledLink>\r\n        )} */}\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeActionModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport BigNumber from 'bignumber.js'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nimport StakeTokenModal from './Stake'\r\nimport { BASE_SWAP_URL } from '../../../../../config'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n  justify-content: center;\r\n\r\n  & > * {\r\n    flex: 1;\r\n    margin: 0px 10px;\r\n  }\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n                                                 isBnbPool,\r\n                                                 pool,\r\n                                                 stakingTokenBalance,\r\n                                                 stakingTokenPrice,\r\n                                                 addTokenUrl,\r\n                                                 isRemovingStake = false,\r\n                                                 onDismiss,\r\n                                               }) => {\r\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\r\n  console.log(isAddTokenDisabled ?? false)\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\r\n  const { toastSuccess, toastError } = useToast()\r\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : 0\r\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\r\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\r\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n  const [onPresentStakeAction] = useModal(<StakeTokenModal isBnbPool={isBnbPool} pool={pool}\r\n                                                           stakingTokenBalance={stakingTokenBalance}\r\n                                                           stakingTokenPrice={stakingTokenPrice} />)\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // harvesting\r\n    try {\r\n      await onReward()\r\n      toastSuccess(\r\n        `${t('Claimed')}!`,\r\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleUnstake = async () => {\r\n    setPendingTx(true)\r\n    // unstaking\r\n    try {\r\n      await onUnstake(getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18), stakingToken.decimals)\r\n      toastSuccess(\r\n        `${t('Unstaked')}!`,\r\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\r\n          symbol: earningToken.symbol,\r\n        }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Modal\r\n      title=''\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Flex flexDirection='column' style={{ marginTop: '-50px', width: '550px' }}>\r\n        <Text fontSize='20px' marginBottom='10px' marginLeft='10px'>Account Info</Text>\r\n        <Text fontSize='15px' marginLeft='10px'>Staking, balances & earnings</Text>\r\n\r\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\r\n        <StyledFlex marginTop='21px'>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalStakingTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Tokens</Text>\r\n            <Button\r\n              disabled={isAddTokenDisabled}\r\n              fullWidth\r\n              className='disabled'\r\n              onClick={() => {\r\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[56]}`, '_blank')\r\n              }}\r\n            >Add More</Button>\r\n          </Flex>\r\n          {pool.stakingToken.symbol !== pool.earningToken.symbol &&\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalEarningTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.earningToken.symbol} Tokens</Text>\r\n            <Button\r\n              fullWidth\r\n              onClick={() => {\r\n                window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[56]}`, '_blank')\r\n              }}>Add More</Button>\r\n          </Flex>\r\n          }\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalStakedTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Staked</Text>\r\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>Stake Tokens</Button>\r\n          </Flex>\r\n        </StyledFlex>\r\n\r\n        <StyledFlex>\r\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\r\n        </StyledFlex>\r\n        <StyledFlex marginTop='30px' marginBottom='20px'>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(rewardRate, 2, 10)}</Text>\r\n            <Text color='textSubtle' fontSize='17px'>Your Rate {pool.earningToken.symbol}/block</Text>\r\n          </Flex>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalEarnedTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' fontSize='17px'>{pool.earningToken.symbol} Token Earnings</Text>\r\n          </Flex>\r\n          <Flex flexDirection='column' mb='16px' marginLeft='5px'\r\n                onMouseEnter={() => setActiveSelect(true)}\r\n                onMouseLeave={() => setActiveSelect(false)}>\r\n\r\n            {userData.stakedBalance.eq(0) ? <Button disabled fullWidth> Withdraw </Button> : <Dropdown\r\n              position='top'\r\n              target={\r\n                // Disable component if total staked tokens is empty\r\n                <Button fullWidth variant='secondary' disabled={pool.isWithdrawDisabled}>\r\n                  <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\r\n                </Button>\r\n              }\r\n            >\r\n              {/* Disable Claim & Withdraw if no staked tokens */}\r\n              <Button type='button' disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\r\n                Claim\r\n              </Button>\r\n              <Button type='button' disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\r\n                Claim & Withdraw\r\n              </Button>\r\n            </Dropdown>\r\n\r\n            }\r\n          </Flex>\r\n        </StyledFlex>\r\n        {!!pool.isWithdrawDisabled && < Text className='yellow' fontSize='15px' marginLeft='10px'>SRKb and SFUEL Withdrawals and Deposits are\r\n          locked for 48 hours during launchpad</Text>}\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n","import React from 'react'\r\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    // isStaked ? (\r\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n    //     <Flex flexDirection=\"column\">\r\n    //       <>\r\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n    //         {stakingTokenPrice !== 0 && (\r\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\r\n    //             <Balance\r\n    //               fontSize=\"12px\"\r\n    //               color=\"textSubtle\"\r\n    //               decimals={2}\r\n    //               value={stakedTokenDollarBalance}\r\n    //               prefix=\"~\"\r\n    //               unit=\" USD\"\r\n    //             />\r\n    //           </Text>\r\n    //         )}\r\n    //       </>\r\n    //     </Flex>\r\n    //     <Flex>\r\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\r\n    //       </IconButton>\r\n    //       {reachStakingLimit ? (\r\n    //         <span ref={targetRef}>\r\n    //           <IconButton variant=\"secondary\" disabled>\r\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n    //           </IconButton>\r\n    //         </span>\r\n    //       ) : (\r\n    //         <IconButton\r\n    //           variant=\"secondary\"\r\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n    //           disabled={isFinished}\r\n    //         >\r\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n    //         </IconButton>\r\n    //       )}\r\n    //     </Flex>\r\n    //     {tooltipVisible && tooltip}\r\n    //   </Flex>\r\n    // ) :\r\n\r\n    // Reserve function for future use\r\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\r\n    return (\r\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={ onPresentStake }>\r\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake' }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return <Flex justifyContent=\"space-between\" alignItems=\"center\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default StakeAction\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport ApprovalAction from './ApprovalAction'\r\nimport StakeActions from './StakeActions'\r\nimport HarvestActions from './HarvestActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  & > * {\r\n    flex: 1;\r\n    height: 60px;\r\n  }\r\n`\r\n\r\ninterface CardActionsProps {\r\n  pool: Pool\r\n  stakedBalance: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\r\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\r\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const { t } = useTranslation()\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  const needsApproval = !allowance.gt(0) && !isBnbPool\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isLoading = !userData\r\n\r\n  const totalStaked = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\r\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\" >\r\n        {harvest && (\r\n          <>\r\n            {/* <Flex justifyContent=\"space-between\">\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${stakingToken.symbol} Staked`}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${earningToken.symbol} Earned`}\r\n                </Text>\r\n              </Box>\r\n            </Flex> */}\r\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                   {!isComingSoon && formatNumber(totalStaked,2,5)} {isComingSoon && '-'} {stakingToken.symbol}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                   {!isComingSoon && formatNumber(totalEarned,2,5)} {isComingSoon && '-'} {earningToken.symbol}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {/* <Box display=\"inline\">\r\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box> */}\r\n          <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\r\n             <StakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            stakedBalance={stakedBalance}\r\n            isBnbPool={isBnbPool}\r\n            isStaked={isStaked}\r\n          />\r\n             {/* <HarvestActions\r\n              earnings={earnings}\r\n              earningToken={earningToken}\r\n              sousId={sousId}\r\n              earningTokenPrice={earningTokenPrice}\r\n              isBnbPool={isBnbPool}\r\n              isLoading={isLoading}\r\n            /> */}\r\n          </StyledFlex>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport {\r\n  ActionContainer,\r\n  ActionContent,\r\n  ActionTitles,\r\n  Earned,\r\n} from '../../../Farms/components/FarmTable/Actions/styles'\r\n\r\ninterface StakeActionsProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst ClaimAction: React.FC<StakeActionsProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  addTokenUrl,\r\n}) => {\r\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const theme = useContext(ThemeContext)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // harvesting\r\n    try {\r\n      await onReward()\r\n      toastSuccess(\r\n        `Claimed!`,\r\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n      )\r\n      setPendingTx(false)\r\n    } catch (e) {\r\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n      console.error(e)\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\r\n          {earningToken.symbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          Earned\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\r\n        </div>\r\n        <Button\r\n          disabled={userData.stakedBalance.eq(0)}\r\n          onClick={handleHarvestConfirm}\r\n          style={{ borderRadius: '3px', height: '40px' }}\r\n          ml=\"4px\"\r\n        >\r\n          Claim\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default ClaimAction","import BigNumber from 'bignumber.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { ThemeContext } from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { getBscScanLink } from 'utils'\r\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\r\nimport { StyledCard, StyledCardInner } from './StyledCard'\r\nimport CardFooter from './CardFooter'\r\nimport StyledCardHeader from './StyledCardHeader'\r\nimport CardActions from './CardActions'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport ClaimAction from '../ClaimAction'\r\n\r\n\r\nconst PoolCard: React.FC<{ pool: Pool; account: string, userDataReady: boolean }> = ({ pool, account, userDataReady }) => {\r\n  const { sousId, stakingToken, earningToken, isFinished, userData, startBlock, endBlock, isComingSoon, poolCategory, stakingTokenPrice } = pool\r\n  const { t } = useTranslation()\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const accountHasStakedBalance = stakedBalance.gt(0)\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const totalStaked = pool.totalStaked\r\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\r\n    : 0\r\n\r\n  const rewardPerBlock = pool?.tokenPerBlock\r\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\r\n    : 0\r\n\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n\r\n  const { currentBlock } = useBlock()\r\n  const stakingAddess = getAddress(pool.contractAddress);\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n    const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\r\n  return (\r\n    <StyledCard isFinished={isFinished && sousId !== 0}>\r\n      <StyledCardHeader\r\n        isStaking={accountHasStakedBalance}\r\n        earningToken={earningToken}\r\n        stakingToken={stakingToken}\r\n        isFinished={isFinished && sousId !== 0}\r\n      />\r\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n        <Flex>\r\n        <ClaimAction\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            isBnbPool={isBnbPool}\r\n            pool={pool}\r\n            stakingTokenPrice={stakingTokenPrice}\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>Duration</Text>\r\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\r\n            <Text color=\"textSubtle\">\r\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\r\n            </Text>\r\n          </Link>\r\n        </Flex>\r\n\r\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n            <Text>Total Deposit</Text>\r\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\r\n          </Flex> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n              <Text>Reward per block</Text>\r\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\r\n          </Flex> */}\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>{t('Rate')}</Text>\r\n          <Text>\r\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\r\n          </Text>\r\n        </Flex>\r\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\r\n          {account ? (\r\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\r\n          ) : (\r\n            <>\r\n              <UnlockButton />\r\n            </>\r\n          )}\r\n        </Flex>\r\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\r\n        {/* <CardFooter pool={pool} account={account} /> */}\r\n        <DetailsSection \r\n            stakingAddress={getBscScanAddressUrl(stakingAddess)}\r\n        />\r\n      </Flex>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","import { useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { setBlock } from '.'\r\nimport { State } from '../types'\r\n\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n","import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { getAprData } from 'views/Pools/helpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink =\r\n    stakingToken.address &&\r\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport {\r\n  Flex,\r\n  MetamaskIcon,\r\n  Text,\r\n  TooltipText,\r\n  LinkExternal,\r\n  TimerIcon,\r\n  Skeleton,\r\n  useTooltip,\r\n  Button,\r\n  Link,\r\n  HelpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport Balance from 'components/Balance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\n\r\ninterface ExpandedFooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandedWrapper = styled(Flex)`\r\n  svg {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n`\r\n\r\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\r\n  const { t } = useTranslation()\r\n  const { currentBlock } = useBlock()\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const {\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    sousId,\r\n    isAutoVault,\r\n  } = pool\r\n\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <ExpandedWrapper flexDirection=\"column\">\r\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text small>{t('Total staked')}:</Text>\r\n        <Flex alignItems=\"flex-start\">\r\n          {totalStaked && totalStaked.gte(0) ? (\r\n            <>\r\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n              <span ref={totalStakedTargetRef}>\r\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <Skeleton width=\"90px\" height=\"21px\" />\r\n          )}\r\n          {totalStakedTooltipVisible && totalStakedTooltip}\r\n        </Flex>\r\n      </Flex>\r\n      {stakingLimit && stakingLimit.gt(0) && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\r\n          <Text small>{t('Max. stake per user')}:</Text>\r\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n        </Flex>\r\n      )}\r\n      {shouldShowBlockCountdown && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n          {blocksRemaining || blocksUntilStart ? (\r\n            <Flex alignItems=\"center\">\r\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n                  {t('Blocks')}\r\n                </Text>\r\n                <TimerIcon ml=\"4px\" color=\"primary\" />\r\n              </Link>\r\n            </Flex>\r\n          ) : (\r\n            <Skeleton width=\"54px\" height=\"21px\" />\r\n          )}\r\n        </Flex>\r\n      )}\r\n      {isAutoVault && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          {tooltipVisible && tooltip}\r\n          <TooltipText ref={targetRef} small>\r\n            {t('Performance Fee')}\r\n          </TooltipText>\r\n          <Flex alignItems=\"center\">\r\n            <Text ml=\"4px\" small>\r\n              {performanceFee / 100}%\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\r\n          {t('Info site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\r\n          {t('View Project Site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      {poolContractAddress && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <LinkExternal\r\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n            bold={false}\r\n            small\r\n          >\r\n            {t('View Contract')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      )}\r\n      {account && isMetaMaskInScope && tokenAddress && (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n          >\r\n            <Text color=\"primary\" fontSize=\"14px\">\r\n              {t('Add to Metamask')}\r\n            </Text>\r\n            <MetamaskIcon ml=\"4px\" />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </ExpandedWrapper>\r\n  )\r\n}\r\n\r\nexport default React.memo(ExpandedFooter)\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport ExpandedFooter from './ExpandedFooter'\r\n\r\ninterface FooterProps {\r\n  pool: Pool\r\n  account: string\r\n  totalCakeInVault?: BigNumber\r\n}\r\n\r\nconst ExpandableButtonWrapper = styled(Flex)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  button {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\r\n  const { isAutoVault } = pool\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <CardFooter>\r\n      <ExpandableButtonWrapper>\r\n        <Flex alignItems=\"center\">\r\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n          {tooltipVisible && tooltip}\r\n          <Flex ref={targetRef}>\r\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n          </Flex>\r\n        </Flex>\r\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </ExpandableButtonWrapper>\r\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultApprove } from 'hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  setLastUpdated: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VaultApprovalAction\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\r\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\r\n\r\n  useEffect(() => {\r\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\r\n    const secondsRemainingCalc = feeEndTime - currentSeconds\r\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\r\n\r\n    const tick = () => {\r\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\r\n    }\r\n    const timerInterval = setInterval(() => tick(), 1000)\r\n    if (doesUnstakingFeeApply) {\r\n      setSecondsRemaining(secondsRemainingCalc)\r\n      setHasUnstakingFee(true)\r\n    } else {\r\n      setHasUnstakingFee(false)\r\n      clearInterval(timerInterval)\r\n    }\r\n\r\n    return () => clearInterval(timerInterval)\r\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\r\n\r\n  return { hasUnstakingFee, secondsRemaining }\r\n}\r\n\r\nexport default useWithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\r\n  const { t } = useTranslation()\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\r\n}\r\n\r\nexport default WithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","import React from 'react'\r\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\ninterface FeeSummaryProps {\r\n  stakingTokenSymbol: string\r\n  stakeAmount: string\r\n}\r\n\r\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    fees: { withdrawalFee },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100\r\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'top-start' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} small>\r\n          {t('Unstaking Fee')}\r\n        </TooltipText>\r\n        <Text fontSize=\"14px\">\r\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\r\n        </Text>\r\n      </Flex>\r\n      <UnstakingFeeCountdownRow />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FeeSummary\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      cakeVaultContract.methods\r\n        .withdrawAll()\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    } else {\r\n      cakeVaultContract.methods\r\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\r\n        // .toString() being called to fix a BigNumber error in prod\r\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    cakeVaultContract.methods\r\n      .deposit(convertedStakeAmount.toString())\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setPendingTx(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        // Remove message from toast before prod\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        setPendingTx(false)\r\n      })\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    setPendingTx(true)\r\n    // unstaking\r\n    if (isRemovingStake) {\r\n      handleWithdrawal(convertedStakeAmount)\r\n      // staking\r\n    } else {\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport { convertSharesToCake } from '../../../helpers'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\n\r\ninterface HasStakeActionProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n}\r\n\r\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { stakingToken } = pool\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\r\n    : 0\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\">\r\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {cakePriceBusd.gt(0) ? (\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          ) : (\r\n            <Skeleton mt=\"1px\" height={16} width={64} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HasSharesActions\r\n","import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport VaultApprovalAction from './VaultApprovalAction'\r\nimport VaultStakeActions from './VaultStakeActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst CakeVaultCardActions: React.FC<{\r\n  pool: Pool\r\n  accountHasSharesStaked: boolean\r\n  isLoading: boolean\r\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\r\n  const { stakingToken, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        <Box display=\"inline\">\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {isVaultApproved ? (\r\n          <VaultStakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            accountHasSharesStaked={accountHasSharesStaked}\r\n          />\r\n        ) : (\r\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCardActions\r\n","import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\r\nimport {Box,CardBody} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasSharesStaked}\r\n          isAutoVault\r\n          earningToken={tokens.cake}\r\n          stakingToken={tokens.cake}\r\n        />\r\n        <StyledCardBody isLoading={isLoading}>\r\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n          <Box mt=\"24px\">\r\n            <RecentCakeProfitRow />\r\n          </Box>\r\n          <Box mt=\"8px\">\r\n            <UnstakingFeeCountdownRow />\r\n          </Box>\r\n          <Flex mt=\"32px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <UnlockButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </StyledCardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n","import { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseCell = styled.div`\r\n  color: black;\r\n\r\n  padding: 24px 8px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\n\r\nexport const CellContent = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-height: 40px;\r\n  ${Text} {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\nexport default BaseCell\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HelpIcon,\r\n  Link,\r\n  LinkExternal,\r\n  MetamaskIcon,\r\n  Skeleton,\r\n  Text,\r\n  TimerIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport Harvest from './Harvest'\r\nimport Stake from './Stake'\r\nimport Apr from '../Apr'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 700px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 700px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  justify-content: center;\r\n  padding: 12px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\ntype MediaBreakpoints = {\r\n  isXs: boolean\r\n  isSm: boolean\r\n  isMd: boolean\r\n  isLg: boolean\r\n  isXl: boolean\r\n}\r\n\r\ninterface ActionPanelProps {\r\n  account: string\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n  expanded: boolean\r\n  breakpoints: MediaBreakpoints\r\n}\r\n\r\nconst InfoSection = styled(Box)`\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  flex-basis: auto;\r\n  padding: 8px 8px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding: 0;\r\n    flex-basis: 230px;\r\n  }\r\n`\r\n\r\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const { currentBlock } = useBlock()\r\n  const { isXs, isSm, isMd } = breakpoints\r\n  const showSubtitle = (isXs || isSm) && sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const {\r\n    targetRef: tagTargetRef,\r\n    tooltip: tagTooltip,\r\n    tooltipVisible: tagTooltipVisible,\r\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom-start',\r\n  })\r\n\r\n  const maxStakeRow = stakingLimit.gt(0) ? (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n      <Text>{t('Max. stake per user')}:</Text>\r\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n    </Flex>\r\n  ) : null\r\n\r\n  const blocksRow =\r\n    blocksRemaining || blocksUntilStart ? (\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n        <Flex>\r\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n              {t('Blocks')}\r\n            </Text>\r\n            <TimerIcon ml=\"4px\" color=\"primary\" />\r\n          </Link>\r\n        </Flex>\r\n      </Flex>\r\n    ) : (\r\n      <Skeleton width=\"56px\" height=\"16px\" />\r\n    )\r\n\r\n  const aprRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\r\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\r\n    </Flex>\r\n  )\r\n\r\n  const totalStakedRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\r\n      <Flex alignItems=\"center\">\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <>\r\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n            <span ref={totalStakedTargetRef}>\r\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Skeleton width=\"56px\" height=\"16px\" />\r\n        )}\r\n        {totalStakedTooltipVisible && totalStakedTooltip}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <StyledActionPanel expanded={expanded}>\r\n      <InfoSection>\r\n        {maxStakeRow}\r\n        {(isXs || isSm) && aprRow}\r\n        {(isXs || isSm || isMd) && totalStakedRow}\r\n        {shouldShowBlockCountdown && blocksRow}\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\r\n            {t('Info site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={earningToken.projectLink} bold={false}>\r\n            {t('View Project Site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        {poolContractAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <LinkExternal\r\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n              bold={false}\r\n            >\r\n              {t('View Contract')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {account && isMetaMaskInScope && tokenAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <Button\r\n              variant=\"text\"\r\n              p=\"0\"\r\n              height=\"auto\"\r\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n            >\r\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\r\n              <MetamaskIcon ml=\"4px\" />\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n        {tagTooltipVisible && tagTooltip}\r\n        <span ref={tagTargetRef}>\r\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n        </span>\r\n      </InfoSection>\r\n      <ActionContainer>\r\n        {showSubtitle && (\r\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\r\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\r\n          </Text>\r\n        )}\r\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\r\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\r\n      </ActionContainer>\r\n    </StyledActionPanel>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto CAKE')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual CAKE')\r\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) : (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )}\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto CAKE vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto CAKE vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningsDollarValue}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\r\n                    decimals={2}\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                    prefix=\"~\"\r\n                  />\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport Apr from '../Apr'\r\n\r\ninterface AprCellProps {\r\n  pool: Pool\r\n  performanceFee: number\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 1 0 50px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n  }\r\n`\r\n\r\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { isAutoVault } = pool\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {isAutoVault ? t('APY') : t('APR')}\r\n        </Text>\r\n        <Apr\r\n          pool={pool}\r\n          performanceFee={isAutoVault ? performanceFee : 0}\r\n          showIcon={!isXs && !isSm}\r\n          alignItems=\"flex-start\"\r\n        />\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default AprCell\r\n","import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex height=\"100%\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell from './BaseCell'\r\n\r\ninterface ExpandActionCellProps {\r\n  expanded: boolean\r\n  isFullLayout: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  padding-right: 12px;\r\n  padding-left: 0px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n    padding-right: 32px;\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 24px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isFullLayout && (\r\n        <Text color=\"primary\" bold>\r\n          {expanded ? t('Hide') : t('Details')}\r\n        </Text>\r\n      )}\r\n      <ArrowIcon color=\"primary\" toggled={expanded} />\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 32px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\r\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps {\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    stakingLimit,\r\n    isFinished,\r\n    poolCategory,\r\n    userData,\r\n    stakingTokenPrice,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n  )\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\r\n    useVaultApprove(setLastUpdated)\r\n\r\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\r\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\r\n\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\r\n\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const hasSharesStaked = userShares && userShares.gt(0)\r\n  const isVaultWithShares = isAutoVault && hasSharesStaked\r\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\r\n\r\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  const onStake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultStake()\r\n    } else {\r\n      onPresentStake()\r\n    }\r\n  }\r\n\r\n  const onUnstake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultUnstake()\r\n    } else {\r\n      onPresentUnstake()\r\n    }\r\n  }\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (needsApproval) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Enable pool')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n            {t('Enable')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  // Wallet connected, user data loaded and approved\r\n  if (isNotVaultAndHasStake || isVaultWithShares) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n            {stakingToken.symbol}{' '}\r\n          </Text>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n            <Balance\r\n              lineHeight=\"1\"\r\n              bold\r\n              fontSize=\"20px\"\r\n              decimals={5}\r\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\r\n            />\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Flex>\r\n          <IconButtonWrapper>\r\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\r\n              <MinusIcon color=\"primary\" width=\"14px\" />\r\n            </IconButton>\r\n            {reachStakingLimit ? (\r\n              <span ref={targetRef}>\r\n                <IconButton variant=\"secondary\" disabled>\r\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n                </IconButton>\r\n              </span>\r\n            ) : (\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n                disabled={isFinished}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            )}\r\n          </IconButtonWrapper>\r\n          {tooltipVisible && tooltip}\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n          {t('Stake')}{' '}\r\n        </Text>\r\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n          {stakingToken.symbol}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n          variant=\"secondary\"\r\n          disabled={isFinished}\r\n        >\r\n          {t('Stake')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport PoolRow from './PoolRow'\r\n\r\ninterface PoolsTableProps {\r\n  pools: Pool[]\r\n  userDataLoaded: boolean\r\n  account: string\r\n}\r\n\r\nconst StyledTable = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  > div:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledTableBorder = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  padding: 1px 1px 3px 1px;\r\n  background-size: 400% 400%;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\r\n  const { t } = useTranslation()\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  return (\r\n    <StyledTableBorder>\r\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\r\n        {pools.map((pool) => (\r\n          <PoolRow\r\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\r\n            pool={pool}\r\n            account={account}\r\n            userDataLoaded={userDataLoaded}\r\n          />\r\n        ))}\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </StyledTable>\r\n    </StyledTableBorder>\r\n  )\r\n}\r\n\r\nexport default PoolsTable\r\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\r\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { StyledHr } from 'views/Farms/components/Divider'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport useMedia from 'use-media'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n  margin: 25px 0px;\r\n`\r\n\r\nconst PoolControls = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 24px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst SearchSortContainer = styled(Flex)`\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n\r\n  const theme = useContext(ThemeContext)\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account, chainId } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n\r\n    return [...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n  const showUpcomingPools = location.pathname.includes('upcoming')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  const poolsToShow = () => {\r\n    let chosenPools = []\r\n    if (showUpcomingPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else if (showFinishedPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else {\r\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n    }\r\n\r\n    if (searchQuery) {\r\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n      chosenPools = chosenPools.filter((pool) =>\r\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n      )\r\n    }\r\n\r\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  }\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {poolsToShow().map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} userDataReady={userDataReady} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\r\n  const { path, url, isExact } = useRouteMatch()\r\n\r\n  const mggPool = openPools.filter((pool) => pool.isMain)[0]\r\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\r\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\r\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[chainId], mggPool.earningToken.address[chainId])\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\r\n  // const totalStaked = getBalanceAmount(new BigNumber(mggPool.totalStaked ?? 0)).toFormat(4)\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-around\"\r\n          flexDirection={['column', null, 'row']}\r\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n          padding=\"24px\"\r\n        >\r\n          <Flex flexDirection=\"column\" flex=\"2\">\r\n            <Flex\r\n              justifyContent=\"space-around\"\r\n              flexDirection=\"column\"\r\n              padding=\"25px 25px 25px 0px\"\r\n              mr={['8px', 0]}\r\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\r\n            >\r\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\r\n                Pool Staking\r\n              </Text>\r\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n                Earn MGG and other tokens by staking!\r\n              </Text>\r\n            </Flex>\r\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total MGG Staked\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {totalStaked} MGG</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total Value Locked\r\n                </Text>\r\n                <Text fontSize=\"20px\">- USD</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  APR\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {apr} % </Text>\r\n              </Flex>\r\n            </InfoBox>\r\n          </Flex>\r\n          {/* <Flex\r\n            style={\r\n              isMobile\r\n                ? {\r\n                    fontSize: '150px',\r\n                    margin: 'auto',\r\n                    marginTop: '20px',\r\n                    marginBottom: '20px',\r\n                  }\r\n                : { fontSize: '240px', marginRight: '-118px' }\r\n            }\r\n          >\r\n            <SvgIcon\r\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\r\n              viewBox=\"0  0 384 512\"\r\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\r\n              fontSize=\"inherit\"\r\n            />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        {/* {!showFinishedPools && !showUpcomingPools && (\r\n          <div>\r\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\r\n            {' '}\r\n            Stake tokens to earn{' '}\r\n          </Text>\r\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\r\n\r\n           // Header title for Active Pools  \r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('Stake tokens to earn')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </div>\r\n        )} */}\r\n\r\n        {/* UPCOMING  */}\r\n        {showUpcomingPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are coming in the near future. Stay tuned.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* ENDED  */}\r\n        {showFinishedPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\r\n\r\n        {cardLayout}\r\n\r\n        <div ref={loadMoreRef} />\r\n        {/* <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={192}\r\n          height={184.5}\r\n        /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json();\r\n            const lastPrice = \"last_price\"\r\n            \r\n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\r\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, stakingAddress: string, token1Balance: BigNumber, token2Balance: BigNumber) => {\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    let _stakingAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n        _stakingAddress = web3.utils.toChecksumAddress(stakingAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assetsRewardToken = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_rewardTokenAddress))\r\n            assetsRewardToken = await assetsRewardToken.json()\r\n\r\n            let assetsToken1 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token1Address))\r\n            assetsToken1 = await assetsToken1.json()\r\n\r\n            let assetsToken2 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token2Address))\r\n            assetsToken2 = await assetsToken2.json()\r\n\r\n            console.log(_token1Address.concat(\"-\",getBalanceNumber(token1Balance, 18).toString()))\r\n            const pairLiquidity = ( getBalanceNumber(token1Balance, 18) * assetsToken1[API_DATA][API_LASTPRICE] ) + ( getBalanceNumber(token2Balance, 18) * assetsToken2[API_DATA][API_LASTPRICE] )\r\n\r\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\r\n            setRewardPrice(assetsRewardToken[API_DATA][API_LASTPRICE])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _stakingAddress, token1Balance, token2Balance])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n"],"sourceRoot":""}
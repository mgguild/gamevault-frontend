{"version":3,"sources":["components/Tags.tsx","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx","components/Balance.tsx","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx"],"names":["CoreTag","props","t","useTranslation","variant","outline","startIcon","width","color","mr","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","styled","div","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","href","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","ModalInput","max","onChange","onSelectMax","decimals","isBalanceZero","style","position","margin","alignItems","justifyContent","pattern","inputMode","step","min","placeholder","size","onClick","mb","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","Flex","MGG_active","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","token","pairToken","flexDirection","textAlign","split","TokenPairImage","primaryToken","secondaryToken","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","BigNumber","useToast","toastError","toastSuccess","useCallback","e","currentTarget","validity","valid","title","marginTop","fontSize","bold","quoteToken","symbol","lpSymbol","padding","disabled","fullWidth","a","console","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","pid","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","dispatch","useAppDispatch","account","useWeb3React","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","gt","ClaimModal","DepositModal","addTokenUrl","handleUnstake","maxStake","requestedApproval","setRequestedApproval","setActiveSelect","userData","allowance","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","lpAddress","getAddress","lpContract","useERC20","RewardTokenBalance","useTokenBalance","address","formatTokenBalance","getBalanceAmount","balance","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useLPStakingContract","onApprove","useApprove","handleApprove","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","onStake","useStake","onUnstake","useExit","location","useLocation","handleStake","useLpTokenPrice","amount","contract","stakedBalanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","UnlockButton","mt","HarvestAction","stakingContract","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","BIG_ZERO","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","onReward","useClaim","textTransform","MGG_accent2","pr","Balance","unit","prefix","borderRadius","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","apr","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","token1Balance","useFarmPrice","Number","lpTotalSupply","LPPrice","rewardPrice","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","getBscScanAddressUrl","infoURL","BASE_INFO_URL","ApyButton","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","tokenAddress","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","getBalanceNumber","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","useUnstake","lpPrice","times","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","ActionContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","xl","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","viewMode","chainId","sortOption","isArchived","isInactive","useMedia","maxWidth","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","mggFarm","isMain","log","token2Balance","totalStaked","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent","isDisabled","previousValue","start","end","duration","separator","usePoolPrice","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","token1Address","token2Address","_token1Address","_token2Address","_stakingAddress","setLPPrice","assetsRewardToken","assetsToken1","assetsToken2","toString","pairLiquidity","API_DATA","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","tokens","wbnb","iconExtension","src","alt","useSousStake","sousId","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","txHash","exit","useSousUnstake","enableEmergencyWithdraw","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionTitles","ActionContent","Grid","GridItem","GridHeaderItem","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","freq","fee"],"mappings":"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","file":"static/js/14.17f26b44.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n  // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  // symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  // addLiquidityUrl,\r\n  // inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\r\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\r\n  const firstPart =\r\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\r\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  farmSymbol?: string\r\n  tokenSymbol?: string\r\n  rewardToken?:string\r\n  token: Token\r\n  quoteToken: Token\r\n  pairToken?: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  farmSymbol,\r\n  rewardToken,\r\n  token,\r\n  pairToken\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"row\" alignItems=\"\">\r\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\r\n      </Flex>\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\r\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import * as React from 'react'\r\nimport { Box, CircularProgress } from '@material-ui/core'\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\r\n      <CircularProgress color='inherit' />\r\n    </Box>\r\n  );\r\n}\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from '../../../hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  farm?: any,\r\n  staked?: any,\r\n  earnings?: any,\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\r\n  {\r\n    farm,\r\n    staked,\r\n    earnings,\r\n    onConfirm,\r\n    onDismiss,\r\n    max, tokenName = '',\r\n  }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title='' onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\r\n        <Text>and withdrawing the staked amount of</Text>\r\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\r\n        <Button\r\n          disabled={pendingTx}\r\n          fullWidth onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onConfirm(val)\r\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\r\n            onDismiss()\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n        }}>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\n\r\nconst Container = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    height: auto;\r\n`\r\n\r\nconst DetailsCont = styled.div`\r\n    width: 30%;\r\n    height: auto;\r\n    overflow: visible;\r\n`\r\n\r\nconst ActionDiv = styled.div`\r\n    margin: 15px 0px;\r\n    padding: 10px;\r\n`\r\nconst ModalFooter = styled.div`\r\n    min-width: 720px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport { DetailsCont, ActionDiv, ModalFooter }\r\nexport default Container;\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \r\n\r\nconst Container = styled.div`\r\n    margin-top: -30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 500px;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n    padding: 10px 0px;\r\n`\r\nconst CancelButton = styled(Button)`\r\n    flex: 1;\r\n    margin-right: 10px;\r\n`\r\nconst DepositButton = styled(Button)`\r\n    flex: 1;\r\n    margin-left: 10px;\r\n`\r\n\r\nexport {StyledFlex, CancelButton, DepositButton}\r\nexport default Container;\r\n\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { Modal, Text } from '@metagg/mgg-uikit'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\r\nimport useToast from '../../../../hooks/useToast'\r\nimport { useTranslation } from '../../../../contexts/Localization'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\ninterface StakeModalInterface {\r\n  pid: number,\r\n  onDismiss?: () => void\r\n  max: BigNumber\r\n  symbol: string\r\n  placeholder?: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  lpStakingContract?: Contract\r\n}\r\n\r\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\r\n  const [val, setVal] = useState('0')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const onClick = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      await onConfirm(val, lpStakingContract)\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        `${t('Staked')}!`,\r\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\r\n      )\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(\r\n        t('Error'),\r\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n      console.error(e)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  return (\r\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\r\n      <Container>\r\n        <Text>Stake amount: </Text>\r\n        <ModalInput\r\n          value={val}\r\n          onSelectMax={handleSelectMax}\r\n          onChange={handleChange}\r\n          max={fullBalance}\r\n          symbol={symbol}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          //  inputTitle={t('Stake')}\r\n        />\r\n      </Container>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <Text>{ symbol } balance: </Text>\r\n        <Text>{ fullBalance }</Text>\r\n      </StyledFlex>\r\n      <StyledFlex justifyContent=\"space-between\">\r\n        <CancelButton\r\n          onClick={onDismiss}\r\n        >\r\n         Close\r\n        </CancelButton>\r\n        <DepositButton\r\n          onClick={onClick}\r\n          // disable Deposit button if not yet approved\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n        >\r\n        Deposit\r\n        </DepositButton>\r\n      </StyledFlex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Stake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\r\n\r\ninterface ClaimModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\r\n  \r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      {/* <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions> */}\r\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\r\n        <Text>You will be claiming the reward amount of </Text>\r\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\r\n        <Button fullWidth>Confirm</Button>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\r\nimport { ModalHr } from './Divider'\r\nimport StakeModal from './Modals/Stake'\r\nimport ClaimModal from './Modals/ClaimModal'\r\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\r\n\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string, contract: Contract) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n  handleUnstake?: (amount: string) => void\r\n  maxStake?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = (\r\n  {\r\n    max,\r\n    onConfirm,\r\n    onDismiss,\r\n    tokenName = '',\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n    handleUnstake,\r\n    farm,\r\n    maxStake,\r\n  }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  } = farm.userData || {}\r\n  const userRate = calculateUserRewardRate(farm)\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { pid, lpAddresses } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpContract = useERC20(lpAddress)\r\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\r\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\r\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\r\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\r\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\r\n\r\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\r\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setIsApproved(true)\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      pid={pid}\r\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      inputTitle={t('Stake')} />,\r\n  )\r\n\r\n  const [onPresentClaim] = useModal(<ClaimModal />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedTokenBalance}\r\n      earnings={formatTokenEarnings}\r\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\r\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\r\n        Staking, balances & earnings\r\n      </Text>\r\n      <Container>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {farm.quoteToken.symbol}\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\r\n              Get {farm.quoteToken.symbol}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            {tokenName} Tokens\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\r\n              Get {tokenName}\r\n            </Button>\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>\r\n            Your {tokenName} Deposits\r\n          </Text>\r\n          <ActionDiv style={{ padding: '0px' }}>\r\n            {isApproved ?\r\n              <Button fullWidth onClick={onPresentStake}>\r\n                Stake {tokenName}\r\n              </Button>\r\n              :\r\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\r\n                Enable Farm\r\n              </Button>\r\n            }\r\n\r\n          </ActionDiv>\r\n        </DetailsCont>\r\n      </Container>\r\n      <ModalHr />\r\n      <ModalFooter>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {userRate}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont>\r\n          <Text bold fontSize='24px'>\r\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\r\n          </Text>\r\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\r\n        </DetailsCont>\r\n        <DetailsCont\r\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n          onMouseEnter={() => setActiveSelect(true)}\r\n          onMouseLeave={() => setActiveSelect(false)}\r\n        >\r\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\r\n            <Text>Claim & Withdraw</Text>\r\n          </Button>\r\n        </DetailsCont>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake, { useExit } from 'hooks/useUnstake'\r\nimport { Farm } from 'state/types'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Loading from 'components/Loading'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady?: boolean\r\n  userRate?:string,\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n  farm?: Farm\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  addTokenUrl,\r\n  farm,\r\n  userDataReady\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string, contract?: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      addTokenUrl={addTokenUrl}\r\n      farm={farm}\r\n      handleUnstake={handleUnstake}\r\n      maxStake={stakedBalance}\r\n    />\r\n  )\r\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\r\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      farm={farm}\r\n      staked={formatStakedBalance}\r\n      earnings={earnings}\r\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    let buttonTxt = 'Deposit'\r\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\r\n      buttonTxt = 'Withdraw'\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\r\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        fullWidth\r\n      >\r\n        {userDataReady?\r\n          buttonTxt\r\n          : <Loading /> }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = (\r\n  {\r\n    userDataReady,\r\n    farm,\r\n    account,\r\n    addLiquidityUrl,\r\n    addTokenUrl,\r\n  }) => {\r\n  const { t } = useTranslation()\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n\r\n  const renderDepositButton = () => {\r\n    return (\r\n      <StakeAction\r\n        userDataReady={userDataReady}\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        addTokenUrl={addTokenUrl}\r\n        farm={farm}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useClaim } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\r\nimport useToast from '../../../../../hooks/useToast'\r\n\r\n\r\ninterface HarvestActionProps {\r\n  pid: number\r\n  stakingContract?: string,\r\n  tokenRewardSymbol?: string,\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n  }\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\r\n  {\r\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady,\r\n  }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useClaim(stakingContract)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  return (\r\n    <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          {tokenRewardSymbol}\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\r\n          )}\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Claimed')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml='4px'\r\n        >\r\n          {t('Claim')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes, ThemeContext } from 'styled-components'\r\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { getFarmV2Apr } from 'utils/apr'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  max-width: 450px;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  // padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.card};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  userDataReady: boolean\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\r\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.quoteToken.symbol\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n\r\n  const stakingAddress = getAddress(farm.stakingAddresses);\r\n\r\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\r\n  const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.stakingAddresses[56], token1Balance.balance , token1Balance.balance)\r\n\r\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\r\n  const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        farmSymbol={farm.lpSymbol}\r\n        tokenSymbol={farm.token.symbol}\r\n        rewardToken={farm.quoteToken.symbol}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n        pairToken={farm.pairToken}\r\n      />\r\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )} */}\r\n\r\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\r\n        <Text>{t('Total Deposits')}</Text>\r\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\r\n      </Flex> */}\r\n      <div style={{ margin: '24px' }}>\r\n        <Flex>\r\n          <HarvestAction\r\n            stakingContract={getAddress(farm.stakingAddresses)}\r\n            tokenRewardSymbol={earnLabel}\r\n            userDataReady={userDataReady}\r\n            userData={farm.userData}\r\n            pid={farm.pid}\r\n          />\r\n        </Flex>\r\n        {/* <Flex justifyContent='space-between'>\r\n        <Text>{t('APR')}</Text>\r\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\r\n      </Flex> */}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Rate')}</Text>\r\n          <Text color=\"textSubtle\">\r\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Duration')}</Text>\r\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          userDataReady={userDataReady}\r\n          farm={farm}\r\n          account={account}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          addTokenUrl={AddTokenUrl}\r\n        />\r\n\r\n        <DetailsSection\r\n          removed={removed}\r\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\r\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\r\n          lpLabel={lpLabel}\r\n        />\r\n\r\n        {/* <Divider />\r\n       <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={farm.totalDeposits}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n      <Flex justifyContent='center'>\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\r\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\r\n      </Flex> */}\r\n      </div>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const mainTokenAddress = quoteTokenAddress;\r\n  const pairTokenAddress = tokenAddress\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\nimport { getAddress } from '../../../../../utils/addressHelpers'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  token,\r\n  pairToken,\r\n  userDataReady,\r\n  stakingAddresses,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: token.address,\r\n    pairTokenAddress: pairToken.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string, contract: Contract) => {\r\n    await onStake(amount, contract)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const lpStakingAddress = getAddress(stakingAddresses)\r\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\r\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    mainTokenAddress: farm.token.address,\r\n    pairTokenAddress: farm.pairToken.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.boxShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport useMedia from 'use-media'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFarmPrice } from 'hooks/price'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\r\n  const { account, chainId } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('earned')\r\n  const theme = useContext(ThemeContext)\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n            || latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        // case 'promoted':\r\n        //   return orderBy(\r\n        //     farms,\r\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\r\n        //     'desc',\r\n        //   )\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'duration':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\r\n            'desc',\r\n          )\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const handleItemClick = (index: number) => setActiveTab(index)\r\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n    // Uncomment this if !comingsoon\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div style={{marginTop: '25x', paddingTop: '25px' }}>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                        removed />\r\n            ))}\r\n          </Route>\r\n          {/* {farmsList(activeFarms).map((farm) => ( */}\r\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\r\n          {/* ))} */}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const renderInactiveContent = (): JSX.Element => {\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '20px' }}>\r\n          <Text fontSize='24px' bold> Inactive Liquidity Pools </Text>\r\n        </div>\r\n\r\n        <FlexLayout>\r\n          {farmsList(inactiveFarms).map((farm) => (\r\n            <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\r\n                      removed />\r\n          ))}\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0];\r\n  console.log(mggFarm.stakingAddresses[chainId])\r\n  const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\r\n  const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\r\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(mggFarm.lpTotalSupply), mggFarm.token.address[chainId], mggFarm.pairToken.address[chainId], mggFarm.quoteToken.address[chainId], mggFarm.stakingAddresses[chainId], token1Balance.balance, token2Balance.balance)\r\n  const apr = getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate))\r\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex alignItems='center' justifyContent='space-around' flexDirection={['column', null, 'row']}\r\n              style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n              padding='24px'>\r\n\r\n        <Flex flexDirection='column' flex=\"2\">\r\n          <Flex justifyContent='space-around' flexDirection='column' padding=\"25px 25px 25px 0px\" mr={['8px', 0]} style={{borderBottom: `1px solid ${theme.colors.MGG_active}`}}>\r\n            <Text color={theme.colors.primary} fontSize='60px' bold>\r\n              Liquidity Staking\r\n            </Text>\r\n            <Text color='text' bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n              Earn MGG with your LP tokens!\r\n            </Text>\r\n          </Flex>\r\n          <InfoBox style={{width: '100%'}} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n           <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Tokens Staked</Text>\r\n             <Text fontSize='20px'> {totalStaked} {mggFarm.lpSymbol}</Text>\r\n           </Flex>\r\n           {/* <Flex flexDirection=\"column\">\r\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Value Locked</Text>\r\n             <Text fontSize='20px'>- USD</Text>\r\n           </Flex>\r\n            */}\r\n            <Flex flexDirection=\"column\">\r\n              <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>APR</Text>\r\n              <Text fontSize='20px'>{apr} % </Text>\r\n            </Flex>\r\n        </InfoBox>\r\n        </Flex>\r\n          {/* <Flex style={isMobile ? {\r\n            fontSize: '150px',\r\n            margin: 'auto',\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n          } : { fontSize: '240px', marginRight: '-118px' }}>\r\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\r\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        { /* <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          {/* <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  // {\r\n                  //   label: t('APR'),\r\n                  //   value: 'apr',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Multiplier'),\r\n                  //   value: 'multiplier',\r\n                  // },\r\n                  // {\r\n                  //   label: t('Promoted'),\r\n                  //   value: 'promoted',\r\n                  // },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Duration'),\r\n                    value: 'duration',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform='uppercase'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer> */}\r\n\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json();\r\n            const lastPrice = \"last_price\"\r\n            \r\n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\r\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, stakingAddress: string, token1Balance: BigNumber, token2Balance: BigNumber) => {\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    let _stakingAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n        _stakingAddress = web3.utils.toChecksumAddress(stakingAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assetsRewardToken = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_rewardTokenAddress))\r\n            assetsRewardToken = await assetsRewardToken.json()\r\n\r\n            let assetsToken1 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token1Address))\r\n            assetsToken1 = await assetsToken1.json()\r\n\r\n            let assetsToken2 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token2Address))\r\n            assetsToken2 = await assetsToken2.json()\r\n\r\n            console.log(_token1Address.concat(\"-\",getBalanceNumber(token1Balance, 18).toString()))\r\n            const pairLiquidity = ( getBalanceNumber(token1Balance, 18) * assetsToken1[API_DATA][API_LASTPRICE] ) + ( getBalanceNumber(token2Balance, 18) * assetsToken2[API_DATA][API_LASTPRICE] )\r\n\r\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\r\n            setRewardPrice(assetsRewardToken[API_DATA][API_LASTPRICE])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _stakingAddress, token1Balance, token2Balance])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx","components/Balance.tsx","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts"],"names":["Grid","styled","div","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","color","textTransform","mb","mr","ml","symbol","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","props","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","ModalInput","max","onChange","onSelectMax","decimals","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","onClick","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","process","pairTokenAddressString","secondPart","Flex","MGG_active","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","token","pairToken","flexDirection","split","TokenPairImage","primaryToken","secondaryToken","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","farm","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","BigNumber","useToast","toastError","toastSuccess","useCallback","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","fullWidth","a","console","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","pid","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","dispatch","useAppDispatch","account","useWeb3React","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","gt","ClaimModal","DepositModal","addTokenUrl","handleUnstake","maxStake","requestedApproval","setRequestedApproval","setActiveSelect","userData","allowance","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","lpAddress","getAddress","lpContract","useERC20","RewardTokenBalance","useTokenBalance","address","formatTokenBalance","getBalanceAmount","balance","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useLPStakingContract","onApprove","useApprove","handleApprove","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","onStake","useStake","onUnstake","useExit","location","useLocation","handleStake","useLpTokenPrice","amount","contract","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","UnlockButton","HarvestAction","stakingContract","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","BIG_ZERO","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","onReward","useClaim","MGG_accent2","pr","Balance","unit","prefix","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","token1Balance","useFarmPrice","Number","lpTotalSupply","LPPrice","rewardPrice","getFarmV2Apr","rewardRate","isCommunity","remainingDays","CardActionsContainer","getBscScanAddressUrl","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","tokenAddress","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","getBalanceNumber","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","useUnstake","lpPrice","times","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","ActionContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","xl","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","viewMode","chainId","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","mggFarm","isMain","log","token2Balance","totalStaked","minHeight","marginLeft","flex","borderBottom","Page","TABLE","length","sort","b","paddingTop","exact","renderContent","isDisabled","previousValue","start","end","duration","separator","usePoolPrice","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","token1Address","token2Address","_token1Address","_token2Address","_stakingAddress","setLPPrice","assetsRewardToken","assetsToken1","assetsToken2","toString","pairLiquidity","API_DATA","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","tokens","wbnb","iconExtension","src","alt","useSousStake","sousId","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","txHash","exit","useSousUnstake","enableEmergencyWithdraw","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","claim","useSousHarvest","handleHarvest","harvest","soushHarvestBnb","soushHarvest","ActionTitles","ActionContent"],"mappings":"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","file":"static/js/14.cf92958a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      { lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart = !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?:string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}} size=\"lg\">Stake <br/> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}</Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color='inherit' />\n    </Box>\n  );\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any,\n  staked?: any,\n  earnings?: any,\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = (\n  {\n    farm,\n    staked,\n    earnings,\n    onConfirm,\n    onDismiss,\n    max, tokenName = '',\n  }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title='' onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop='-10px' style={{ width: '450px' }} alignItems='center' flexDirection='column'>\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize='28px' bold>{earnings} {farm.quoteToken.symbol}</Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize='28px' bold>{staked} {farm.lpSymbol}</Text>\n      </Flex>\n      <Flex justifyContent='center' margin='24px' padding='0px 35px'>\n        <Button\n          disabled={pendingTx}\n          fullWidth onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onConfirm(val)\n            toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n            onDismiss()\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n        }}>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\n\nconst Container = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n    height: auto;\n`\n\nconst DetailsCont = styled.div`\n    width: 30%;\n    height: auto;\n    overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n    margin: 15px 0px;\n    padding: 10px;\n`\nconst ModalFooter = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container;\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \n\nconst Container = styled.div`\n    margin-top: -30px;\n    display: flex;\n    flex-direction: column;\n    min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n    padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n    flex: 1;\n    margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n    flex: 1;\n    margin-left: 10px;\n`\n\nexport {StyledFlex, CancelButton, DepositButton}\nexport default Container;\n\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\n\ninterface StakeModalInterface {\n  pid: number,\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({ pid, onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, lpStakingContract}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(\n        `${t('Staked')}!`,\n        t('Your %symbol% tokens have been staked to the pool!', { 'symbol': symbol }),\n      )\n      onDismiss()\n    } catch (e) {\n      toastError(\n        t('Error'),\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{ symbol } balance: </Text>\n        <Text>{ fullBalance }</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton\n          onClick={onDismiss}\n        >\n         Close\n        </CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n        Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\n  \n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = (\n  {\n    max,\n    onConfirm,\n    onDismiss,\n    tokenName = '',\n    addLiquidityUrl,\n    addTokenUrl,\n    handleUnstake,\n    farm,\n    maxStake,\n  }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  } = farm.userData || {}\n  const userRate = calculateUserRewardRate(farm)\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n\n  const [isApproved, setIsApproved] = useState(account && allowance && (new BigNumber(allowance)).isGreaterThanOrEqualTo(tokenBalance))\n  const lpStakingAddress = getAddress(farm.stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm} lpStakingContract={lpStakingContract} max={max} symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')} />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color='textSubtle' fontSize='14px' style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatLPTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as='a' target='_blank' href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatStakedTokenBalance ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ?\n              <Button fullWidth onClick={onPresentStake}>\n                Stake {tokenName}\n              </Button>\n              :\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            }\n\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {userRate}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize='24px'>\n            {formatTokenEarnings ?? <Skeleton width={60} display='inline-block' />}\n          </Text>\n          <Text color='textSubtle' fontSize='14px'>{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?:string,\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance)? onPresentWithdraw: onPresentDeposit}\n        disabled={(farm.hasEnded && !parseFloat(farm.userData.stakedBalance)) && ['history', 'archived'].some((item) => location.pathname.includes(item))}\n        fullWidth\n      >\n        {userDataReady?\n          buttonTxt\n          : <Loading /> }\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = (\n  {\n    userDataReady,\n    farm,\n    account,\n    addLiquidityUrl,\n    addTokenUrl,\n  }) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return (\n    <Action>\n      {!account ? <UnlockButton mt='8px' width='100%' /> : renderDepositButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\n\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string,\n  tokenRewardSymbol?: string,\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = (\n  {\n    stakingContract, tokenRewardSymbol, pid, userData, userDataReady,\n  }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext);\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize='12px' color='textSubtle' decimals={2} value={earningsBusd} unit=' USD' prefix='~' />\n          )}\n        </div>\n        <Button\n          style={{borderRadius: '3px', height: '40px'}}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml='4px'\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n    // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n    // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const stakingAddress = getAddress(farm.stakingAddresses);\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n  const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\n  const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.stakingAddresses[56], token1Balance.balance , token1Balance.balance)\n\n  const aprBlackList = [\"0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b\"]\n  const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{ margin: '24px' }}>\n        <Flex>\n          <HarvestAction\n            stakingContract={getAddress(farm.stakingAddresses)}\n            tokenRewardSymbol={earnLabel}\n            userDataReady={userDataReady}\n            userData={farm.userData}\n            pid={farm.pid}\n          />\n        </Flex>\n        {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Rate')}</Text>\n          <Text color=\"textSubtle\">\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Duration')}</Text>\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\n        </Flex>\n        <CardActionsContainer\n          userDataReady={userDataReady}\n          farm={farm}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          addTokenUrl={AddTokenUrl}\n        />\n\n        <DetailsSection\n          removed={removed}\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\n          lpLabel={lpLabel}\n        />\n\n        {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const mainTokenAddress = quoteTokenAddress;\n  const pairTokenAddress = tokenAddress\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { Contract } from 'web3-eth-contract'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  token,\n  pairToken,\n  userDataReady,\n  stakingAddresses,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: token.address,\n    pairTokenAddress: pairToken.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string, contract: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const lpStakingAddress = getAddress(stakingAddresses)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const dispatch = useAppDispatch()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.boxShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n            || latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div style={{marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                        removed />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n\n    return (\n      <div>\n        <div style={{ margin: '20px' }}>\n          <Text fontSize='24px' bold> Inactive Liquidity Pools </Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(inactiveFarms).map((farm) => (\n            <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account}\n                      removed />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0];\n  console.log(mggFarm.stakingAddresses[chainId])\n  const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\n  const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\n  const {LPPrice, rewardPrice} = useFarmPrice(Number(mggFarm.lpTotalSupply), mggFarm.token.address[chainId], mggFarm.pairToken.address[chainId], mggFarm.quoteToken.address[chainId], mggFarm.stakingAddresses[chainId], token1Balance.balance, token2Balance.balance)\n  const apr = getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate))\n  const totalStaked = getBalanceAmount(new BigNumber(mggFarm.totalDeposits ?? 0)).toFormat(4)\n  return (\n    <>\n      <PageHeader>\n        <Flex alignItems='center' justifyContent='space-around' flexDirection={['column', null, 'row']}\n              style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n              padding='24px'>\n\n        <Flex flexDirection='column' flex=\"2\">\n          <Flex justifyContent='space-around' flexDirection='column' padding=\"25px 25px 25px 0px\" mr={['8px', 0]} style={{borderBottom: `1px solid ${theme.colors.MGG_active}`}}>\n            <Text color={theme.colors.primary} fontSize='60px' bold>\n              Liquidity Staking\n            </Text>\n            <Text color='text' bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n              Earn MGG with your LP tokens!\n            </Text>\n          </Flex>\n          <InfoBox style={{width: '100%'}} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n           <Flex flexDirection=\"column\">\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Tokens Staked</Text>\n             <Text fontSize='20px'> {totalStaked} {mggFarm.lpSymbol}</Text>\n           </Flex>\n           {/* <Flex flexDirection=\"column\">\n             <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>Total Value Locked</Text>\n             <Text fontSize='20px'>- USD</Text>\n           </Flex>\n            */}\n            <Flex flexDirection=\"column\">\n              <Text fontSize='17px' bold color={theme.colors.MGG_accent2}>APR</Text>\n              <Text fontSize='20px'>{apr} % </Text>\n            </Flex>\n        </InfoBox>\n        </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        { /* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try{\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\n            assets = await assets.json();\n            const lastPrice = \"last_price\"\n            \n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\n\n    return {stakingPrice, rewardPrice}\n}\n\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string, stakingAddress: string, token1Balance: BigNumber, token2Balance: BigNumber) => {\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _stakingAddress\n    try{\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n        _stakingAddress = web3.utils.toChecksumAddress(stakingAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let assetsRewardToken = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_rewardTokenAddress))\n            assetsRewardToken = await assetsRewardToken.json()\n\n            let assetsToken1 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token1Address))\n            assetsToken1 = await assetsToken1.json()\n\n            let assetsToken2 = await fetch(SPARKSWAP_API.concat(API_ASSETS,\"/\",_token2Address))\n            assetsToken2 = await assetsToken2.json()\n\n            console.log(_token1Address.concat(\"-\",getBalanceNumber(token1Balance, 18).toString()))\n            const pairLiquidity = ( getBalanceNumber(token1Balance, 18) * assetsToken1[API_DATA][API_LASTPRICE] ) + ( getBalanceNumber(token2Balance, 18) * assetsToken2[API_DATA][API_LASTPRICE] )\n\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\n            setRewardPrice(assetsRewardToken[API_DATA][API_LASTPRICE])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress, _stakingAddress, token1Balance, token2Balance])\n\n    return {LPPrice, rewardPrice}\n}\n\nexport default usePoolPrice","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n"],"sourceRoot":""}
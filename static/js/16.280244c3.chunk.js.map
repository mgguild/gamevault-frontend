{"version":3,"sources":["hooks/useWeb3.ts","hooks/chainHelpers.ts","hooks/price.ts","utils/refHelpers.ts","utils/latinise.ts","state/block/hooks.ts","components/SearchInput/SearchInput.tsx","views/Gamefi/components/NotAvailable.tsx","views/Gamefi/styled.ts","views/Gamefi/components/Cards/styled.tsx","views/Gamefi/components/Cards/Farm.tsx","views/Gamefi/components/Cards/Pool.tsx","views/Gamefi/Gamefi.tsx"],"names":["useWeb3","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","web3","setweb3","useEffect","current","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","console","error","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","farm","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","BigNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","account","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","decimals","_totalToken2InPool","usePrevious","value","ref","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useBlock","useSelector","state","block","StyledInput","styled","Input","theme","colors","MGG_container","InputWrapper","div","mediaQueries","sm","Container","SearchInput","onChangeCallback","onChange","placeholder","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","target","onBlur","StyledNotFound","NotAvailable","title","src","alt","width","style","marginBottom","mb","ToggleWrapper","FilterItem","Button","isGrid","MGG_active","Flex","Section","HeaderSection","BodySection","StakeSection","Cards2","button","bgColor","Card2Container","TokenLogo","img","size","Badge","type","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","FarmCard2","userDataReady","isNew","removed","cakePrice","dummyState","setFetchData","toString","MAINNET_CHAIN_ID","prevLPPrice","prevRewardPrice","setTimeout","farmV2Apr","getFarmV2Apr","rewardRate","apr","toFixed","height","UIProps","className","cursor","to","pid","display","gridTemplateColumns","flexFlow","columnGap","justifyContent","color","alignItems","lpSymbol","name","textAlign","remainingDays","PoolCard2","pool","stakingToken","sousId","earningToken","userData","isFinished","isComingSoon","startBlock","endBlock","poolCategory","totalStaked","stakingTokenPrice","rewardPerBlock","tokenPerBlock","temp","times","stakedBalance","currentBlock","contractAddress","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","stakingTokenBalance","BIG_ZERO","poolApr","PoolCategory","BINANCE","getPoolApr","formatNumber","Gamefi","query","setQuery","pathname","useRouteMatch","path","useLocation","useFarms","farmsLP","userDataLoaded","poolsWithoutAutoVault","usePools","pools","usePriceCakeBusd","isArchived","includes","isActive","useCakeVault","userShares","cakeAtLastUserAction","accountHasVaultShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","gt","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","stakedOnly","setStakedOnly","activeFarms","filter","hasEnded","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","farmsList","useCallback","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","liquidity","lowercaseQuery","cakePool","isAutoVault","partition","finishedPools","openPools","stakedOnlyFinishedPools","stakedOnlyOpenPools","stakedMemoized","stakingList","activePools","inactivePools","renderContent","RENDER_TYPE","marginTop","paddingTop","rowGap","length","Grid","container","spacing","item","md","Farm","Pool","render","padding","checked","scale","marginLeft","textTransform","event"],"mappings":"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","file":"static/js/16.280244c3.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (\n  farm: any,\n  chain: any,\n  isFetchData?: boolean,\n) => {\n\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    web3.utils,\n    farm,\n    chain,\n    isFetchData,\n    setLPPrice,\n    setRewardPrice,\n    chainName,\n    MoralisWeb3Api,\n  ])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@metagg/mgg-uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  margin-left: auto;\n  background-color: ${({ theme }) => theme.colors.MGG_container};\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(placeholder)}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst NotAvailable = ({ title }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledNotFound>\n      <img src=\"/logo.png\" alt=\"LogoIcon\" width=\"64px\" style={{ marginBottom: '8px' }} />\n      <Text mb=\"16px\">{`No ${title} found`}</Text>\n    </StyledNotFound>\n  )\n}\n\nexport default NotAvailable\n","import styled from 'styled-components'\nimport { Button, Flex } from '@metagg/mgg-uikit'\nimport { Grid } from '@mui/material'\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const ButtonA = styled(Button)`\n  width: 10rem;\n`\nexport const ButtonB = styled(Button)<{ isGrid: boolean }>`\n  padding: 1rem;\n  background-color: ${({ isGrid, theme }) => (isGrid ? theme.colors.MGG_active : theme.colors.MGG_container)};\n`\nexport const FilterItem = styled(Flex)`\n  align-items: center;\n  text-align: center;\n  flex-flow: row;\n  column-gap: 0.5rem;\n`\n\nexport const Section = styled(Flex)`\n  flex-flow: row-wrap;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n`\n\nexport const HeaderSection = styled(Section)``\nexport const BodySection = styled(Section)`\n  flex-direction: column;\n`\nexport const StakeSection = styled(Flex)`\n  width: 100%;\n`\n","import styled, { ThemeContext } from 'styled-components'\n\nexport const Cards2 = styled.button<{ src?: string; bgColor?: string }>`\n  width: 100%;\n  position: relative;\n  min-width: 20rem;\n  min-height: 12rem;\n  cursor: pointer;\n  border: none;\n  padding: 0;\n  text-align: left;\n  flex: 1;\n  display: flex;\n  align-items: stretch;\n  background-color: ${({ bgColor }) => bgColor ?? '#030f62'};\n  ${({ src }) =>\n    `&:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      top: 0;\n      opacity: 0.2;\n      width: 100%;\n      height: 100%;\n      z-index: 0;\n      background-image: url(${src ?? `./MGG.png`});\n      background-repeat: no-repeat;\n      // background-attachment: fixed;\n      background-position: center;\n      background-size: cover;\n    }`}\n  & > * {\n    flex: 1;\n  }\n`\n\nexport const Card2Container = styled.div`\n  display: grid;\n  position: relative;\n  padding: 1rem 1.5rem;\n  background: linear-gradient(0deg, rgb(0 0 0) 0%, rgb(0 0 0 / 50%) 25%, rgba(36, 121, 9, 0) 75%);\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  grid-template-columns: 1fr 1fr;\n`\nexport const TokenLogo = styled.img<{ size?: string }>`\n  border-radius: 50%;\n  height: ${({ size }) => (!size ? '80px' : size)};\n  width: ${({ size }) => (!size ? '80px' : size)};\n  z-index: 2;\n  @media (max-width: 500px) {\n    height: ${({ size }) => (!size ? '50px' : size)};\n    width: ${({ size }) => (!size ? '50px' : size)};\n  }\n`\n\nexport const Badge = styled.div<{ type?: number }>`\n  ${({ type }) =>\n    type\n      ? `\n      padding: 0.2rem 0.5rem;\n      border: thin solid white;\n      border-radius: 0.3rem;\n    `\n      : `\n      padding: 0.2rem 0.5rem;\n      background-color: rgb(0,196,204);\n      border-radius: 0.3rem;\n    `}\n`\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { Farm, Pool } from 'state/types'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\nimport { FarmWithStakedValue } from '../config'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface FarmCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady?: boolean\n  farm?: FarmWithStakedValue\n  removed?: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst FarmCard2: React.FC<FarmCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  farm,\n  removed,\n  cakePrice,\n  account,\n  isNew,\n}) => {\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  // const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  // const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  // const earnLabel = farm.quoteToken.symbol\n  // const liquidityUrlPathParts = getLiquidityUrlPathParts({\n  //   mainTokenAddress: farm.token.address,\n  //   pairTokenAddress: farm.pairToken.address,\n  // })\n  const [dummyState, setDummyState] = useState(null)\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n  const { LPPrice, rewardPrice } = useFarmPrice(\n    farm,\n    chain,\n    isFetchData,\n  )\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [dummyState])\n\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)),\n    [LPPrice, rewardPrice, farm.totalDeposits, farm.rewardRate],\n  )\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n\n  return (\n    <>\n      <Cards2\n        src={src}\n        bgColor={farm.UIProps ? farm.UIProps.bgColor : null}\n        className=\"shodow-pop\"\n        style={{ cursor: 'pointer' }}\n      >\n        <Link to={`/gamefi/${`LP`}/${farm.pid}`}>\n          <Card2Container style={{ display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(farm.quoteToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(farm.pairToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">LP Staking</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{farm.lpSymbol}</Text>\n                <Heading color=\"white\">{farm.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              <div style={{ textAlign: 'end' }}>\n                <Text color=\"white\">APR {apr}</Text>\n                <Heading color=\"white\">{farm.remainingDays} Days Left</Heading>\n              </div>\n            </Flex>\n          </Card2Container>\n        </Link>\n      </Cards2>\n    </>\n  )\n}\n\nexport default FarmCard2\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link as RLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Link, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface PoolCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady: boolean\n  pool: Pool\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst PoolCard2: React.FC<PoolCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  pool,\n  account,\n  isNew,\n}) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    poolCategory,\n    stakingTokenPrice,\n  } = pool\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress)\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n\n  return (\n    <>\n      <Cards2 src={src} bgColor={pool.UIProps.bgColor} className=\"shodow-pop\" style={{ cursor: 'pointer' }}>\n        <RLink to={`/gamefi/${`Pools`}/${pool.sousId}`}>\n          <Card2Container style={{ display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(stakingToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(earningToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">Pool Based</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{`${stakingToken.symbol}-${earningToken.symbol} Staking`}</Text>\n                <Heading color=\"white\">{pool.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              <div style={{ textAlign: 'end' }}>\n                <Text color=\"white\">APR {apr}</Text>\n                <Heading color=\"white\">\n                  {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n                </Heading>\n              </div>\n            </Flex>\n          </Card2Container>\n        </RLink>\n      </Cards2>\n    </>\n  )\n}\n\nexport default PoolCard2\n","import BigNumber from 'bignumber.js'\nimport { orderBy, partition } from 'lodash'\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { Grid } from '@mui/material'\nimport { Farm, Pool } from 'state/types'\nimport {\n  useFarms,\n  usePollFarmsData,\n  usePriceCakeBusd,\n  usePools,\n  useFetchPublicPoolsData,\n  useCakeVault,\n  useFetchCakeVault,\n} from 'state/hooks'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { latinise } from 'utils/latinise'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { Text, Flex, Heading } from '@metagg/mgg-uikit'\nimport { Toggle } from '@pancakeswap/uikit'\nimport SearchInput from 'components/SearchInput'\nimport { FarmWithStakedValue } from './components/config'\nimport TabButtons from './components/TabButtons'\nimport NotAvailable from './components/NotAvailable'\nimport { BodySection, FilterItem, HeaderSection, StakeSection, ToggleWrapper } from './styled'\nimport FarmCard from './components/Cards/Farm'\nimport PoolCard from './components/Cards/Pool'\n\nconst Gamefi: React.FC = () => {\n  const [query, setQuery] = useState('')\n  const { account } = useWeb3React()\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const { pools: poolsWithoutAutoVault } = usePools(account)\n  const cakePrice = usePriceCakeBusd()\n  const isArchived = pathname.includes('archived')\n  const isActive = true\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  usePollFarmsData(isArchived)\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n\n  const stakedMemoized = useMemo(() => {\n    const stakingList = { activeFarms: [], inactiveFarms: [], activePools: [], inactivePools: [] }\n\n    if (stakedOnly) {\n      stakingList.activeFarms = farmsList(stakedOnlyFarms)\n      stakingList.inactiveFarms = farmsList(stakedInactiveFarms)\n      stakingList.activePools = stakedOnlyOpenPools\n      stakingList.inactivePools = stakedOnlyFinishedPools\n    } else {\n      stakingList.activeFarms = farmsList(activeFarms)\n      stakingList.inactiveFarms = farmsList(inactiveFarms)\n      stakingList.activePools = openPools\n      stakingList.inactivePools = finishedPools\n    }\n    return stakingList\n  }, [\n    farmsList,\n    activeFarms,\n    inactiveFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    finishedPools,\n    openPools,\n    stakedOnlyOpenPools,\n    stakedOnlyFinishedPools,\n  ])\n\n  const renderContent = ({ RENDER_TYPE }: { RENDER_TYPE?: string }): JSX.Element => {\n    const render = (type) => {\n      switch (type) {\n        case 'RENDER_ENDED':\n          return stakedMemoized.inactiveFarms.length !== 0 && stakedMemoized.inactivePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.inactiveFarms.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.inactiveFarms.map((farm) => (\n                    <Grid key={farm.pid} item md={11}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Inactive Farms\" />\n              )}\n              {stakedMemoized.inactivePools.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.inactivePools.map((pool) => (\n                    <Grid key={pool.sousId} item md={11}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Inactive Pools\" />\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"inactive farms and pools\" />\n          )\n        default:\n          return stakedMemoized.activeFarms.length !== 0 && stakedMemoized.activePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.activeFarms.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.activeFarms.map((farm) => (\n                    <Grid key={farm.pid} item md={11}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Active Farms\" />\n              )}\n              {stakedMemoized.activePools.length !== 0 ? (\n                <Grid container spacing={2}>\n                  {stakedMemoized.activePools.map((pool) => (\n                    <Grid key={pool.sousId} item md={11}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Active Pools\" />\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"active farms and pools\" />\n          )\n      }\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'row wrap',\n            justifyContent: 'space-evenly',\n            columnGap: '2rem',\n            rowGap: '2rem',\n          }}\n        >\n          {render(RENDER_TYPE)}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      style={{\n        padding: '5rem',\n      }}\n    >\n      <HeaderSection>\n        <FilterItem>\n          <ToggleWrapper>\n            <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n            <Text marginLeft=\"10px\"> Staked only</Text>\n          </ToggleWrapper>\n          {/* <TabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} /> */}\n        </FilterItem>\n        <FilterItem>\n          <Text textTransform=\"uppercase\">Search</Text>\n          <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n        </FilterItem>\n      </HeaderSection>\n      <BodySection>\n        <Heading size=\"xl\">Live Farms</Heading>\n        {renderContent({ RENDER_TYPE: '' })}\n      </BodySection>\n      <BodySection>\n        <Heading size=\"xl\">Past Farms</Heading>\n        {renderContent({ RENDER_TYPE: 'RENDER_ENDED' })}\n      </BodySection>\n    </div>\n  )\n}\n\nexport default Gamefi\n"],"sourceRoot":""}
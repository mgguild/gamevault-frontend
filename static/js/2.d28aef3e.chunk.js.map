{"version":3,"sources":["hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useContract.ts","components/UnlockButton.tsx","hooks/useWeb3.ts","utils/callHelpers.ts","utils/bscscan.ts","hooks/useTokenBalance.ts","hooks/useApprove.ts"],"names":["usePreviousValue","value","ref","useRef","useEffect","current","useLastUpdated","useState","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useCallback","useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIfoV1Contract","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useLotteryTicket","getLotteryTicketContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","library","useWeb3React","refEth","Web3","web3NoAccount","setweb3","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","buyBox","inoContract","rarity","amount","buy","getDecimalAmount","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","allowance","call","res","console","error","prev","fetchBalance","useTokenBalance","customAccount","balanceOf","useApprove","contractAddress","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","response","currentAllowance","gt","checkApprovalStatus","useIfoApprove","tokenContract","spenderAddress"],"mappings":"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","file":"static/js/2.d28aef3e.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getLpStakingContract, getInoContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useInoContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getInoContract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useLPStakingContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\r\n      {t('Connect Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : web3NoAccount)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\r\nimport farms from 'config/constants/farms'\r\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\r\nimport tokens from 'config/constants/tokens'\r\nimport { web3WithArchivedNodeProvider } from './web3'\r\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const buyBox = async (inoContract, rarity, account, amount) => {\r\n  return inoContract.methods\r\n    .buy(rarity)\r\n    .send({ from: account, value: getDecimalAmount(amount) }) // to fix\r\n}\r\n\r\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, amount)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\r\n  if (useV2) {\r\n    return masterChefContract.methods\r\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({\r\n      from: account,\r\n      gas: DEFAULT_GAS_LIMIT,\r\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\r\n    })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const exit = async (contract: Contract, account) => {\r\n  return contract.methods\r\n    .exit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claim = async (contract, account) => {\r\n  return contract.methods\r\n    .getReward()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\nconst cakeBnbPid = 251\r\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\r\n\r\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\r\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\r\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\r\n//\r\n// /**\r\n//  * Returns the total CAKE staked in the CAKE-BNB LP\r\n//  */\r\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\r\n//   try {\r\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\r\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\r\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\r\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\r\n//\r\n//     const pair: Pair = new Pair(\r\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\r\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\r\n//     )\r\n//     const cakeLPBalance = pair.getLiquidityValue(\r\n//       pair.token0,\r\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\r\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\r\n//       false,\r\n//     )\r\n//\r\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\r\n//   } catch (error) {\r\n//     console.error(`CAKE-BNB LP error: ${error}`)\r\n//     return BIG_ZERO\r\n//   }\r\n// }\r\n\r\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\r\n  try {\r\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\r\n\r\n    return {\r\n      stakedTokens: await contract.methods.balanceOf(account).call(),\r\n      totalDeposits: await contract.methods.totalSupply().call(),\r\n      rewardRate: await contract.methods.rewardRate().call(),\r\n    }\r\n  } catch (error) {\r\n    console.error(`LP Staking error: ${error}`)\r\n    return {\r\n      totalDeposits: '-',\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the cake staked in the main pool\r\n */\r\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\r\n  try {\r\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\r\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\r\n\r\n    return getBalanceAmount(new BigNumber(response.amount))\r\n  } catch (error) {\r\n    console.error('Error getting stake in CAKE pool', error)\r\n    return BIG_ZERO\r\n  }\r\n}\r\n","import { BASE_BSC_SCAN_URL } from 'config'\r\n\r\nexport const getBscScanAddressUrl = (address: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string, customAccount = \"0x0000\") => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  let { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  if (customAccount !== \"0x0000\") account = customAccount;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.allowance(account, allowedAddress).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { approve, approveWithAmount } from 'utils/callHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useCakeVaultContract, useLottery, useSousChef } from './useContract'\r\nimport useToast from './useToast'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\r\n  const { account } = useWeb3React()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(lpContract, contractAddress, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lpContract, contractAddress])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (tx) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), e?.message)\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, stakingAmount, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = () => {\r\n    cakeContract.methods\r\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setRequestedApproval(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n        setLastUpdated()\r\n        setRequestedApproval(false)\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      })\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\r\n        const currentAllowance = new BigNumber(response)\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      return await approve(cakeContract, lotteryContract, account)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n"],"sourceRoot":""}
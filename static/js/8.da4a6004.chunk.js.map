{"version":3,"sources":["hooks/useContract.ts","components/UnlockButton.tsx","utils/callHelpers.ts","components/Balance.tsx","hooks/useWeb3.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","utils/bscscan.ts","hooks/useTokenBalance.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","../node_modules/lodash/_baseEach.js","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseMap.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_createBaseEach.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","../node_modules/lodash/partition.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","../node_modules/react-feather/dist/icons/chevron-down.js","../node_modules/react-feather/dist/icons/chevron-up.js","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","utils/getTimePeriods.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIgoContract","getIgoContract","useVestingContract","getVestingContract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","customTitle","useTranslation","t","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveContract","tokenContract","spender","buyBox","inoContract","rarity","amount","buy","value","getDecimalAmount","buyIgo","igoContract","buyTokens","toString","claimVesting","vestingContract","claimAll","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","Balance","color","isDisabled","unit","prefix","previousValue","useRef","useEffect","current","start","end","duration","separator","library","useWeb3React","refEth","useState","Web3","web3NoAccount","setweb3","useApprove","contractAddress","onApprove","useCallback","useApproveGuildpad","tokenContractAddress","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useLotteryApprove","lotteryContract","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","customAccount","balanceOf","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","baseForOwn","require","baseEach","createBaseEach","module","exports","baseOrderBy","isArray","collection","iteratees","orders","guard","undefined","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","length","iteratee","index","key","object","other","isArrayLike","Array","baseFor","keys","eachFunc","fromRight","iterable","Object","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","partition","createAggregator","push","arrayAggregator","baseAggregator","setter","initializer","func","accumulator","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ChevronDown","forwardRef","_ref","_ref$color","_ref$size","rest","createElement","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","PropTypes","string","oneOfType","number","displayName","ChevronUp","ViewMode","StyledCard","keyframes","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","cake","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","useTheme","as","external","BASE_EXCHANGE_URL","ModalBody","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","userData","stakingLimit","stakingTokenContract","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","remainingStakeTokens","totalAllowance","getCalculatedStakingLimit","formatNumber","toNumber","fullDecimalStakeAmount","plus","gte","handleConfirmClick","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","Math","floor","handleStakeInputChange","currentTarget","addLiquidityUrl","marginTop","marginBottom","isLoading","endIcon","spin","disabled","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","activeSelect","setActiveSelect","earnedTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","className","window","open","BASE_SWAP_URL","isDepositDisabled","border","borderTop","onMouseEnter","onMouseLeave","eq","isWithdrawDisabled","type","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","totalEarned","display","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","userDataReady","startBlock","endBlock","accountHasStakedBalance","rewardPerBlock","currentBlock","useSelector","state","stakingAddess","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","getPoolApr","getBscScanLink","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","onPresentApyModal","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","projectLink","p","registerToken","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","withdrawalFee","feeAsDecimal","noFeeToPay","shouldShowTimer","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","withdrawAll","fetchCakeVaultUserData","handleDeposit","minWidth","onUserInput","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","accountHasVaultShares","cakePool","map","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","path","url","isExact","setFetchData","mggPool","isMain","prevStakingPrice","prevRewardPrice","poolApr","tvr","minHeight","padding","flex","borderBottom","Page"],"mappings":"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","file":"static/js/8.da4a6004.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n  getInoContract,\n  getIgoContract,\n  getVestingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIgoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIgoContract(address, web3), [address, web3])\n}\n\nexport const useVestingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getVestingContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\nimport { useERC20 } from '../hooks/useContract'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveContract = async (tokenContract: Contract, spender: string, account) => {\n  return tokenContract.methods.approve(spender, ethers.constants.MaxUint256).send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods.buy(rarity).send({ from: account, value: getDecimalAmount(amount) })\n}\n\nexport const buyIgo = async (igoContract, account, amount) => {\n  return igoContract.methods.buyTokens(getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const claimVesting = async (vestingContract, account) => {\n  return vestingContract.methods.claimAll().send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods.approve(masterChefContract.options.address, amount).send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveContract, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useERC20, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Guildpad\nexport const useApproveGuildpad = (tokenContractAddress: string, contractAddress: string) => {\n  const { account } = useWeb3React()\n  const tokenContract = useERC20(tokenContractAddress)\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approveContract(tokenContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    stakingAmount,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getExplorerAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getExplorerTransactionUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = '0x0000') => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  let { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  if (customAccount !== '0x0000') {\n    account = customAccount\n  }\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt=\"logo-img\" />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt=\"logo-img\" />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract ?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (\n  lpTotalSupply: number,\n  token1Address: string,\n  token2Address: string,\n  rewardTokenAddress: string,\n  lpAddress: string,\n  isFetchData?: boolean,\n) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n  let _token1Address\n  let _token2Address\n  let _rewardTokenAddress\n  let _lpAddress\n  try {\n    _token1Address = web3.utils.toChecksumAddress(token1Address)\n    _token2Address = web3.utils.toChecksumAddress(token2Address)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    isFetchData,\n    setLPPrice,\n    setRewardPrice,\n    lpTotalSupply,\n    _token1Address,\n    _token2Address,\n    _rewardTokenAddress,\n    _lpAddress,\n    chainName,\n    MoralisWeb3Api,\n  ])\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ stakingAddress, lpInfoAddress }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      {lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) =>\n    theme.isDark ? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronDown = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"6 9 12 15 18 9\"\n  }));\n});\nChevronDown.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronDown.displayName = 'ChevronDown';\nexport default ChevronDown;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronUp = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"18 15 12 9 6 15\"\n  }));\n});\nChevronUp.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronUp.displayName = 'ChevronUp';\nexport default ChevronUp;","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\n  border-bottom: 5px solid ${({ theme }) => theme.colors.MGG_active};\n  padding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n  /*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext)\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{ textAlign: 'left' }}>\n          <Heading color=\"text\" size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br />\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal title={t('%symbol% required', { symbol: tokenSymbol })} onDismiss={onDismiss}>\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null)\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance)\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals)\n    : BIG_ZERO\n  const totalAllowance = useTokenAllowance(getAddress(stakingToken.address), getAddress(pool.contractAddress))\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n    getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals),\n  )\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [\n    requestedApproval,\n    stakeAmount,\n    stakingLimit,\n    userData,\n    stakingToken,\n    isRemovingStake,\n    totalAllowance,\n    setHasReachedStakedLimit,\n  ])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center' }}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol,\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {\n            handleChangePercent(100)\n          }}\n          onChange={(e) => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=\"\"\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n        <div>\n          <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n            {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n            Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n          </Text>\n        </div>\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\" marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{ width: '100%' }}>\n          <Button\n            isLoading={pendingTx}\n            // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            // onClick={handleApproveClick}\n            // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n            onClick={handleApprove}\n            disabled={!stakeAmount || isApproved}\n            mt=\"24px\"\n            fullWidth\n            marginRight=\"20px\"\n          >\n            Approve\n          </Button>\n          <Button\n            isLoading={pendingTx}\n            endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            onClick={handleConfirmClick}\n            disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n            // disabled={!approvedTx}\n            mt=\"24px\"\n            fullWidth\n            marginLeft=\"20px\"\n          >\n            {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n            {t('Deposit')}\n          </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nimport StakeTokenModal from './Stake'\nimport { BASE_SWAP_URL } from '../../../../../config'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : 0\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(\n    <StakeTokenModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(\n        getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18),\n        stakingToken.decimals,\n      )\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <Flex flexDirection=\"column\" style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize=\"20px\" marginBottom=\"10px\" marginLeft=\"10px\">\n          Account Info\n        </Text>\n        <Text fontSize=\"15px\" marginLeft=\"10px\">\n          Staking, balances & earnings\n        </Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop=\"21px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Tokens\n            </Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className=\"disabled\"\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[56]}`, '_blank')\n              }}\n            >\n              Add More\n            </Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol && (\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"24px\">{formatNumber(totalEarningTokens, 2, 5)}</Text>\n              <Text color=\"textSubtle\" marginBottom=\"24px\">\n                {pool.earningToken.symbol} Tokens\n              </Text>\n              <Button\n                fullWidth\n                onClick={() => {\n                  window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[56]}`, '_blank')\n                }}\n              >\n                Add More\n              </Button>\n            </Flex>\n          )}\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Staked\n            </Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>\n              Stake Tokens\n            </Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop=\"30px\" marginBottom=\"20px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              Your Rate {pool.earningToken.symbol}/block\n            </Text>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              {pool.earningToken.symbol} Token Earnings\n            </Text>\n          </Flex>\n          <Flex\n            flexDirection=\"column\"\n            mb=\"16px\"\n            marginLeft=\"5px\"\n            onMouseEnter={() => setActiveSelect(true)}\n            onMouseLeave={() => setActiveSelect(false)}\n          >\n            {userData.stakedBalance.eq(0) ? (\n              <Button disabled fullWidth>\n                {' '}\n                Withdraw{' '}\n              </Button>\n            ) : (\n              <Dropdown\n                position=\"top\"\n                target={\n                  // Disable component if total staked tokens is empty\n                  <Button fullWidth variant=\"secondary\" disabled={pool.isWithdrawDisabled}>\n                    <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                  </Button>\n                }\n              >\n                {/* Disable Claim & Withdraw if no staked tokens */}\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                  Claim\n                </Button>\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                  Claim & Withdraw\n                </Button>\n              </Dropdown>\n            )}\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && (\n          <Text className=\"yellow\" fontSize=\"15px\" marginLeft=\"10px\">\n            SRKb and SFUEL Withdrawals and Deposits are locked for 48 hours during launchpad\n          </Text>\n        )}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={onPresentStake}>\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake'}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalStaked, 2, 5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalEarned, 2, 5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n        <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n          {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n        </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { ThemeContext } from 'styled-components'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport {\n  ActionContainer,\n  ActionContent,\n  ActionTitles,\n  Earned,\n} from '../../../Farms/components/FarmTable/Actions/styles'\n\ninterface StakeActionsProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  addTokenUrl?: string\n}\n\nconst ClaimAction: React.FC<StakeActionsProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const [pendingTx, setPendingTx] = useState(false)\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `Claimed!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {earningToken.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\n        </div>\n        <Button\n          disabled={userData.stakedBalance.eq(0)}\n          onClick={handleHarvestConfirm}\n          style={{ borderRadius: '3px', height: '40px' }}\n          ml=\"4px\"\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default ClaimAction\n","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { PoolCategory } from 'config/constants/types'\nimport { ThemeContext } from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string; userDataReady: boolean }> = ({\n  pool,\n  account,\n  userDataReady,\n}) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    poolCategory,\n    stakingTokenPrice,\n  } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress)\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n          <ClaimAction\n            stakingTokenBalance={stakingTokenBalance}\n            isBnbPool={isBnbPool}\n            pool={pool}\n            stakingTokenPrice={stakingTokenPrice}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection stakingAddress={getBscScanAddressUrl(stakingAddess)} />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal title={isRemovingStake ? t('Unstake') : t('Stake in Pool')} onDismiss={onDismiss}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport { Box, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport { Oval } from 'react-loading-icons'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showUpcomingPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} userDataReady={userDataReady} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const mggPool = openPools.filter((pool) => pool.isMain)[0]\n  const totalStaked = mggPool.totalStaked\n    ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals)\n    : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals)\n    : 0\n  const { stakingPrice, rewardPrice } = usePoolPrice(\n    mggPool.stakingToken.address[56],\n    mggPool.earningToken.address[56],\n    isFetchData,\n  )\n\n  const prevStakingPrice = usePrevious(stakingPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if (stakingPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (stakingPrice !== prevStakingPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevStakingPrice === stakingPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [stakingPrice, rewardPrice, setFetchData, prevStakingPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const tvr = useMemo(() => new BigNumber(totalStaked).times(stakingPrice).toFixed(4), [totalStaked, stakingPrice])\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG and other tokens by staking!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {' '}\n                  {totalStaked ? `${totalStaked} MGG` : <Oval width=\"20px\" height=\"20px\" />}{' '}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex\n            style={\n              isMobile\n                ? {\n                    fontSize: '150px',\n                    margin: 'auto',\n                    marginTop: '20px',\n                    marginBottom: '20px',\n                  }\n                : { fontSize: '240px', marginRight: '-118px' }\n            }\n          >\n            <SvgIcon\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\n              viewBox=\"0  0 384 512\"\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\n              fontSize=\"inherit\"\n            />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools  \n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}
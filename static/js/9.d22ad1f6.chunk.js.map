{"version":3,"sources":["utils/index.ts","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","../node_modules/react-feather/dist/icons/chevron-down.js","../node_modules/react-feather/dist/icons/chevron-up.js","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/components/assets/farm-dark.svg","views/Pools/components/assets/farm-light.svg","views/Pools/index.tsx","components/Balance.tsx","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_createBaseEach.js","hooks/usePersistState.ts","utils/getTimePeriods.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseMap.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","../node_modules/lodash/partition.js"],"names":["getBscScanLink","data","type","chainId","ChainId","MAINNET","BASE_BSC_SCAN_URLS","StyledCard","keyframes","styled","div","props","theme","colors","MGG_active","MGG_container","isFinished","mediaQueries","sm","StyledCardInner","card","background","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","getAddress","tokens","cake","address","primarySrc","secondarySrc","Wrapper","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useTranslation","t","symbol","useContext","ThemeContext","alignItems","justifyContent","flexDirection","style","textAlign","color","size","width","height","TokenPairImage","primaryToken","secondaryToken","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","bold","mt","as","external","href","BASE_EXCHANGE_URL","variant","ml","onClick","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ChevronDown","forwardRef","_ref","ref","_ref$color","_ref$size","rest","React","createElement","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","PropTypes","string","oneOfType","number","displayName","ChevronUp","ViewMode","ModalBody","Flex","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","sousId","userData","stakingLimit","stakingTokenContract","useRef","useERC20","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","getBalanceNumber","BigNumber","decimals","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","useEffect","fullDecimalStakeAmount","plus","balance","gte","handleConfirmClick","a","fontSize","mb","maxstake","getFullDisplayBalance","tokensymbol","ModalInput","value","onSelectMax","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","onChange","e","input","convertedInput","percentage","Math","floor","min","handleStakeInputChange","currentTarget","max","addLiquidityUrl","toFixed","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","console","log","onReward","useSousHarvest","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","error","handleUnstake","className","window","open","isDepositDisabled","border","borderTop","primary","onMouseEnter","onMouseLeave","eq","position","isWithdrawDisabled","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","harvest","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","textTransform","StakeActions","ClaimAction","margin","MGG_accent2","pr","borderRadius","PoolCard","account","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","usePoolPrice","stakingPrice","rewardPrice","getPoolApr","UnlockButton","DetailsSection","stakingAddress","getBscScanAddressUrl","lpInfoAddress","AprRow","performanceFee","apr","tooltipContent","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","process","ApyCalculatorModal","tokenPrice","linkLabel","linkHref","earningTokenSymbol","onPresentApyModal","Balance","isDisabled","unit","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","useWeb3React","withdrawalFee","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","dispatch","useAppDispatch","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","src","alt","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","step","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","prefix","mr","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","xl","collapseAnimation","css","lg","Box","textDisabled","_defs","_g","SvgFarmDark","svgRef","titleId","xmlnsXlink","id","x","y","filterUnits","dy","stdDeviation","result","floodOpacity","operator","in2","in","transform","filter","d","rx","cx","cy","r","opacity","ForwardRef","SvgFarmLight","CardLayout","FlexLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","usePersistState","localStorageKey","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","maxWidth","accountHasVaultShares","useMemo","cakePool","map","partition","openPools","finishedPools","stakedOnlyFinishedPools","stakedOnlyOpenPools","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","current","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","latinise","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","mggPool","path","url","isExact","PageHeader","minHeight","padding","flex","borderBottom","SvgIcon","component","isDark","FarmsDarkLogo","FarmsLightLogo","Page","previousValue","start","end","duration","separator","baseForOwn","require","baseEach","createBaseEach","module","exports","baseFor","object","iteratee","isArrayLike","eachFunc","fromRight","collection","index","iterable","defaultOptions","hydrate","identity","dehydrate","initialValue","userOptions","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","abs","timeLeft","years","months","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","_token1Address","_token2Address","LPPrice","setLPPrice","API_SUMMARY","summary","pairLiquidity","API_LIQUIDITY","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","token","wbnb","iconExtension","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","exit","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","baseOrderBy","isArray","iteratees","orders","guard","undefined","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","other","Array","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","useClaim","claim","handleHarvest","soushHarvestBnb","soushHarvest","ActionContainer","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","freq","CoreTag","outline","startIcon","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","Latinise","latin_map","τ","Τ","replace","StyledHr","textSubtle","ModalHr","hr","StyledLinkExternal","LinkExternal","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","arrayAggregator","baseAggregator","setter","initializer","func","accumulator","Outer","modal","Inner","Container","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","isBalanceZero","pattern","inputMode","placeholder","createAggregator","push"],"mappings":"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","file":"static/js/9.d22ad1f6.chunk.js","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId, CurrencyAmount, JSBI, Percent } from '@pancakeswap-libs/sdk'\nimport { BASE_BSC_SCAN_URLS } from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getBscScanLink(\n  data: string | number,\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n  chainId: ChainId = ChainId.MAINNET,\n): string {\n  switch (type) {\n    case 'transaction': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\n    }\n    case 'token': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\n    }\n    case 'block': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\n    }\n    case 'countdown': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\n    }\n    default: {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\npadding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n/*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext);\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\n          <Heading color='text' size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br/>\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronDown = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"6 9 12 15 18 9\"\n  }));\n});\nChevronDown.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronDown.displayName = 'ChevronDown';\nexport default ChevronDown;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronUp = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"18 15 12 9 6 15\"\n  }));\n});\nChevronUp.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronUp.displayName = 'ChevronUp';\nexport default ChevronUp;","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button} from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null);\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance);\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals) : BIG_ZERO\n  const totalAllowance = useTokenAllowance(stakingToken.address[56], pool.contractAddress[56])\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(stakingTokenContract, sousId, earningToken.symbol, getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals))\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [requestedApproval, stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, totalAllowance, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center'}}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {handleChangePercent(100)}}\n          onChange={e => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=''\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n\n        <div>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\n          {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n          Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n        </Text>\n        </div>\n\n\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\"  marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{width: '100%'}}>\n        <Button\n          isLoading={pendingTx}\n          // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          // onClick={handleApproveClick}\n          // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n          onClick={handleApprove}\n          disabled={!stakeAmount || isApproved}\n          mt=\"24px\"\n          fullWidth\n          marginRight=\"20px\"\n        >\n         Approve\n        </Button>\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n          // disabled={!approvedTx}\n          mt=\"24px\"\n          fullWidth\n          marginLeft=\"20px\"\n        >\n          {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n          {t('Deposit')}\n        </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\n\nimport StakeTokenModal from './Stake'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n                                                 isBnbPool,\n                                                 pool,\n                                                 stakingTokenBalance,\n                                                 stakingTokenPrice,\n                                                 addTokenUrl,\n                                                 isRemovingStake = false,\n                                                 onDismiss,\n                                               }) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  console.log(isAddTokenDisabled ?? false)\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(pool.earningToken.address[56])\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : 0\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(<StakeTokenModal isBnbPool={isBnbPool} pool={pool}\n                                                           stakingTokenBalance={stakingTokenBalance}\n                                                           stakingTokenPrice={stakingTokenPrice} />)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18), stakingToken.decimals)\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n\n  return (\n    <Modal\n      title=''\n      onDismiss={onDismiss}\n    >\n      <Flex flexDirection='column' style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize='20px' marginBottom='10px' marginLeft='10px'>Account Info</Text>\n        <Text fontSize='15px' marginLeft='10px'>Staking, balances & earnings</Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop='21px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Tokens</Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className='disabled'\n              onClick={() => {\n                window.open(`https://sparkswap.finance/#/swap/${pool.stakingToken.address[56]}`, '_blank')\n              }}\n            >Add More</Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol &&\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarningTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.earningToken.symbol} Tokens</Text>\n            <Button\n              fullWidth\n              onClick={() => {\n                window.open(`https://sparkswap.finance/#/swap/${pool.earningToken.address[56]}`, '_blank')\n              }}>Add More</Button>\n          </Flex>\n          }\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Staked</Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>Stake Tokens</Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop='30px' marginBottom='20px'>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color='textSubtle' fontSize='17px'>Your Rate {pool.earningToken.symbol}/block</Text>\n          </Flex>\n          <Flex flexDirection='column'>\n            <Text fontSize='24px'>{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color='textSubtle' fontSize='17px'>{pool.earningToken.symbol} Token Earnings</Text>\n          </Flex>\n          <Flex flexDirection='column' mb='16px' marginLeft='5px'\n                onMouseEnter={() => setActiveSelect(true)}\n                onMouseLeave={() => setActiveSelect(false)}>\n\n            {userData.stakedBalance.eq(0) ? <Button disabled fullWidth> Withdraw </Button> : <Dropdown\n              position='top'\n              target={\n                // Disable component if total staked tokens is empty\n                <Button fullWidth variant='secondary' disabled={pool.isWithdrawDisabled}>\n                  <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                </Button>\n              }\n            >\n              {/* Disable Claim & Withdraw if no staked tokens */}\n              <Button type='button' disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                Claim\n              </Button>\n              <Button type='button' disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                Claim & Withdraw\n              </Button>\n            </Dropdown>\n\n            }\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && < Text className='yellow' fontSize='15px' marginLeft='10px'>SRKb and SFUEL Withdrawals and Deposits are\n          locked for 48 hours during launchpad</Text>}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={ onPresentStake }>\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake' }\n      </Button>\n    )\n  }\n\n  return <Flex justifyContent=\"space-between\" alignItems=\"center\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\" >\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalStaked,2,5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                   {!isComingSoon && formatNumber(totalEarned,2,5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n          <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n             <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n             {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n          </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext } from 'react';\nimport { Flex, Text, Button } from '@metagg/mgg-uikit';\nimport { ThemeContext } from 'styled-components';\nimport Balance from 'components/Balance'\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from '../../../Farms/components/FarmTable/Actions/styles';\n\n\nconst ClaimAction: React.FC = () => {\n    const theme = useContext(ThemeContext)\n    return (\n        <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\n          test\n        </Text>\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>123</Earned>\n        </div>\n        <Button\n          style={{borderRadius: '3px', height: '40px'}}\n\n          ml='4px'\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n    )\n}\n\nexport default ClaimAction","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { ThemeContext } from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData, startBlock, endBlock, isComingSoon } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n          <ClaimAction />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection \n            stakingAddress={getBscScanAddressUrl(\"test\")}\n            lpInfoAddress=\"\"\n        />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport {Box,CardBody} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","var _defs, _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgFarmDark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 639.926,\n    height: 504.803,\n    viewBox: \"0 0 639.926 504.803\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Path_1144\",\n    x: 3.261,\n    y: 426.601,\n    width: 80.314,\n    height: 78.202,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Path_1145\",\n    x: 263.088,\n    y: 423.447,\n    width: 80.314,\n    height: 78.202,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur-2\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur-2\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Rectangle_258\",\n    x: 0,\n    y: 77.904,\n    width: 366.565,\n    height: 397.628,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur-3\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur-3\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    \"data-name\": \"Layer 2\",\n    transform: \"translate(18 102.56)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_3\",\n    \"data-name\": \"Layer 3\",\n    transform: \"translate(0 -102.56)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Path_1144)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1144-2\",\n    \"data-name\": \"Path 1144\",\n    d: \"M26.727,547.222H4.57v-42.2H48.884v19.039Z\",\n    transform: \"translate(16.69 -66.42)\",\n    fill: \"#054564\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Path_1145)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1145-2\",\n    \"data-name\": \"Path 1145\",\n    d: \"M390.837,542.8h22.157V500.6H368.68v19.039Z\",\n    transform: \"translate(-87.59 -65.15)\",\n    fill: \"#054564\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Rectangle_258)\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_258-2\",\n    \"data-name\": \"Rectangle 258\",\n    width: 330.565,\n    height: 361.628,\n    rx: 20.63,\n    transform: \"translate(18 89.9)\",\n    fill: \"#0b8ecf\"\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_259\",\n    \"data-name\": \"Rectangle 259\",\n    width: 281.042,\n    height: 300.037,\n    rx: 3.82,\n    transform: \"translate(24.762 120.695)\",\n    fill: \"#343738\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_27\",\n    \"data-name\": \"Ellipse 27\",\n    cx: 116.894,\n    cy: 116.894,\n    r: 116.894,\n    transform: \"translate(139.436 195.38)\",\n    fill: \"#f6d738\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_28\",\n    \"data-name\": \"Ellipse 28\",\n    cx: 99.204,\n    cy: 99.204,\n    r: 99.204,\n    transform: \"translate(157.126 213.07)\",\n    fill: \"#f3cc30\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1146\",\n    \"data-name\": \"Path 1146\",\n    d: \"M377.6,209.34A99.189,99.189,0,0,1,242.07,347.328,99.189,99.189,0,1,0,377.6,209.34Z\",\n    transform: \"translate(-69.33 18.266)\",\n    fill: \"#edbd31\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1147\",\n    \"data-name\": \"Path 1147\",\n    d: \"M241.945,301.673A87.565,87.565,0,0,1,398.935,248.3a87.579,87.579,0,1,0-145.352,97.049,87.186,87.186,0,0,1-11.639-43.672Z\",\n    transform: \"translate(-67.436 19.678)\",\n    fill: \"#f7db5e\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1148\",\n    \"data-name\": \"Path 1148\",\n    d: \"M354.494,238.26v12.659a26.719,26.719,0,0,1,12.445,5q4.831,3.775,9.22,11.674l-12.574,7.029Q357.912,264.3,348.756,264.3a13.558,13.558,0,0,0-9.412,3.354,10.783,10.783,0,0,0-3.746,8.385,10.326,10.326,0,0,0,3.033,7.607q2.969,2.961,12,7.029a119.771,119.771,0,0,1,12.895,6.672,34.324,34.324,0,0,1,7.671,6.03,26.981,26.981,0,0,1,7.293,19.024,30.463,30.463,0,0,1-6.579,19.338,31.8,31.8,0,0,1-17.412,11.225v13.344H343.212V353.363q-12.645-2.069-19.267-8.706t-9.8-20.5l14.172-2.969q2.9,9.8,7.093,13.994,4.389,4,11.674,4a16.477,16.477,0,0,0,11.867-4.581,15.464,15.464,0,0,0,4.7-11.667,13.751,13.751,0,0,0-3.932-10.254,36.221,36.221,0,0,0-5.9-4.224,100.756,100.756,0,0,0-9.99-5.124q-12.509-5.609-16.413-10.319a24.426,24.426,0,0,1-6.237-16.827,24.726,24.726,0,0,1,1.484-8.642,23.734,23.734,0,0,1,4.282-7.257,26.624,26.624,0,0,1,6.936-5.637,37.035,37.035,0,0,1,9.348-3.739V238.26Z\",\n    transform: \"translate(-89.972 9.983)\",\n    fill: \"#d49a34\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_29\",\n    \"data-name\": \"Ellipse 29\",\n    cx: 116.894,\n    cy: 116.894,\n    r: 116.894,\n    transform: \"translate(91.021 312.277) rotate(-45)\",\n    opacity: 0.12\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_30\",\n    \"data-name\": \"Ellipse 30\",\n    cx: 138.154,\n    cy: 138.154,\n    r: 138.154,\n    transform: \"translate(231.165 195.38) rotate(-45)\",\n    fill: \"#fdda00\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_31\",\n    \"data-name\": \"Ellipse 31\",\n    cx: 117.255,\n    cy: 117.255,\n    r: 117.255,\n    transform: \"translate(260.721 195.38) rotate(-45)\",\n    fill: \"#f3cc30\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1149\",\n    \"data-name\": \"Path 1149\",\n    d: \"M448.307,71.61A117.269,117.269,0,0,1,280.35,226.644,117.262,117.262,0,1,0,448.307,71.61Z\",\n    transform: \"translate(44.421 26.831)\",\n    fill: \"#edbd31\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1150\",\n    \"data-name\": \"Path 1150\",\n    d: \"M283.768,170.991A103.514,103.514,0,0,1,472.19,117.056,103.514,103.514,0,1,0,294.971,223.188a103.047,103.047,0,0,1-11.2-52.2Z\",\n    transform: \"translate(45.658 30.362)\",\n    fill: \"#f7db5e\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1151\",\n    \"data-name\": \"Path 1151\",\n    d: \"M425.4,103.589l-.731,14.884q8.91,1.9,14.4,6.664t10.209,14.309l-15.25,7.571q-6.089-12.516-16.914-13.044a16.142,16.142,0,0,0-11.305,3.383,12.733,12.733,0,0,0-4.9,9.675,12.178,12.178,0,0,0,3.139,9.228q3.329,3.674,13.748,8.992a140.569,140.569,0,0,1,14.837,8.626,40.675,40.675,0,0,1,8.714,7.564,32.056,32.056,0,0,1,7.5,22.881,35.993,35.993,0,0,1-8.89,22.448,37.482,37.482,0,0,1-21.21,12.219l-.771,15.757-13.322-.677.751-15.257q-14.8-3.173-22.252-11.4T372.76,202.644l16.914-2.706q2.862,11.732,7.564,16.914,4.946,4.973,13.531,5.413a19.436,19.436,0,0,0,14.269-4.736A18.143,18.143,0,0,0,431.276,204q.365-7.53-4.059-12.327a43.069,43.069,0,0,0-6.718-5.331,120.615,120.615,0,0,0-11.461-6.63q-14.445-7.347-18.815-13.132a30.506,30.506,0,0,1-4.154-30.344,27.921,27.921,0,0,1,5.48-8.315,31.675,31.675,0,0,1,8.511-6.258,43.86,43.86,0,0,1,11.285-3.775L412.075,103Z\",\n    transform: \"translate(14.532 16.678)\",\n    fill: \"#d49a34\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1152\",\n    \"data-name\": \"Path 1152\",\n    d: \"M276.65,384.948,38.788,342.282c-1.049-.186-1.9-1.6-1.9-3.154V45.841c0-1.556.849-2.969,1.9-3.154L276.65.043c1.734-.307,3.147,1.063,3.147,3.076V381.872C279.8,383.913,278.384,385.255,276.65,384.948Z\",\n    transform: \"translate(-10.566 78.222)\",\n    fill: \"#10cdf9\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1153\",\n    \"data-name\": \"Path 1153\",\n    d: \"M234.968,237.947c0,46.648-29.857,81.97-64.338,79.08-32.112-2.69-56.631-38.02-56.631-79.08s24.49-76.354,56.631-79.073C205.112,155.984,234.968,191.3,234.968,237.947Z\",\n    transform: \"translate(-32.65 32.767)\",\n    fill: \"#09618d\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1154\",\n    \"data-name\": \"Path 1154\",\n    d: \"M224.37,245.287c0,35.359-22.443,62.575-48.767,60.884-24.976-1.613-44.243-28.829-44.243-60.884s19.267-59.271,44.243-60.877C201.927,182.719,224.37,209.935,224.37,245.287Z\",\n    transform: \"translate(-37.622 25.427)\",\n    fill: \"#0b8ecf\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1155\",\n    \"data-name\": \"Path 1155\",\n    d: \"M203.456,261.211c0,11.96-7.457,21.486-16.491,21.279-8.87-.2-15.935-9.726-15.935-21.279s7.065-21.072,15.935-21.272C195.984,239.732,203.456,249.258,203.456,261.211Z\",\n    transform: \"translate(-48.984 9.503)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1156\",\n    \"data-name\": \"Path 1156\",\n    d: \"M200.951,250.87a26.217,26.217,0,0,1,2.276,10.861c0,11.946-7.436,21.479-16.448,21.3-5.081-.1-9.562-3.275-12.459-8.121,2.74,6.272,7.85,10.583,13.8,10.7,9.041.2,16.5-9.327,16.5-21.286A25.525,25.525,0,0,0,200.951,250.87Z\",\n    transform: \"translate(-49.926 6.371)\",\n    fill: \"#fff\",\n    opacity: 0.11\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1157\",\n    \"data-name\": \"Path 1157\",\n    d: \"M194.325,347.5V333.977c0-1.862-2.205-1.97-2.205-.107v13.494C192.12,349.22,194.325,349.37,194.325,347.5Z\",\n    transform: \"translate(-55.024 -17.015)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1158\",\n    \"data-name\": \"Path 1158\",\n    d: \"M194.325,198.981V185.466c0-1.862-2.205-1.727-2.205.136V199.1C192.12,200.951,194.325,200.851,194.325,198.981Z\",\n    transform: \"translate(-55.024 25.485)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1159\",\n    \"data-name\": \"Path 1159\",\n    d: \"M132.194,271.35l9.462-.05c1.32,0,1.306-2.8,0-2.79l-9.462.078c-1.284,0-1.277,2.762,0,2.762Z\",\n    transform: \"translate(-37.586 1.319)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1160\",\n    \"data-name\": \"Path 1160\",\n    d: \"M244.119,270.7l11.218-.057c1.57,0,1.563-3.054,0-3.04l-11.225.093c-1.527,0-1.52,3.011,0,3Z\",\n    transform: \"translate(-69.588 1.58)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1161\",\n    \"data-name\": \"Path 1161\",\n    d: \"M151.077,325.4l6.715-9.205c.935-1.277-.578-3.283-1.513-2.005l-6.694,9.205C148.672,324.654,150.156,326.659,151.077,325.4Z\",\n    transform: \"translate(-42.76 -11.645)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1162\",\n    \"data-name\": \"Path 1162\",\n    d: \"M228.707,218.391,236.263,208c1.056-1.427-.656-3.432-1.705-1.991l-7.528,10.354c-1.035,1.427.642,3.411,1.677,2Z\",\n    transform: \"translate(-64.93 19.362)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1163\",\n    \"data-name\": \"Path 1163\",\n    d: \"M151.818,209.126l6.344,9.683c.885,1.342,2.476-.557,1.591-1.905l-6.365-9.683c-.871-1.32-2.44.585-1.57,1.905Z\",\n    transform: \"translate(-43.409 19.001)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1164\",\n    \"data-name\": \"Path 1164\",\n    d: \"M225.025,320.743l7.136,10.818c.985,1.506,2.769-.357,1.777-1.862L226.8,318.874c-.97-1.477-2.726.392-1.755,1.87Z\",\n    transform: \"translate(-64.374 -12.951)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1165\",\n    \"data-name\": \"Path 1165\",\n    d: \"M326,310.7h-.114c-2.276-.15-4.11-2.455-4.11-5.159v-120c0-2.7,1.834-5,4.11-5.145H326c2.284-.143,4.146,1.955,4.146,4.681V305.987C330.15,308.713,328.288,310.8,326,310.7Z\",\n    transform: \"translate(-92.16 26.56)\",\n    fill: \"#93e8fc\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1166\",\n    \"data-name\": \"Path 1166\",\n    d: \"M372.88.06H379a1.427,1.427,0,0,1,1.427,1.427V383.559A1.427,1.427,0,0,1,379,384.986H372.88Z\",\n    transform: \"translate(-106.795 78.205)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1167\",\n    \"data-name\": \"Path 1167\",\n    d: \"M44.462,156.463v-20.1a9.391,9.391,0,0,0-18.782,0v20.1Z\",\n    transform: \"translate(-7.355 41.857)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1168\",\n    \"data-name\": \"Path 1168\",\n    d: \"M25.66,172v20.1a9.391,9.391,0,1,0,18.782,0V172Z\",\n    transform: \"translate(-7.349 28.96)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1169\",\n    \"data-name\": \"Path 1169\",\n    d: \"M41.109,346.814v-20.1a9.4,9.4,0,0,0-18.789,0v20.1Z\",\n    transform: \"translate(-6.393 -12.733)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1170\",\n    \"data-name\": \"Path 1170\",\n    d: \"M22.32,362.24v20.1a9.4,9.4,0,0,0,18.789,0v-20.1Z\",\n    transform: \"translate(-6.393 -25.526)\",\n    fill: \"#798e91\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgFarmDark);\nexport default __webpack_public_path__ + \"static/media/farm-dark.26f6af59.svg\";\nexport { ForwardRef as ReactComponent };","var _defs, _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgFarmLight(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 639.926,\n    height: 504.803,\n    viewBox: \"0 0 639.926 504.803\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Path_1144\",\n    x: 3.261,\n    y: 426.601,\n    width: 80.314,\n    height: 78.202,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Path_1145\",\n    x: 263.088,\n    y: 423.447,\n    width: 80.314,\n    height: 78.202,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur-2\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur-2\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Rectangle_258\",\n    x: 0,\n    y: 77.904,\n    width: 366.565,\n    height: 397.628,\n    filterUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 6,\n    input: \"SourceAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6,\n    result: \"blur-3\"\n  }), /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0.2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur-3\"\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in: \"SourceGraphic\"\n  })))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    \"data-name\": \"Layer 2\",\n    transform: \"translate(18 102.56)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_3\",\n    \"data-name\": \"Layer 3\",\n    transform: \"translate(0 -102.56)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Path_1144)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1144-2\",\n    \"data-name\": \"Path 1144\",\n    d: \"M26.727,547.222H4.57v-42.2H48.884v19.039Z\",\n    transform: \"translate(16.69 -66.42)\",\n    fill: \"#054564\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Path_1145)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1145-2\",\n    \"data-name\": \"Path 1145\",\n    d: \"M390.837,542.8h22.157V500.6H368.68v19.039Z\",\n    transform: \"translate(-87.59 -65.15)\",\n    fill: \"#054564\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -18, 0)\",\n    filter: \"url(#Rectangle_258)\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_258-2\",\n    \"data-name\": \"Rectangle 258\",\n    width: 330.565,\n    height: 361.628,\n    rx: 20.63,\n    transform: \"translate(18 89.9)\",\n    fill: \"#0b8ecf\"\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_259\",\n    \"data-name\": \"Rectangle 259\",\n    width: 281.042,\n    height: 300.037,\n    rx: 3.82,\n    transform: \"translate(24.762 120.695)\",\n    fill: \"#343738\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_27\",\n    \"data-name\": \"Ellipse 27\",\n    cx: 116.894,\n    cy: 116.894,\n    r: 116.894,\n    transform: \"translate(139.436 195.38)\",\n    fill: \"#f6d738\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_28\",\n    \"data-name\": \"Ellipse 28\",\n    cx: 99.204,\n    cy: 99.204,\n    r: 99.204,\n    transform: \"translate(157.126 213.07)\",\n    fill: \"#f3cc30\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1146\",\n    \"data-name\": \"Path 1146\",\n    d: \"M377.6,209.34A99.189,99.189,0,0,1,242.07,347.328,99.189,99.189,0,1,0,377.6,209.34Z\",\n    transform: \"translate(-69.33 18.266)\",\n    fill: \"#edbd31\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1147\",\n    \"data-name\": \"Path 1147\",\n    d: \"M241.945,301.673A87.565,87.565,0,0,1,398.935,248.3a87.579,87.579,0,1,0-145.352,97.049,87.186,87.186,0,0,1-11.639-43.672Z\",\n    transform: \"translate(-67.436 19.678)\",\n    fill: \"#f7db5e\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1148\",\n    \"data-name\": \"Path 1148\",\n    d: \"M354.494,238.26v12.659a26.719,26.719,0,0,1,12.445,5q4.831,3.775,9.22,11.674l-12.574,7.029Q357.912,264.3,348.756,264.3a13.558,13.558,0,0,0-9.412,3.354,10.783,10.783,0,0,0-3.746,8.385,10.326,10.326,0,0,0,3.033,7.607q2.969,2.961,12,7.029a119.771,119.771,0,0,1,12.895,6.672,34.324,34.324,0,0,1,7.671,6.03,26.981,26.981,0,0,1,7.293,19.024,30.463,30.463,0,0,1-6.579,19.338,31.8,31.8,0,0,1-17.412,11.225v13.344H343.212V353.363q-12.645-2.069-19.267-8.706t-9.8-20.5l14.172-2.969q2.9,9.8,7.093,13.994,4.389,4,11.674,4a16.477,16.477,0,0,0,11.867-4.581,15.464,15.464,0,0,0,4.7-11.667,13.751,13.751,0,0,0-3.932-10.254,36.221,36.221,0,0,0-5.9-4.224,100.756,100.756,0,0,0-9.99-5.124q-12.509-5.609-16.413-10.319a24.426,24.426,0,0,1-6.237-16.827,24.726,24.726,0,0,1,1.484-8.642,23.734,23.734,0,0,1,4.282-7.257,26.624,26.624,0,0,1,6.936-5.637,37.035,37.035,0,0,1,9.348-3.739V238.26Z\",\n    transform: \"translate(-89.972 9.983)\",\n    fill: \"#d49a34\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_29\",\n    \"data-name\": \"Ellipse 29\",\n    cx: 116.894,\n    cy: 116.894,\n    r: 116.894,\n    transform: \"translate(91.021 312.277) rotate(-45)\",\n    opacity: 0.12\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_30\",\n    \"data-name\": \"Ellipse 30\",\n    cx: 138.154,\n    cy: 138.154,\n    r: 138.154,\n    transform: \"translate(231.165 195.38) rotate(-45)\",\n    fill: \"#fdda00\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_31\",\n    \"data-name\": \"Ellipse 31\",\n    cx: 117.255,\n    cy: 117.255,\n    r: 117.255,\n    transform: \"translate(260.721 195.38) rotate(-45)\",\n    fill: \"#f3cc30\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1149\",\n    \"data-name\": \"Path 1149\",\n    d: \"M448.307,71.61A117.269,117.269,0,0,1,280.35,226.644,117.262,117.262,0,1,0,448.307,71.61Z\",\n    transform: \"translate(44.421 26.831)\",\n    fill: \"#edbd31\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1150\",\n    \"data-name\": \"Path 1150\",\n    d: \"M283.768,170.991A103.514,103.514,0,0,1,472.19,117.056,103.514,103.514,0,1,0,294.971,223.188a103.047,103.047,0,0,1-11.2-52.2Z\",\n    transform: \"translate(45.658 30.362)\",\n    fill: \"#f7db5e\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1151\",\n    \"data-name\": \"Path 1151\",\n    d: \"M425.4,103.589l-.731,14.884q8.91,1.9,14.4,6.664t10.209,14.309l-15.25,7.571q-6.089-12.516-16.914-13.044a16.142,16.142,0,0,0-11.305,3.383,12.733,12.733,0,0,0-4.9,9.675,12.178,12.178,0,0,0,3.139,9.228q3.329,3.674,13.748,8.992a140.569,140.569,0,0,1,14.837,8.626,40.675,40.675,0,0,1,8.714,7.564,32.056,32.056,0,0,1,7.5,22.881,35.993,35.993,0,0,1-8.89,22.448,37.482,37.482,0,0,1-21.21,12.219l-.771,15.757-13.322-.677.751-15.257q-14.8-3.173-22.252-11.4T372.76,202.644l16.914-2.706q2.862,11.732,7.564,16.914,4.946,4.973,13.531,5.413a19.436,19.436,0,0,0,14.269-4.736A18.143,18.143,0,0,0,431.276,204q.365-7.53-4.059-12.327a43.069,43.069,0,0,0-6.718-5.331,120.615,120.615,0,0,0-11.461-6.63q-14.445-7.347-18.815-13.132a30.506,30.506,0,0,1-4.154-30.344,27.921,27.921,0,0,1,5.48-8.315,31.675,31.675,0,0,1,8.511-6.258,43.86,43.86,0,0,1,11.285-3.775L412.075,103Z\",\n    transform: \"translate(14.532 16.678)\",\n    fill: \"#d49a34\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1152\",\n    \"data-name\": \"Path 1152\",\n    d: \"M276.65,384.948,38.788,342.282c-1.049-.186-1.9-1.6-1.9-3.154V45.841c0-1.556.849-2.969,1.9-3.154L276.65.043c1.734-.307,3.147,1.063,3.147,3.076V381.872C279.8,383.913,278.384,385.255,276.65,384.948Z\",\n    transform: \"translate(-10.566 78.222)\",\n    fill: \"#10cdf9\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1153\",\n    \"data-name\": \"Path 1153\",\n    d: \"M234.968,237.947c0,46.648-29.857,81.97-64.338,79.08-32.112-2.69-56.631-38.02-56.631-79.08s24.49-76.354,56.631-79.073C205.112,155.984,234.968,191.3,234.968,237.947Z\",\n    transform: \"translate(-32.65 32.767)\",\n    fill: \"#09618d\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1154\",\n    \"data-name\": \"Path 1154\",\n    d: \"M224.37,245.287c0,35.359-22.443,62.575-48.767,60.884-24.976-1.613-44.243-28.829-44.243-60.884s19.267-59.271,44.243-60.877C201.927,182.719,224.37,209.935,224.37,245.287Z\",\n    transform: \"translate(-37.622 25.427)\",\n    fill: \"#0b8ecf\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1155\",\n    \"data-name\": \"Path 1155\",\n    d: \"M203.456,261.211c0,11.96-7.457,21.486-16.491,21.279-8.87-.2-15.935-9.726-15.935-21.279s7.065-21.072,15.935-21.272C195.984,239.732,203.456,249.258,203.456,261.211Z\",\n    transform: \"translate(-48.984 9.503)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1156\",\n    \"data-name\": \"Path 1156\",\n    d: \"M200.951,250.87a26.217,26.217,0,0,1,2.276,10.861c0,11.946-7.436,21.479-16.448,21.3-5.081-.1-9.562-3.275-12.459-8.121,2.74,6.272,7.85,10.583,13.8,10.7,9.041.2,16.5-9.327,16.5-21.286A25.525,25.525,0,0,0,200.951,250.87Z\",\n    transform: \"translate(-49.926 6.371)\",\n    fill: \"#fff\",\n    opacity: 0.11\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1157\",\n    \"data-name\": \"Path 1157\",\n    d: \"M194.325,347.5V333.977c0-1.862-2.205-1.97-2.205-.107v13.494C192.12,349.22,194.325,349.37,194.325,347.5Z\",\n    transform: \"translate(-55.024 -17.015)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1158\",\n    \"data-name\": \"Path 1158\",\n    d: \"M194.325,198.981V185.466c0-1.862-2.205-1.727-2.205.136V199.1C192.12,200.951,194.325,200.851,194.325,198.981Z\",\n    transform: \"translate(-55.024 25.485)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1159\",\n    \"data-name\": \"Path 1159\",\n    d: \"M132.194,271.35l9.462-.05c1.32,0,1.306-2.8,0-2.79l-9.462.078c-1.284,0-1.277,2.762,0,2.762Z\",\n    transform: \"translate(-37.586 1.319)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1160\",\n    \"data-name\": \"Path 1160\",\n    d: \"M244.119,270.7l11.218-.057c1.57,0,1.563-3.054,0-3.04l-11.225.093c-1.527,0-1.52,3.011,0,3Z\",\n    transform: \"translate(-69.588 1.58)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1161\",\n    \"data-name\": \"Path 1161\",\n    d: \"M151.077,325.4l6.715-9.205c.935-1.277-.578-3.283-1.513-2.005l-6.694,9.205C148.672,324.654,150.156,326.659,151.077,325.4Z\",\n    transform: \"translate(-42.76 -11.645)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1162\",\n    \"data-name\": \"Path 1162\",\n    d: \"M228.707,218.391,236.263,208c1.056-1.427-.656-3.432-1.705-1.991l-7.528,10.354c-1.035,1.427.642,3.411,1.677,2Z\",\n    transform: \"translate(-64.93 19.362)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1163\",\n    \"data-name\": \"Path 1163\",\n    d: \"M151.818,209.126l6.344,9.683c.885,1.342,2.476-.557,1.591-1.905l-6.365-9.683c-.871-1.32-2.44.585-1.57,1.905Z\",\n    transform: \"translate(-43.409 19.001)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1164\",\n    \"data-name\": \"Path 1164\",\n    d: \"M225.025,320.743l7.136,10.818c.985,1.506,2.769-.357,1.777-1.862L226.8,318.874c-.97-1.477-2.726.392-1.755,1.87Z\",\n    transform: \"translate(-64.374 -12.951)\",\n    fill: \"#054564\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1165\",\n    \"data-name\": \"Path 1165\",\n    d: \"M326,310.7h-.114c-2.276-.15-4.11-2.455-4.11-5.159v-120c0-2.7,1.834-5,4.11-5.145H326c2.284-.143,4.146,1.955,4.146,4.681V305.987C330.15,308.713,328.288,310.8,326,310.7Z\",\n    transform: \"translate(-92.16 26.56)\",\n    fill: \"#93e8fc\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1166\",\n    \"data-name\": \"Path 1166\",\n    d: \"M372.88.06H379a1.427,1.427,0,0,1,1.427,1.427V383.559A1.427,1.427,0,0,1,379,384.986H372.88Z\",\n    transform: \"translate(-106.795 78.205)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1167\",\n    \"data-name\": \"Path 1167\",\n    d: \"M44.462,156.463v-20.1a9.391,9.391,0,0,0-18.782,0v20.1Z\",\n    transform: \"translate(-7.355 41.857)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1168\",\n    \"data-name\": \"Path 1168\",\n    d: \"M25.66,172v20.1a9.391,9.391,0,1,0,18.782,0V172Z\",\n    transform: \"translate(-7.349 28.96)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1169\",\n    \"data-name\": \"Path 1169\",\n    d: \"M41.109,346.814v-20.1a9.4,9.4,0,0,0-18.789,0v20.1Z\",\n    transform: \"translate(-6.393 -12.733)\",\n    fill: \"#798e91\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1170\",\n    \"data-name\": \"Path 1170\",\n    d: \"M22.32,362.24v20.1a9.4,9.4,0,0,0,18.789,0v-20.1Z\",\n    transform: \"translate(-6.393 -25.526)\",\n    fill: \"#798e91\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgFarmLight);\nexport default __webpack_public_path__ + \"static/media/farm-light.26f6af59.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [openPools, finishedPools] = useMemo(() => partition(pools, (pool) => pool.sousId === 9), [pools])\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showUpcomingPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n\n  const mggPool = openPools[0]\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[56], mggPool.earningToken.address[56])\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  // const totalStaked = getBalanceAmount(new BigNumber(mggPool.totalStaked ?? 0)).toFormat(4)\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Stake tokens and earn!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked} MGG</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total value Locked\n                </Text>\n                <Text fontSize=\"20px\">- USD</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} % </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          <Flex\n            style={\n              isMobile\n                ? {\n                    fontSize: '150px',\n                    margin: 'auto',\n                    marginTop: '20px',\n                    marginBottom: '20px',\n                  }\n                : { fontSize: '240px', marginRight: '-118px' }\n            }\n          >\n            <SvgIcon\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\n              viewBox=\"0  0 384 512\"\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\n              fontSize=\"inherit\"\n            />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools  \n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\n    const [stakingPrice, setStakingPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _stakingTokenAddress\n    let _rewardTokenAddress\n    try{\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\n            assets = await assets.json();\n            const lastPrice = \"last_price\"\n            \n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\n\n    return {stakingPrice, rewardPrice}\n}\n\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string) => {\n    const [LPPrice, setLPPrice] = useState(0)\n    const [rewardPrice, setRewardPrice] = useState(0)\n\n    const web3 = useWeb3()\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    try{\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    }\n    catch{\n        console.error('Invalid staking and reward address')\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\n            assets = await assets.json()\n            let summary = await fetch(SPARKSWAP_API.concat(API_SUMMARY))\n            summary = await summary.json()\n\n            let pairLiquidity\n\n            if(Object.prototype.hasOwnProperty.call(summary, _token1Address.concat(\"_\",_token2Address))){\n                pairLiquidity = summary[_token1Address.concat(\"_\",_token2Address)][API_LIQUIDITY];\n            }\n            else{\n                pairLiquidity = summary[_token2Address.concat(\"_\",_token1Address)][API_LIQUIDITY];\n            }\n\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\n            setRewardPrice(assets[_rewardTokenAddress][API_LASTPRICE])\n        } catch (error) {\n          console.error('Unable to fetch data:', error)\n        }\n      }\n  \n      fetchData()\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress])\n\n    return {LPPrice, rewardPrice}\n}\n\nexport default usePoolPrice","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  stakingAddress,\n  lpInfoAddress,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n    // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n                                                 max,\n                                                 // symbol,\n                                                 onChange,\n                                                 onSelectMax,\n                                                 value,\n                                                 // addLiquidityUrl,\n                                                 // inputTitle,\n                                                 decimals = 18,\n                                               }) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems='flex-end' justifyContent='space-around'>\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode='decimal'\n            step='any'\n            min='0'\n            onChange={onChange}\n            placeholder='0'\n            value={value}\n          />\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n\n\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n"],"sourceRoot":""}
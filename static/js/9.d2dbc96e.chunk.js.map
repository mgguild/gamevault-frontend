{"version":3,"sources":["hooks/useContract.ts","components/UnlockButton.tsx","utils/callHelpers.ts","components/Balance.tsx","hooks/useWeb3.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","utils/bscscan.ts","hooks/useTokenBalance.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","hooks/chainHelpers.ts","hooks/price.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIgoContract","getIgoContract","useVestingContract","getVestingContract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","UnlockButton","props","customTitle","useTranslation","t","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveContract","tokenContract","spender","buyBox","inoContract","rarity","amount","buy","value","getDecimalAmount","buyIgo","igoContract","buyTokens","toString","claimVesting","vestingContract","claimAll","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","Balance","color","isDisabled","unit","prefix","previousValue","useRef","useEffect","current","start","end","duration","separator","library","useWeb3React","refEth","useState","Web3","web3NoAccount","setweb3","useApprove","contractAddress","onApprove","useCallback","useApproveGuildpad","tokenContractAddress","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useLotteryApprove","lotteryContract","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","customAccount","chainId","chain","MAINNET_CHAIN_ID","acct","getWeb3NoAccount","balanceOf","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","token","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","isUsingBnb","handleStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","info","useExit","stakingContract","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserPendingReward","useUnstake","useClaim","onReward","useSousHarvest","handleHarvest","ActionContainer","div","theme","colors","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","onDismiss","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","textTransform","mb","mr","ml","num","getRoi","amountEarned","amountInvested","toFixed","style","maxWidth","justifyContent","textAlign","freq","toLocaleString","mt","fee","href","CoreTag","variant","outline","startIcon","width","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","useChainFinder","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","getTokenPrice","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","lpAddress","_token1Address","_token2Address","_lpAddress","LPPrice","setLPPrice","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","getBalanceNumber","Number","_totalToken2InPool","FlexLayout","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledHr","textSubtle","primary","ModalHr","hr","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","position","margin","alignItems","pattern","inputMode","step","min","placeholder","size","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","pairToken","flexDirection","split","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","staked","earnings","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","marginTop","quoteToken","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","lpAddresses","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","HarvestAction","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","MGG_accent2","pr","borderRadius","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalDeposits","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","ApyButton","onPresentApyModal","event","stopPropagation","scale","AprWrapper","Apr","quoteTokenAddress","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","undefined","IconButtonWrapper","Staked","lpPrice","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","boxShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InfoBox","Text","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","viewMode","sortOption","isArchived","isInactive","useMedia","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","farmV2Apr","getFarmV2Apr","rewardRate","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Infinity","Page","TABLE","length","sort","b","paddingTop","exact","renderContent"],"mappings":"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","file":"static/js/9.d2dbc96e.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n  getInoContract,\n  getIgoContract,\n  getVestingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIgoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIgoContract(address, web3), [address, web3])\n}\n\nexport const useVestingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getVestingContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\nimport { useERC20 } from '../hooks/useContract'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveContract = async (tokenContract: Contract, spender: string, account) => {\n  return tokenContract.methods.approve(spender, ethers.constants.MaxUint256).send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods.buy(rarity).send({ from: account, value: getDecimalAmount(amount) })\n}\n\nexport const buyIgo = async (igoContract, account, amount) => {\n  return igoContract.methods.buyTokens(getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const claimVesting = async (vestingContract, account) => {\n  return vestingContract.methods.claimAll().send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods.approve(masterChefContract.options.address, amount).send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveContract, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useERC20, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Guildpad\nexport const useApproveGuildpad = (tokenContractAddress: string, contractAddress: string) => {\n  const { account } = useWeb3React()\n  const tokenContract = useERC20(tokenContractAddress)\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approveContract(tokenContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    stakingAmount,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getExplorerAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getExplorerTransactionUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\nimport { MAINNET_CHAIN_ID } from '../config'\nimport { getWeb3NoAccount } from '../utils/web3'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = '0x0000') => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  let acct = account\n  const { fastRefresh } = useRefresh()\n  if (customAccount !== '0x0000') {\n    acct = customAccount\n  }\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, getWeb3NoAccount(chain))\n      try {\n        const res = await contract.methods.balanceOf(acct).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (acct) {\n      fetchBalance()\n    }\n  }, [acct, chain, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt=\"logo-img\" />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt=\"logo-img\" />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract ?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (\n  lpTotalSupply: number,\n  token1Address: string,\n  token2Address: string,\n  rewardTokenAddress: string,\n  lpAddress: string,\n  isFetchData?: boolean,\n) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n  let _token1Address\n  let _token2Address\n  let _rewardTokenAddress\n  let _lpAddress\n  try {\n    _token1Address = web3.utils.toChecksumAddress(token1Address)\n    _token2Address = web3.utils.toChecksumAddress(token2Address)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n    _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    isFetchData,\n    setLPPrice,\n    setRewardPrice,\n    lpTotalSupply,\n    _token1Address,\n    _token2Address,\n    _rewardTokenAddress,\n    _lpAddress,\n    chainName,\n    MoralisWeb3Api,\n  ])\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ stakingAddress, lpInfoAddress }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      {lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) =>\n    theme.isDark ? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart =\n    !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?: string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\n  border-bottom: 5px solid ${({ theme }) => theme.colors.MGG_active};\n  padding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading mb=\"4px\" style={{ textAlign: 'left' }} size=\"lg\">\n          Stake <br /> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}\n        </Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color=\"inherit\" />\n    </Box>\n  )\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any\n  staked?: any\n  earnings?: any\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({\n  farm,\n  staked,\n  earnings,\n  onConfirm,\n  onDismiss,\n  max,\n  tokenName = '',\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          {earnings} {farm.quoteToken.symbol}\n        </Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize=\"28px\" bold>\n          {staked} {farm.lpSymbol}\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button\n          disabled={pendingTx}\n          fullWidth\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\nconst Container = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n  height: auto;\n`\n\nconst DetailsCont = styled.div`\n  width: 30%;\n  height: auto;\n  overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n  margin: 15px 0px;\n  padding: 10px;\n`\nconst ModalFooter = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit'\n\nconst Container = styled.div`\n  margin-top: -30px;\n  display: flex;\n  flex-direction: column;\n  min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n  padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n  flex: 1;\n  margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n  flex: 1;\n  margin-left: 10px;\n`\n\nexport { StyledFlex, CancelButton, DepositButton }\nexport default Container\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface StakeModalInterface {\n  pid: number\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({\n  pid,\n  onDismiss,\n  max,\n  symbol,\n  addLiquidityUrl,\n  inputTitle,\n  onConfirm,\n  lpStakingContract,\n}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(`${t('Staked')}!`, t('Your %symbol% tokens have been staked to the pool!', { symbol }))\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{symbol} balance: </Text>\n        <Text>{fullBalance}</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton onClick={onDismiss}>Close</CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n          Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss }) => {\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          78.912 SRK Tokens\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { MAINNET_CHAIN_ID } from '../../../config'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl,\n  addTokenUrl,\n  handleUnstake,\n  farm,\n  maxStake,\n}) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const userRate = calculateUserRewardRate(farm, chain)\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses, chain)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address, chain))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n  const [isApproved, setIsApproved] = useState(\n    account && allowance && new BigNumber(allowance).isGreaterThanOrEqualTo(tokenBalance),\n  )\n  const lpStakingAddress = getAddress(farm.stakingAddresses, chain)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid, chain])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm}\n      lpStakingContract={lpStakingContract}\n      max={max}\n      symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')}\n    />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" fontSize=\"14px\" style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatLPTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatStakedTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ? (\n              <Button fullWidth onClick={onPresentStake}>\n                Stake {tokenName}\n              </Button>\n            ) : (\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            )}\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {userRate}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenEarnings ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?: string\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses, chain))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />,\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance) ? onPresentWithdraw : onPresentDeposit}\n        disabled={\n          farm.hasEnded &&\n          !parseFloat(farm.userData.stakedBalance) &&\n          ['history', 'archived'].some((item) => location.pathname.includes(item))\n        }\n        fullWidth\n      >\n        {userDataReady ? buttonTxt : <Loading />}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({\n  userDataReady,\n  farm,\n  account,\n  addLiquidityUrl,\n  addTokenUrl,\n}) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return <Action>{!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderDepositButton()}</Action>\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\nimport { MAINNET_CHAIN_ID } from '../../../../../config'\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string\n  tokenRewardSymbol?: string\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  stakingContract,\n  tokenRewardSymbol,\n  pid,\n  userData,\n  userDataReady,\n}) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          style={{ borderRadius: '3px', height: '40px' }}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL, MAINNET_CHAIN_ID } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const stakingAddress = getAddress(farm.stakingAddresses, chain)\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n  // const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\n  // const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\n  // const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.lpAddresses[56])\n  const aprBlackList = ['0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b']\n  // const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{ margin: '24px' }}>\n        <Flex>\n          <HarvestAction\n            stakingContract={getAddress(farm.stakingAddresses, chain)}\n            tokenRewardSymbol={earnLabel}\n            userDataReady={userDataReady}\n            userData={farm.userData}\n            pid={farm.pid}\n          />\n        </Flex>\n        {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Rate')}</Text>\n          <Text color=\"textSubtle\">\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Duration')}</Text>\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\n        </Flex>\n        <CardActionsContainer\n          userDataReady={userDataReady}\n          farm={farm}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          addTokenUrl={AddTokenUrl}\n        />\n\n        <DetailsSection\n          removed={removed}\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\n          lpLabel={lpLabel}\n        />\n\n        {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const mainTokenAddress = quoteTokenAddress\n  const pairTokenAddress = tokenAddress\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ mainTokenAddress, pairTokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { Contract } from 'web3-eth-contract'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL, MAINNET_CHAIN_ID } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\nimport { getAddress } from '../../../../../utils/addressHelpers'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  token,\n  pairToken,\n  userDataReady,\n  stakingAddresses,\n}) => {\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: token.address,\n    pairTokenAddress: pairToken.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string, contract: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const lpStakingAddress = getAddress(stakingAddresses, chain)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const dispatch = useAppDispatch()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid, chain])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.boxShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Oval } from 'react-loading-icons'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\nimport { MAINNET_CHAIN_ID } from '../../config'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid) && farm.chain === chain,\n  )\n  const inactiveFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid) && farm.chain === chain,\n  )\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid) && farm.chain === chain)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n    return (\n      <div>\n        <div style={{ margin: '20px' }}>\n          <Text fontSize=\"24px\" bold>\n            {' '}\n            Inactive Liquidity Pools{' '}\n          </Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(inactiveFarms).map((farm) => (\n            <FarmCard\n              userDataReady={userDataReady}\n              key={farm.pid}\n              farm={farm}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\n\n  // const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\n  // const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\n  const lpTotalSupply = getBalanceNumber(new BigNumber(mggFarm.totalDeposits ?? 0))\n  const { LPPrice, rewardPrice } = useFarmPrice(\n    Number(lpTotalSupply),\n    mggFarm.token.address[56],\n    mggFarm.pairToken.address[56],\n    mggFarm.quoteToken.address[56],\n    mggFarm.lpAddresses[56],\n    isFetchData,\n  )\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(mggFarm.totalDeposits), Number(mggFarm.rewardRate)),\n    [LPPrice, rewardPrice, mggFarm.totalDeposits, mggFarm.rewardRate],\n  )\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const totalStaked =\n    getBalanceNumber(new BigNumber(mggFarm.totalDeposits)) > 0 ? (\n      `${getBalanceAmount(new BigNumber(mggFarm.totalDeposits)).toFormat(4)} ${mggFarm.lpSymbol}`\n    ) : (\n      <Oval width=\"20px\" height=\"20px\" />\n    )\n  const tvr = useMemo(\n    () => getBalanceAmount(new BigNumber(mggFarm.lpTotalSupply)).times(LPPrice).toFixed(4),\n    [mggFarm.lpTotalSupply, LPPrice],\n  )\n\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Liquidity Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG with your LP tokens!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Tokens Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {Number(tvr) > 0 && Number(tvr) !== Infinity ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\">{apr}</Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}
{"version":3,"sources":["utils/index.ts","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","state/block/hooks.ts","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx","components/Balance.tsx","hooks/usePersistState.ts","utils/getTimePeriods.ts","hooks/price.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","views/Farms/components/FarmTable/Actions/styles.ts","components/ApyCalculatorModal/index.tsx","components/Tags.tsx","components/layout/Flex.tsx","utils/latinise.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useDelayedUnmount.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx"],"names":["getBscScanLink","data","type","chainId","ChainId","MAINNET","BASE_BSC_SCAN_URLS","ViewMode","StyledCard","keyframes","styled","div","props","theme","colors","MGG_active","MGG_container","isFinished","mediaQueries","sm","StyledCardInner","card","background","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","getAddress","tokens","cake","address","primarySrc","secondarySrc","Wrapper","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useTranslation","t","symbol","useContext","ThemeContext","alignItems","justifyContent","flexDirection","style","textAlign","color","size","width","height","TokenPairImage","primaryToken","secondaryToken","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","bold","mt","as","external","href","BASE_EXCHANGE_URL","variant","ml","onClick","ModalBody","Flex","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","sousId","userData","stakingLimit","stakingTokenContract","useRef","useERC20","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","getBalanceNumber","BigNumber","decimals","BIG_ZERO","remainingStakeTokens","totalAllowance","useTokenAllowance","contractAddress","useSousApproveWithAmount","getDecimalAmount","handleApprove","requestedApproval","getCalculatedStakingLimit","gt","formatNumber","times","toNumber","useEffect","fullDecimalStakeAmount","plus","balance","gte","handleConfirmClick","a","fontSize","mb","maxstake","getFullDisplayBalance","tokensymbol","ModalInput","value","onSelectMax","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","onChange","e","input","convertedInput","percentage","Math","floor","min","handleStakeInputChange","currentTarget","max","addLiquidityUrl","toFixed","marginTop","marginBottom","isLoading","endIcon","spin","disabled","fullWidth","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","console","log","onReward","useSousHarvest","activeSelect","setActiveSelect","earnedTokenBalance","useTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","error","handleUnstake","className","window","open","isDepositDisabled","border","borderTop","primary","onMouseEnter","onMouseLeave","eq","position","target","isWithdrawDisabled","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","harvest","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","allowance","totalEarned","display","textTransform","StakeActions","ClaimAction","margin","MGG_accent2","pr","borderRadius","PoolCard","account","startBlock","endBlock","accountHasStakedBalance","toString","rewardPerBlock","currentBlock","useSelector","state","block","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","usePoolPrice","stakingPrice","rewardPrice","getPoolApr","UnlockButton","DetailsSection","stakingAddress","getBscScanAddressUrl","lpInfoAddress","AprRow","performanceFee","apr","tooltipContent","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","process","ApyCalculatorModal","tokenPrice","linkLabel","linkHref","earningTokenSymbol","onPresentApyModal","ref","Balance","isDisabled","unit","scale","ExpandedWrapper","ExpandedFooter","useBlock","useCakeVault","totalCakeInVault","fees","tokenAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","getBscScanBlockCountdownUrl","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","useWeb3React","withdrawalFee","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","toLowerCase","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","dispatch","useAppDispatch","cakeVaultContract","useCakeVaultContract","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","message","withdraw","handleDeposit","deposit","minWidth","src","alt","onUserInput","BIG_TEN","pow","currencyValue","onValueChanged","name","valueLabel","step","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","prefix","mr","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","xl","collapseAnimation","css","lg","Box","textDisabled","CardLayout","FlexLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","usePersistState","localStorageKey","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","maxWidth","accountHasVaultShares","useMemo","cakePool","map","partition","openPools","finishedPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","current","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","latinise","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","mggPool","path","url","isExact","PageHeader","minHeight","padding","flex","borderBottom","Page","previousValue","start","end","duration","separator","defaultOptions","hydrate","identity","dehydrate","initialValue","userOptions","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","abs","timeLeft","years","months","stakingTokenAddress","rewardTokenAddress","_stakingTokenAddress","_rewardTokenAddress","setStakingPrice","setRewardPrice","web3","useWeb3","utils","toChecksumAddress","fetch","SPARKSWAP_API","concat","API_ASSETS","assets","json","fetchData","useFarmPrice","lpTotalSupply","token1Address","token2Address","_token1Address","_token2Address","LPPrice","setLPPrice","API_SUMMARY","summary","pairLiquidity","Object","prototype","hasOwnProperty","call","API_LIQUIDITY","API_LASTPRICE","StyledLogo","img","PairLogoImg","getImageUrlFromToken","token","wbnb","iconExtension","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","useStake","pid","contract","txHash","info","useExit","stakingContract","useLPStakingContract","exit","unstake","sousEmergencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","useClaim","claim","handleHarvest","soushHarvestBnb","soushHarvest","ActionContainer","ActionTitles","ActionContent","Earned","text","Grid","GridItem","GridHeaderItem","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","freq","CoreTag","outline","startIcon","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","Latinise","latin_map","τ","Τ","replace","x","StyledHr","textSubtle","ModalHr","hr","StyledLinkExternal","LinkExternal","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Outer","isDark","modal","Inner","Container","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","isBalanceZero","pattern","inputMode","placeholder"],"mappings":"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","file":"static/js/9.dfa5a1b7.chunk.js","sourcesContent":["import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { ChainId, CurrencyAmount, JSBI, Percent } from '@pancakeswap-libs/sdk'\r\nimport { BASE_BSC_SCAN_URLS } from '../config'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function getBscScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address)\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-right: 0px;\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n    margin-right: 16px;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import styled, { css, keyframes } from 'styled-components'\r\nimport { Card } from '@sparkpointio/sparkswap-uikit'\r\n\r\nconst PromotedGradient = keyframes`\r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\r\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\r\n  max-width: 450px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: baseline;\r\n  position: relative;\r\n  justify-content: space-around;\r\n  background: ${(props) => props.theme.colors.MGG_container};\r\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin: 0 12px 46px;\r\n  }\r\n`\r\n\r\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\r\n  background: ${({ theme }) => theme.card.background};\r\n\r\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\r\n`\r\n\r\nexport default StyledCard\r\n","import React from 'react'\r\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\r\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\r\n\r\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\r\n}\r\n\r\nexport default CakeVaultTokenPairImage\r\n","import React, { useContext } from 'react'\r\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\r\nborder-bottom: 5px solid ${(({theme}) => theme.colors.MGG_active)};\r\npadding: 24px;\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n//  background: ${({ isFinished, background, theme }) =>\r\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n// border-radius: ${({ theme, isPromotedPool }) =>\r\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\r\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n  const background = 'cardHeader'\r\n\r\n/*\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n*/\r\n\r\n  const getCardTitle = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t(`Stake CAKE to Earn CAKE`)\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\r\n  }\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\" style={{textAlign: 'left'}}>\r\n          <Heading color='text' size=\"lg\">\r\n            {`Stake ${stakingToken.symbol}`} <br/>\r\n            to <br />\r\n            {`Earn ${earningToken.symbol}`}\r\n          </Heading>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface NotEnoughTokensModalProps {\r\n  tokenSymbol: string\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('%symbol% required', { symbol: tokenSymbol })}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Text color=\"failure\" bold>\r\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\r\n      </Text>\r\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\r\n      <Text>\r\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\r\n          symbol: tokenSymbol,\r\n        })}\r\n      </Text>\r\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\r\n        {t('Buy')} {tokenSymbol}\r\n      </Button>\r\n      <StyledLink href=\"https://yieldwatch.net\" external>\r\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\r\n          {t('Locate Assets')}\r\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\r\n        </Button>\r\n      </StyledLink>\r\n      <Button variant=\"text\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default NotEnoughTokensModal\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { Modal, Text, Flex, Image, Button} from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useSousStake } from 'hooks/useStake'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\r\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Pool } from 'state/types'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onSelectMax?: () => void\r\n  onDismiss?: () => void\r\n  isApprove?: boolean\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst ModalBody = styled(Flex)`\r\n  width: 450px;\r\n  margin-top: -20px;\r\n  padding: 20px;\r\n`\r\nconst StakeActionModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n  isApprove = false,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const approveBtn = useRef(null);\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useSousStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  // const [approvedTx, setApprovedTx] = useState(false)\r\n  const [isApproved, setIsApproved] = useState(isApprove)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const userLimit = stakingLimit.minus(userData.stakedBalance);\r\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : BIG_ZERO\r\n  const numTotalStaked = totalStakedTokens\r\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : BIG_ZERO\r\n  const remainingStakeTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals) : BIG_ZERO\r\n  const totalAllowance = useTokenAllowance(stakingToken.address[56], pool.contractAddress[56])\r\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(stakingTokenContract, sousId, earningToken.symbol, getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals))\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\r\n  }\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\r\n  }, [requestedApproval, stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, totalAllowance, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // const handleApproveClick = async () => {\r\n  //   setApprovedTx(true)\r\n  // }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        setIsApproved(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Modal title=\"\" onDismiss={onDismiss}>\r\n      <ModalBody flexDirection=\"column\">\r\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\r\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n            {t('Max stake for this pool: %amount% %token%', {\r\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n\r\n        <Flex justifyContent=\"center\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center'}}>\r\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\r\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\r\n              tokensymbol: pool.stakingToken.symbol\r\n            })}\r\n          </Text>\r\n        </Flex>\r\n\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text bold>Stake amount</Text>\r\n          {/* <Flex alignItems=\"center\">\r\n            <Image\r\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n              width={24}\r\n              height={24}\r\n              alt={stakingToken.symbol}\r\n            />\r\n            <Text ml=\"4px\" bold>\r\n              {stakingToken.symbol}\r\n            </Text>\r\n          </Flex> */}\r\n        </Flex>\r\n        <ModalInput\r\n          value={stakeAmount}\r\n          onSelectMax={() => {handleChangePercent(100)}}\r\n          onChange={e => handleStakeInputChange(e.currentTarget.value)}\r\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\r\n          symbol={stakingToken.symbol}\r\n          addLiquidityUrl=''\r\n        />\r\n\r\n        {/* Fetch and display actual balance */}\r\n\r\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\r\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\r\n        </Text>\r\n\r\n\r\n        <div>\r\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left'}}>\r\n          {/* {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })} */}\r\n          Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\r\n        </Text>\r\n        </div>\r\n\r\n\r\n\r\n        {/* {hasReachedStakeLimit && (\r\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n            {t('Maximum total stake: %amount% %token%', {\r\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n              token: stakingToken.symbol,\r\n            })}\r\n          </Text>\r\n        )} */}\r\n        {/* <Flex>\r\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\r\n          {t('Balance: %balance%', {\r\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n          })}\r\n        </Text>\r\n        </Flex> */}\r\n        {/* <Slider\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handleChangePercent}\r\n          name=\"stake\"\r\n          valueLabel={`${percent}%`}\r\n          step={1}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n        </Flex> */}\r\n\r\n        <Flex justifyContent=\"space-between\"  marginTop=\"17px\" marginBottom=\"17px\">\r\n          <Text bold>Approved Tokens</Text>\r\n          <Text>\r\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Flex style={{width: '100%'}}>\r\n        <Button\r\n          isLoading={pendingTx}\r\n          // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          // onClick={handleApproveClick}\r\n          // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\r\n          onClick={handleApprove}\r\n          disabled={!stakeAmount || isApproved}\r\n          mt=\"24px\"\r\n          fullWidth\r\n          marginRight=\"20px\"\r\n        >\r\n         Approve\r\n        </Button>\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\r\n          // disabled={!approvedTx}\r\n          mt=\"24px\"\r\n          fullWidth\r\n          marginLeft=\"20px\"\r\n        >\r\n          {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\r\n          {t('Deposit')}\r\n        </Button>\r\n        </Flex>\r\n        {/* {!isRemovingStake && (\r\n          <StyledLink external href={BASE_EXCHANGE_URL}>\r\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\r\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n            </Button>\r\n          </StyledLink>\r\n        )} */}\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeActionModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Dropdown, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useSousUnstake } from 'hooks/useUnstake'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useSousHarvest } from 'hooks/useHarvest'\r\nimport BigNumber from 'bignumber.js'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { Pool } from 'state/types'\r\n\r\nimport StakeTokenModal from './Stake'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n  addTokenUrl?: string\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\nconst StyledFlex = styled(Flex)`\r\n  justify-content: center;\r\n\r\n  & > * {\r\n    flex: 1;\r\n    margin: 0px 10px;\r\n  }\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n                                                 isBnbPool,\r\n                                                 pool,\r\n                                                 stakingTokenBalance,\r\n                                                 stakingTokenPrice,\r\n                                                 addTokenUrl,\r\n                                                 isRemovingStake = false,\r\n                                                 onDismiss,\r\n                                               }) => {\r\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\r\n  console.log(isAddTokenDisabled ?? false)\r\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\r\n  const { onUnstake } = useSousUnstake(sousId, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const [activeSelect, setActiveSelect] = useState(false)\r\n  const { balance: earnedTokenBalance } = useTokenBalance(pool.earningToken.address[56])\r\n  const { toastSuccess, toastError } = useToast()\r\n  const totalStakingTokens = userData?.stakingTokenBalance ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals) : 0\r\n  const totalStakedTokens = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\r\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\r\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n  const [onPresentStakeAction] = useModal(<StakeTokenModal isBnbPool={isBnbPool} pool={pool}\r\n                                                           stakingTokenBalance={stakingTokenBalance}\r\n                                                           stakingTokenPrice={stakingTokenPrice} />)\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // harvesting\r\n    try {\r\n      await onReward()\r\n      toastSuccess(\r\n        `${t('Claimed')}!`,\r\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleUnstake = async () => {\r\n    setPendingTx(true)\r\n    // unstaking\r\n    try {\r\n      await onUnstake(getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18), stakingToken.decimals)\r\n      toastSuccess(\r\n        `${t('Unstaked')}!`,\r\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\r\n          symbol: earningToken.symbol,\r\n        }),\r\n      )\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (e) {\r\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Modal\r\n      title=''\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Flex flexDirection='column' style={{ marginTop: '-50px', width: '550px' }}>\r\n        <Text fontSize='20px' marginBottom='10px' marginLeft='10px'>Account Info</Text>\r\n        <Text fontSize='15px' marginLeft='10px'>Staking, balances & earnings</Text>\r\n\r\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\r\n        <StyledFlex marginTop='21px'>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalStakingTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Tokens</Text>\r\n            <Button\r\n              disabled={isAddTokenDisabled}\r\n              fullWidth\r\n              className='disabled'\r\n              onClick={() => {\r\n                window.open(`https://sparkswap.finance/#/swap/${pool.stakingToken.address[56]}`, '_blank')\r\n              }}\r\n            >Add More</Button>\r\n          </Flex>\r\n          {pool.stakingToken.symbol !== pool.earningToken.symbol &&\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalEarningTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.earningToken.symbol} Tokens</Text>\r\n            <Button\r\n              fullWidth\r\n              onClick={() => {\r\n                window.open(`https://sparkswap.finance/#/swap/${pool.earningToken.address[56]}`, '_blank')\r\n              }}>Add More</Button>\r\n          </Flex>\r\n          }\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalStakedTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' marginBottom='24px'>{pool.stakingToken.symbol} Staked</Text>\r\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isDepositDisabled}>Stake Tokens</Button>\r\n          </Flex>\r\n        </StyledFlex>\r\n\r\n        <StyledFlex>\r\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\r\n        </StyledFlex>\r\n        <StyledFlex marginTop='30px' marginBottom='20px'>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(rewardRate, 2, 10)}</Text>\r\n            <Text color='textSubtle' fontSize='17px'>Your Rate {pool.earningToken.symbol}/block</Text>\r\n          </Flex>\r\n          <Flex flexDirection='column'>\r\n            <Text fontSize='24px'>{formatNumber(totalEarnedTokens, 2, 5)}</Text>\r\n            <Text color='textSubtle' fontSize='17px'>{pool.earningToken.symbol} Token Earnings</Text>\r\n          </Flex>\r\n          <Flex flexDirection='column' mb='16px' marginLeft='5px'\r\n                onMouseEnter={() => setActiveSelect(true)}\r\n                onMouseLeave={() => setActiveSelect(false)}>\r\n\r\n            {userData.stakedBalance.eq(0) ? <Button disabled fullWidth> Withdraw </Button> : <Dropdown\r\n              position='top'\r\n              target={\r\n                // Disable component if total staked tokens is empty\r\n                <Button fullWidth variant='secondary' disabled={pool.isWithdrawDisabled}>\r\n                  <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\r\n                </Button>\r\n              }\r\n            >\r\n              {/* Disable Claim & Withdraw if no staked tokens */}\r\n              <Button type='button' disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\r\n                Claim\r\n              </Button>\r\n              <Button type='button' disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\r\n                Claim & Withdraw\r\n              </Button>\r\n            </Dropdown>\r\n\r\n            }\r\n          </Flex>\r\n        </StyledFlex>\r\n        {!!pool.isWithdrawDisabled && < Text className='yellow' fontSize='15px' marginLeft='10px'>SRKb and SFUEL Withdrawals and Deposits are\r\n          locked for 48 hours during launchpad</Text>}\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n","import React from 'react'\r\nimport { IconButton, AddIcon, MinusIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { Button, Text, Flex, useModal } from '@metagg/mgg-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    // isStaked ? (\r\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n    //     <Flex flexDirection=\"column\">\r\n    //       <>\r\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n    //         {stakingTokenPrice !== 0 && (\r\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\r\n    //             <Balance\r\n    //               fontSize=\"12px\"\r\n    //               color=\"textSubtle\"\r\n    //               decimals={2}\r\n    //               value={stakedTokenDollarBalance}\r\n    //               prefix=\"~\"\r\n    //               unit=\" USD\"\r\n    //             />\r\n    //           </Text>\r\n    //         )}\r\n    //       </>\r\n    //     </Flex>\r\n    //     <Flex>\r\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\r\n    //       </IconButton>\r\n    //       {reachStakingLimit ? (\r\n    //         <span ref={targetRef}>\r\n    //           <IconButton variant=\"secondary\" disabled>\r\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n    //           </IconButton>\r\n    //         </span>\r\n    //       ) : (\r\n    //         <IconButton\r\n    //           variant=\"secondary\"\r\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n    //           disabled={isFinished}\r\n    //         >\r\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n    //         </IconButton>\r\n    //       )}\r\n    //     </Flex>\r\n    //     {tooltipVisible && tooltip}\r\n    //   </Flex>\r\n    // ) :\r\n\r\n    // Reserve function for future use\r\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\r\n    return (\r\n      <Button fullWidth disabled={isFinished && stakedBalance.isEqualTo(0)} onClick={ onPresentStake }>\r\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Stake' }\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return <Flex justifyContent=\"space-between\" alignItems=\"center\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default StakeAction\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport ApprovalAction from './ApprovalAction'\r\nimport StakeActions from './StakeActions'\r\nimport HarvestActions from './HarvestActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  & > * {\r\n    flex: 1;\r\n    height: 60px;\r\n  }\r\n`\r\n\r\ninterface CardActionsProps {\r\n  pool: Pool\r\n  stakedBalance: BigNumber\r\n}\r\n\r\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\r\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\r\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const { t } = useTranslation()\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  const needsApproval = !allowance.gt(0) && !isBnbPool\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isLoading = !userData\r\n\r\n  const totalStaked = userData?.stakedBalance ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals) : 0\r\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\" >\r\n        {harvest && (\r\n          <>\r\n            {/* <Flex justifyContent=\"space-between\">\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${stakingToken.symbol} Staked`}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\r\n                  {`${earningToken.symbol} Earned`}\r\n                </Text>\r\n              </Box>\r\n            </Flex> */}\r\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                   {!isComingSoon && formatNumber(totalStaked,2,5)} {isComingSoon && '-'} {stakingToken.symbol}\r\n                </Text>\r\n              </Box>\r\n              <Box display=\"inline\">\r\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\r\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n                   {!isComingSoon && formatNumber(totalEarned,2,5)} {isComingSoon && '-'} {earningToken.symbol}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {/* <Box display=\"inline\">\r\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\r\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box> */}\r\n          <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\r\n             <StakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            stakedBalance={stakedBalance}\r\n            isBnbPool={isBnbPool}\r\n            isStaked={isStaked}\r\n          />\r\n             {/* <HarvestActions\r\n              earnings={earnings}\r\n              earningToken={earningToken}\r\n              sousId={sousId}\r\n              earningTokenPrice={earningTokenPrice}\r\n              isBnbPool={isBnbPool}\r\n              isLoading={isLoading}\r\n            /> */}\r\n          </StyledFlex>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useContext } from 'react';\r\nimport { Flex, Text, Button } from '@metagg/mgg-uikit';\r\nimport { ThemeContext } from 'styled-components';\r\nimport Balance from 'components/Balance'\r\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from '../../../Farms/components/FarmTable/Actions/styles';\r\n\r\n\r\nconst ClaimAction: React.FC = () => {\r\n    const theme = useContext(ThemeContext)\r\n    return (\r\n        <ActionContainer style={{ margin: '10px 0' }}>\r\n      <ActionTitles>\r\n        <Text bold textTransform='uppercase' color={theme.colors.MGG_accent2} fontSize='12px' pr='4px'>\r\n          test\r\n        </Text>\r\n        <Text bold textTransform='uppercase' color='textSubtle' fontSize='12px'>\r\n          Earned\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>123</Earned>\r\n        </div>\r\n        <Button\r\n          style={{borderRadius: '3px', height: '40px'}}\r\n\r\n          ml='4px'\r\n        >\r\n          Claim\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n    )\r\n}\r\n\r\nexport default ClaimAction","import BigNumber from 'bignumber.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\r\nimport { ThemeContext } from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { getBscScanLink } from 'utils'\r\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\r\nimport { StyledCard, StyledCardInner } from './StyledCard'\r\nimport CardFooter from './CardFooter'\r\nimport StyledCardHeader from './StyledCardHeader'\r\nimport CardActions from './CardActions'\r\nimport { getAddress } from '../../../../utils/addressHelpers'\r\nimport ClaimAction from '../ClaimAction'\r\n\r\n\r\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\r\n  const { sousId, stakingToken, earningToken, isFinished, userData, startBlock, endBlock, isComingSoon } = pool\r\n  const { t } = useTranslation()\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const accountHasStakedBalance = stakedBalance.gt(0)\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const totalStaked = pool.totalStaked\r\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\r\n    : 0\r\n\r\n  const rewardPerBlock = pool?.tokenPerBlock\r\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\r\n    : 0\r\n\r\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\r\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\r\n\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\r\n  return (\r\n    <StyledCard isFinished={isFinished && sousId !== 0}>\r\n      <StyledCardHeader\r\n        isStaking={accountHasStakedBalance}\r\n        earningToken={earningToken}\r\n        stakingToken={stakingToken}\r\n        isFinished={isFinished && sousId !== 0}\r\n      />\r\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n        <Flex>\r\n          <ClaimAction />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>Duration</Text>\r\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\r\n            <Text color=\"textSubtle\">\r\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\r\n            </Text>\r\n          </Link>\r\n        </Flex>\r\n\r\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n            <Text>Total Deposit</Text>\r\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\r\n          </Flex> */}\r\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\r\n              <Text>Reward per block</Text>\r\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\r\n          </Flex> */}\r\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\r\n          <Text>{t('Rate')}</Text>\r\n          <Text>\r\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\r\n          </Text>\r\n        </Flex>\r\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\r\n          {account ? (\r\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\r\n          ) : (\r\n            <>\r\n              <UnlockButton />\r\n            </>\r\n          )}\r\n        </Flex>\r\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\r\n        {/* <CardFooter pool={pool} account={account} /> */}\r\n        <DetailsSection \r\n            stakingAddress={getBscScanAddressUrl(\"test\")}\r\n            lpInfoAddress=\"\"\r\n        />\r\n      </Flex>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","import { useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { setBlock } from '.'\r\nimport { State } from '../types'\r\n\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n","import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { getAprData } from 'views/Pools/helpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink =\r\n    stakingToken.address &&\r\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport {\r\n  Flex,\r\n  MetamaskIcon,\r\n  Text,\r\n  TooltipText,\r\n  LinkExternal,\r\n  TimerIcon,\r\n  Skeleton,\r\n  useTooltip,\r\n  Button,\r\n  Link,\r\n  HelpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport Balance from 'components/Balance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\n\r\ninterface ExpandedFooterProps {\r\n  pool: Pool\r\n  account: string\r\n}\r\n\r\nconst ExpandedWrapper = styled(Flex)`\r\n  svg {\r\n    height: 14px;\r\n    width: 14px;\r\n  }\r\n`\r\n\r\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\r\n  const { t } = useTranslation()\r\n  const { currentBlock } = useBlock()\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const {\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    sousId,\r\n    isAutoVault,\r\n  } = pool\r\n\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Subtracted automatically from each yield harvest and burned.'),\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <ExpandedWrapper flexDirection=\"column\">\r\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text small>{t('Total staked')}:</Text>\r\n        <Flex alignItems=\"flex-start\">\r\n          {totalStaked && totalStaked.gte(0) ? (\r\n            <>\r\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n              <span ref={totalStakedTargetRef}>\r\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <Skeleton width=\"90px\" height=\"21px\" />\r\n          )}\r\n          {totalStakedTooltipVisible && totalStakedTooltip}\r\n        </Flex>\r\n      </Flex>\r\n      {stakingLimit && stakingLimit.gt(0) && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\r\n          <Text small>{t('Max. stake per user')}:</Text>\r\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n        </Flex>\r\n      )}\r\n      {shouldShowBlockCountdown && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n          {blocksRemaining || blocksUntilStart ? (\r\n            <Flex alignItems=\"center\">\r\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n                  {t('Blocks')}\r\n                </Text>\r\n                <TimerIcon ml=\"4px\" color=\"primary\" />\r\n              </Link>\r\n            </Flex>\r\n          ) : (\r\n            <Skeleton width=\"54px\" height=\"21px\" />\r\n          )}\r\n        </Flex>\r\n      )}\r\n      {isAutoVault && (\r\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          {tooltipVisible && tooltip}\r\n          <TooltipText ref={targetRef} small>\r\n            {t('Performance Fee')}\r\n          </TooltipText>\r\n          <Flex alignItems=\"center\">\r\n            <Text ml=\"4px\" small>\r\n              {performanceFee / 100}%\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\r\n          {t('Info site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\r\n          {t('View Project Site')}\r\n        </LinkExternal>\r\n      </Flex>\r\n      {poolContractAddress && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <LinkExternal\r\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n            bold={false}\r\n            small\r\n          >\r\n            {t('View Contract')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      )}\r\n      {account && isMetaMaskInScope && tokenAddress && (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n          >\r\n            <Text color=\"primary\" fontSize=\"14px\">\r\n              {t('Add to Metamask')}\r\n            </Text>\r\n            <MetamaskIcon ml=\"4px\" />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </ExpandedWrapper>\r\n  )\r\n}\r\n\r\nexport default React.memo(ExpandedFooter)\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport ExpandedFooter from './ExpandedFooter'\r\n\r\ninterface FooterProps {\r\n  pool: Pool\r\n  account: string\r\n  totalCakeInVault?: BigNumber\r\n}\r\n\r\nconst ExpandableButtonWrapper = styled(Flex)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  button {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\r\n  const { isAutoVault } = pool\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  return (\r\n    <CardFooter>\r\n      <ExpandableButtonWrapper>\r\n        <Flex alignItems=\"center\">\r\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n          {tooltipVisible && tooltip}\r\n          <Flex ref={targetRef}>\r\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n          </Flex>\r\n        </Flex>\r\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n          {isExpanded ? t('Hide') : t('Details')}\r\n        </ExpandableLabel>\r\n      </ExpandableButtonWrapper>\r\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultApprove } from 'hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  setLastUpdated: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VaultApprovalAction\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\r\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\r\n\r\n  useEffect(() => {\r\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\r\n    const secondsRemainingCalc = feeEndTime - currentSeconds\r\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\r\n\r\n    const tick = () => {\r\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\r\n    }\r\n    const timerInterval = setInterval(() => tick(), 1000)\r\n    if (doesUnstakingFeeApply) {\r\n      setSecondsRemaining(secondsRemainingCalc)\r\n      setHasUnstakingFee(true)\r\n    } else {\r\n      setHasUnstakingFee(false)\r\n      clearInterval(timerInterval)\r\n    }\r\n\r\n    return () => clearInterval(timerInterval)\r\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\r\n\r\n  return { hasUnstakingFee, secondsRemaining }\r\n}\r\n\r\nexport default useWithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\r\n  const { t } = useTranslation()\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\r\n}\r\n\r\nexport default WithdrawalFeeTimer\r\n","import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n","import React from 'react'\r\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\n\r\ninterface FeeSummaryProps {\r\n  stakingTokenSymbol: string\r\n  stakeAmount: string\r\n}\r\n\r\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    fees: { withdrawalFee },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100\r\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'top-start' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        {tooltipVisible && tooltip}\r\n        <TooltipText ref={targetRef} small>\r\n          {t('Unstaking Fee')}\r\n        </TooltipText>\r\n        <Text fontSize=\"14px\">\r\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\r\n        </Text>\r\n      </Flex>\r\n      <UnstakingFeeCountdownRow />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FeeSummary\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BASE_EXCHANGE_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      cakeVaultContract.methods\r\n        .withdrawAll()\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    } else {\r\n      cakeVaultContract.methods\r\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\r\n        // .toString() being called to fix a BigNumber error in prod\r\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setPendingTx(true)\r\n        })\r\n        .on('receipt', () => {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        })\r\n        .on('error', (error) => {\r\n          console.error(error)\r\n          // Remove message from toast before prod\r\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n          setPendingTx(false)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    cakeVaultContract.methods\r\n      .deposit(convertedStakeAmount.toString())\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setPendingTx(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      })\r\n      .on('error', (error) => {\r\n        console.error(error)\r\n        // Remove message from toast before prod\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        setPendingTx(false)\r\n      })\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    setPendingTx(true)\r\n    // unstaking\r\n    if (isRemovingStake) {\r\n      handleWithdrawal(convertedStakeAmount)\r\n      // staking\r\n    } else {\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n","import React from 'react'\r\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport { convertSharesToCake } from '../../../helpers'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\n\r\ninterface HasStakeActionProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n}\r\n\r\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { stakingToken } = pool\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const stakedDollarValue = cakePriceBusd.gt(0)\r\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\r\n    : 0\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\">\r\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {cakePriceBusd.gt(0) ? (\r\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\r\n          ) : (\r\n            <Skeleton mt=\"1px\" height={16} width={64} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n      <Flex>\r\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HasSharesActions\r\n","import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n","import BigNumber from 'bignumber.js'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport VaultApprovalAction from './VaultApprovalAction'\r\nimport VaultStakeActions from './VaultStakeActions'\r\n\r\nconst InlineText = styled(Text)`\r\n  display: inline;\r\n`\r\n\r\nconst CakeVaultCardActions: React.FC<{\r\n  pool: Pool\r\n  accountHasSharesStaked: boolean\r\n  isLoading: boolean\r\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\r\n  const { stakingToken, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\">\r\n        <Box display=\"inline\">\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\r\n          </InlineText>\r\n          <InlineText\r\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\r\n            textTransform=\"uppercase\"\r\n            bold\r\n            fontSize=\"12px\"\r\n          >\r\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\r\n          </InlineText>\r\n        </Box>\r\n        {isVaultApproved ? (\r\n          <VaultStakeActions\r\n            isLoading={isLoading}\r\n            pool={pool}\r\n            stakingTokenBalance={stakingTokenBalance}\r\n            accountHasSharesStaked={accountHasSharesStaked}\r\n          />\r\n        ) : (\r\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCardActions\r\n","import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\r\nimport {Box,CardBody} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasSharesStaked}\r\n          isAutoVault\r\n          earningToken={tokens.cake}\r\n          stakingToken={tokens.cake}\r\n        />\r\n        <StyledCardBody isLoading={isLoading}>\r\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n          <Box mt=\"24px\">\r\n            <RecentCakeProfitRow />\r\n          </Box>\r\n          <Box mt=\"8px\">\r\n            <UnstakingFeeCountdownRow />\r\n          </Box>\r\n          <Flex mt=\"32px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <UnlockButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </StyledCardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n","import { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseCell = styled.div`\r\n  color: black;\r\n\r\n  padding: 24px 8px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`\r\n\r\nexport const CellContent = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-height: 40px;\r\n  ${Text} {\r\n    line-height: 1;\r\n  }\r\n`\r\n\r\nexport default BaseCell\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HelpIcon,\r\n  Link,\r\n  LinkExternal,\r\n  MetamaskIcon,\r\n  Skeleton,\r\n  Text,\r\n  TimerIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { useBlock, useCakeVault } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\r\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport Harvest from './Harvest'\r\nimport Stake from './Stake'\r\nimport Apr from '../Apr'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 700px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 700px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  justify-content: center;\r\n  padding: 12px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\ntype MediaBreakpoints = {\r\n  isXs: boolean\r\n  isSm: boolean\r\n  isMd: boolean\r\n  isLg: boolean\r\n  isXl: boolean\r\n}\r\n\r\ninterface ActionPanelProps {\r\n  account: string\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n  expanded: boolean\r\n  breakpoints: MediaBreakpoints\r\n}\r\n\r\nconst InfoSection = styled(Box)`\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  flex-basis: auto;\r\n  padding: 8px 8px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding: 0;\r\n    flex-basis: 230px;\r\n  }\r\n`\r\n\r\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    stakingLimit,\r\n    contractAddress,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const poolContractAddress = getAddress(contractAddress)\r\n  const cakeVaultContractAddress = getCakeVaultAddress()\r\n  const { currentBlock } = useBlock()\r\n  const { isXs, isSm, isMd } = breakpoints\r\n  const showSubtitle = (isXs || isSm) && sousId === 0\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\r\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\r\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\r\n\r\n  const {\r\n    totalCakeInVault,\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const getTotalStakedBalance = () => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }\r\n\r\n  const {\r\n    targetRef: totalStakedTargetRef,\r\n    tooltip: totalStakedTooltip,\r\n    tooltipVisible: totalStakedTooltipVisible,\r\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\r\n  const autoTooltipText = t(\r\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\r\n  )\r\n\r\n  const {\r\n    targetRef: tagTargetRef,\r\n    tooltip: tagTooltip,\r\n    tooltipVisible: tagTooltipVisible,\r\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\r\n    placement: 'bottom-start',\r\n  })\r\n\r\n  const maxStakeRow = stakingLimit.gt(0) ? (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n      <Text>{t('Max. stake per user')}:</Text>\r\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\r\n    </Flex>\r\n  ) : null\r\n\r\n  const blocksRow =\r\n    blocksRemaining || blocksUntilStart ? (\r\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\r\n        <Flex>\r\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\r\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\r\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\r\n              {t('Blocks')}\r\n            </Text>\r\n            <TimerIcon ml=\"4px\" color=\"primary\" />\r\n          </Link>\r\n        </Flex>\r\n      </Flex>\r\n    ) : (\r\n      <Skeleton width=\"56px\" height=\"16px\" />\r\n    )\r\n\r\n  const aprRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\r\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\r\n    </Flex>\r\n  )\r\n\r\n  const totalStakedRow = (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\r\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\r\n      <Flex alignItems=\"center\">\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <>\r\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n            <span ref={totalStakedTargetRef}>\r\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Skeleton width=\"56px\" height=\"16px\" />\r\n        )}\r\n        {totalStakedTooltipVisible && totalStakedTooltip}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <StyledActionPanel expanded={expanded}>\r\n      <InfoSection>\r\n        {maxStakeRow}\r\n        {(isXs || isSm) && aprRow}\r\n        {(isXs || isSm || isMd) && totalStakedRow}\r\n        {shouldShowBlockCountdown && blocksRow}\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\r\n            {t('Info site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n          <LinkExternal href={earningToken.projectLink} bold={false}>\r\n            {t('View Project Site')}\r\n          </LinkExternal>\r\n        </Flex>\r\n        {poolContractAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <LinkExternal\r\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\r\n              bold={false}\r\n            >\r\n              {t('View Contract')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {account && isMetaMaskInScope && tokenAddress && (\r\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\r\n            <Button\r\n              variant=\"text\"\r\n              p=\"0\"\r\n              height=\"auto\"\r\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\r\n            >\r\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\r\n              <MetamaskIcon ml=\"4px\" />\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\r\n        {tagTooltipVisible && tagTooltip}\r\n        <span ref={tagTargetRef}>\r\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n        </span>\r\n      </InfoSection>\r\n      <ActionContainer>\r\n        {showSubtitle && (\r\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\r\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\r\n          </Text>\r\n        )}\r\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\r\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\r\n      </ActionContainer>\r\n    </StyledActionPanel>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport TokenPairImage from 'components/TokenPairImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto CAKE')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual CAKE')\r\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) : (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )}\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto CAKE vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto CAKE vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningsDollarValue}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <Balance\r\n                    display=\"inline\"\r\n                    fontSize=\"12px\"\r\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\r\n                    decimals={2}\r\n                    value={earningTokenDollarBalance}\r\n                    unit=\" USD\"\r\n                    prefix=\"~\"\r\n                  />\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport Apr from '../Apr'\r\n\r\ninterface AprCellProps {\r\n  pool: Pool\r\n  performanceFee: number\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 1 0 50px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n  }\r\n`\r\n\r\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { isAutoVault } = pool\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {isAutoVault ? t('APY') : t('APR')}\r\n        </Text>\r\n        <Apr\r\n          pool={pool}\r\n          performanceFee={isAutoVault ? performanceFee : 0}\r\n          showIcon={!isXs && !isSm}\r\n          alignItems=\"flex-start\"\r\n        />\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default AprCell\r\n","import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex height=\"100%\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BaseCell from './BaseCell'\r\n\r\ninterface ExpandActionCellProps {\r\n  expanded: boolean\r\n  isFullLayout: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  flex: 1;\r\n  padding-right: 12px;\r\n  padding-left: 0px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0 0 120px;\r\n    padding-right: 32px;\r\n    padding-left: 8px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 24px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isFullLayout && (\r\n        <Text color=\"primary\" bold>\r\n          {expanded ? t('Hide') : t('Details')}\r\n        </Text>\r\n      )}\r\n      <ArrowIcon color=\"primary\" toggled={expanded} />\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 32px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    height: 130px;\r\n    max-height: 130px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\r\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps {\r\n  pool: Pool\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\r\n  const {\r\n    sousId,\r\n    stakingToken,\r\n    earningToken,\r\n    stakingLimit,\r\n    isFinished,\r\n    poolCategory,\r\n    userData,\r\n    stakingTokenPrice,\r\n    isAutoVault,\r\n  } = pool\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\r\n    stakingTokenContract,\r\n    sousId,\r\n    earningToken.symbol,\r\n  )\r\n\r\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\r\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\r\n    useVaultApprove(setLastUpdated)\r\n\r\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\r\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\r\n\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\r\n\r\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const {\r\n    userData: { userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n\r\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const hasSharesStaked = userShares && userShares.gt(0)\r\n  const isVaultWithShares = isAutoVault && hasSharesStaked\r\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\r\n\r\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\r\n\r\n  const onStake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultStake()\r\n    } else {\r\n      onPresentStake()\r\n    }\r\n  }\r\n\r\n  const onUnstake = () => {\r\n    if (isAutoVault) {\r\n      onPresentVaultUnstake()\r\n    } else {\r\n      onPresentUnstake()\r\n    }\r\n  }\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataLoaded) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Start staking')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (needsApproval) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {t('Enable pool')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n            {t('Enable')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  // Wallet connected, user data loaded and approved\r\n  if (isNotVaultAndHasStake || isVaultWithShares) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n            {stakingToken.symbol}{' '}\r\n          </Text>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\r\n            <Balance\r\n              lineHeight=\"1\"\r\n              bold\r\n              fontSize=\"20px\"\r\n              decimals={5}\r\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\r\n            />\r\n            <Balance\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\r\n              unit=\" USD\"\r\n              prefix=\"~\"\r\n            />\r\n          </Flex>\r\n          <IconButtonWrapper>\r\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\r\n              <MinusIcon color=\"primary\" width=\"14px\" />\r\n            </IconButton>\r\n            {reachStakingLimit ? (\r\n              <span ref={targetRef}>\r\n                <IconButton variant=\"secondary\" disabled>\r\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n                </IconButton>\r\n              </span>\r\n            ) : (\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n                disabled={isFinished}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            )}\r\n          </IconButtonWrapper>\r\n          {tooltipVisible && tooltip}\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\r\n          {t('Stake')}{' '}\r\n        </Text>\r\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\r\n          {stakingToken.symbol}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\r\n          variant=\"secondary\"\r\n          disabled={isFinished}\r\n        >\r\n          {t('Stake')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport PoolRow from './PoolRow'\r\n\r\ninterface PoolsTableProps {\r\n  pools: Pool[]\r\n  userDataLoaded: boolean\r\n  account: string\r\n}\r\n\r\nconst StyledTable = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  > div:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledTableBorder = styled.div`\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  padding: 1px 1px 3px 1px;\r\n  background-size: 400% 400%;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\r\n  const { t } = useTranslation()\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  return (\r\n    <StyledTableBorder>\r\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\r\n        {pools.map((pool) => (\r\n          <PoolRow\r\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\r\n            pool={pool}\r\n            account={account}\r\n            userDataLoaded={userDataLoaded}\r\n          />\r\n        ))}\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </StyledTable>\r\n    </StyledTableBorder>\r\n  )\r\n}\r\n\r\nexport default PoolsTable\r\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\r\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\r\nimport { Text } from '@sparkpointio/sparkswap-uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { SvgIcon } from '@material-ui/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { usePoolPrice } from 'hooks/price'\r\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { StyledHr } from 'views/Farms/components/Divider'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport useMedia from 'use-media'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\r\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\r\n\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n  margin: 25px 0px;\r\n`\r\n\r\nconst PoolControls = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 24px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst SearchSortContainer = styled(Flex)`\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\nconst InfoBox = styled(Flex)`\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin: 10px 0px;\r\n    }\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n  const theme = useContext(ThemeContext)\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const isMobile = useMedia({ maxWidth: 500 })\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n\r\n    return [...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [openPools, finishedPools] = useMemo(() => partition(pools, (pool) => pool.sousId === 9), [pools])\r\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n  const showUpcomingPools = location.pathname.includes('upcoming')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  const poolsToShow = () => {\r\n    let chosenPools = []\r\n    if (showUpcomingPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else if (showFinishedPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else {\r\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n    }\r\n\r\n    if (searchQuery) {\r\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n      chosenPools = chosenPools.filter((pool) =>\r\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n      )\r\n    }\r\n\r\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  }\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {poolsToShow().map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\r\n  const { path, url, isExact } = useRouteMatch()\r\n\r\n  const mggPool = openPools[0]\r\n  const totalStaked = mggPool.totalStaked ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals) : 0\r\n  const rewardPerBlock = mggPool?.tokenPerBlock ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals) : 0\r\n  const {stakingPrice, rewardPrice} = usePoolPrice(mggPool.stakingToken.address[56], mggPool.earningToken.address[56])\r\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\r\n  // const totalStaked = getBalanceAmount(new BigNumber(mggPool.totalStaked ?? 0)).toFormat(4)\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-around\"\r\n          flexDirection={['column', null, 'row']}\r\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\r\n          padding=\"24px\"\r\n        >\r\n          <Flex flexDirection=\"column\" flex=\"2\">\r\n            <Flex\r\n              justifyContent=\"space-around\"\r\n              flexDirection=\"column\"\r\n              padding=\"25px 25px 25px 0px\"\r\n              mr={['8px', 0]}\r\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\r\n            >\r\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\r\n                Pool Staking\r\n              </Text>\r\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\r\n                Stake tokens and earn!\r\n              </Text>\r\n            </Flex>\r\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total MGG Staked\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {totalStaked} MGG</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  Total value Locked\r\n                </Text>\r\n                <Text fontSize=\"20px\">- USD</Text>\r\n              </Flex>\r\n              <Flex flexDirection=\"column\">\r\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\r\n                  APR\r\n                </Text>\r\n                <Text fontSize=\"20px\"> {apr} % </Text>\r\n              </Flex>\r\n            </InfoBox>\r\n          </Flex>\r\n          {/* <Flex\r\n            style={\r\n              isMobile\r\n                ? {\r\n                    fontSize: '150px',\r\n                    margin: 'auto',\r\n                    marginTop: '20px',\r\n                    marginBottom: '20px',\r\n                  }\r\n                : { fontSize: '240px', marginRight: '-118px' }\r\n            }\r\n          >\r\n            <SvgIcon\r\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\r\n              viewBox=\"0  0 384 512\"\r\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\r\n              fontSize=\"inherit\"\r\n            />\r\n          </Flex> */}\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        {/* {!showFinishedPools && !showUpcomingPools && (\r\n          <div>\r\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\r\n            {' '}\r\n            Stake tokens to earn{' '}\r\n          </Text>\r\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\r\n\r\n           // Header title for Active Pools  \r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('Stake tokens to earn')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </div>\r\n        )} */}\r\n\r\n        {/* UPCOMING  */}\r\n        {showUpcomingPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are coming in the near future. Stay tuned.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* ENDED  */}\r\n        {showFinishedPools && (\r\n          <>\r\n            <StyledHr style={{ marginTop: '35px' }} />\r\n\r\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\r\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n                <Heading scale=\"md\" color=\"text\">\r\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n                </Heading>\r\n              </Flex>\r\n            </Flex>\r\n          </>\r\n        )}\r\n\r\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\r\n\r\n        {cardLayout}\r\n\r\n        <div ref={loadMoreRef} />\r\n        {/* <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={192}\r\n          height={184.5}\r\n        /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value: number\r\n  decimals?: number\r\n  unit?: string\r\n  isDisabled?: boolean\r\n  prefix?: string\r\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({\r\n  value,\r\n  color = 'text',\r\n  decimals = 3,\r\n  isDisabled = false,\r\n  unit,\r\n  prefix,\r\n  onClick,\r\n  ...props\r\n}) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n  return (\r\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\r\n      {prefix && <span>{prefix}</span>}\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Balance\r\n","import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import { useEffect, useState } from 'react'\r\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE } from 'config'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string) => {\r\n    const [stakingPrice, setStakingPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _stakingTokenAddress\r\n    let _rewardTokenAddress\r\n    try{\r\n        _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json();\r\n            const lastPrice = \"last_price\"\r\n            \r\n            setStakingPrice(assets[_stakingTokenAddress][lastPrice])\r\n            setRewardPrice(assets[_rewardTokenAddress][lastPrice])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setStakingPrice, setRewardPrice,_stakingTokenAddress, _rewardTokenAddress])\r\n\r\n    return {stakingPrice, rewardPrice}\r\n}\r\n\r\nexport const useFarmPrice = (lpTotalSupply: number, token1Address: string, token2Address: string, rewardTokenAddress: string) => {\r\n    const [LPPrice, setLPPrice] = useState(0)\r\n    const [rewardPrice, setRewardPrice] = useState(0)\r\n\r\n    const web3 = useWeb3()\r\n    let _token1Address\r\n    let _token2Address\r\n    let _rewardTokenAddress\r\n    try{\r\n        _token1Address = web3.utils.toChecksumAddress(token1Address)\r\n        _token2Address = web3.utils.toChecksumAddress(token2Address)\r\n        _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\r\n    }\r\n    catch{\r\n        console.error('Invalid staking and reward address')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        try {\r\n\r\n            let assets = await fetch(SPARKSWAP_API.concat(API_ASSETS))\r\n            assets = await assets.json()\r\n            let summary = await fetch(SPARKSWAP_API.concat(API_SUMMARY))\r\n            summary = await summary.json()\r\n\r\n            let pairLiquidity\r\n\r\n            if(Object.prototype.hasOwnProperty.call(summary, _token1Address.concat(\"_\",_token2Address))){\r\n                pairLiquidity = summary[_token1Address.concat(\"_\",_token2Address)][API_LIQUIDITY];\r\n            }\r\n            else{\r\n                pairLiquidity = summary[_token2Address.concat(\"_\",_token1Address)][API_LIQUIDITY];\r\n            }\r\n\r\n            setLPPrice( pairLiquidity / getBalanceNumber(new BigNumber(lpTotalSupply), 18)  )\r\n            setRewardPrice(assets[_rewardTokenAddress][API_LASTPRICE])\r\n        } catch (error) {\r\n          console.error('Unable to fetch data:', error)\r\n        }\r\n      }\r\n  \r\n      fetchData()\r\n    }, [setLPPrice, setRewardPrice, lpTotalSupply, _token1Address, _token2Address, _rewardTokenAddress])\r\n\r\n    return {LPPrice, rewardPrice}\r\n}\r\n\r\nexport default usePoolPrice","import React from 'react'\r\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\r\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\r\nimport styled from 'styled-components'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Token } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\r\n  primaryToken: Token\r\n  secondaryToken: Token\r\n}\r\n\r\nconst StyledLogo = styled.img`\r\n  width: 50px;\r\n`\r\nconst PairLogoImg = styled(Flex)`\r\n  margin-bottom: 30px;\r\n  & > * {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst getImageUrlFromToken = (token: Token) => {\r\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\r\n  return `/images/tokens/${address}.${token.iconExtension?? 'svg'}`\r\n}\r\n\r\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\r\n  return (\r\n    <PairLogoImg>\r\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt='logo-img' />\r\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt='logo-img' />\r\n    </PairLogoImg>\r\n  )\r\n}\r\n\r\nexport default TokenPairImage\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, contract: Contract) => {\r\n      const txHash = await stake(contract?? masterChefContract, pid, amount, account, !!contract)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\r\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useExit = (contract: string) => {\r\n  const { account } = useWeb3React()\r\n  const stakingContract = useLPStakingContract(contract)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exit(stakingContract, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, stakingContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      console.info(txHash)\r\n    },\r\n    [account, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (enableEmergencyWithdraw) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\r\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useClaim = (stakingContract: string) => {\r\n  const { account } = useWeb3React()\r\n  const contract = useLPStakingContract(stakingContract)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(contract, account)\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handleClaim }\r\n}\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    return txHash\r\n  }, [account, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\r\n  // border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n  performanceFee?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst GridItem = styled.div``\r\n\r\nconst GridHeaderItem = styled.div`\r\n  max-width: 180px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CAKE',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n    performanceFee,\r\n  })\r\n\r\n  return (\r\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('Timeframe')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\r\n            {t('ROI')}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        <GridHeaderItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\r\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\r\n          </Text>\r\n        </GridHeaderItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 1 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 7 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>{t('%num%d', { num: 30 })}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem style={{ maxWidth: '180px' }}>\r\n          <Text>{t('365d(APY)')}</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text mr=\"12px\" ml=\"12px\">\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Flex justifyContent=\"center\">\r\n        <Box mb=\"28px\" maxWidth=\"280px\">\r\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n            {t(\r\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n              { freq: compoundFrequency.toLocaleString() },\r\n            )}\r\n          </Text>\r\n          {performanceFee > 0 && (\r\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\r\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst BinanceTag: React.FC<TagProps> = (props) => {\r\n  return (\r\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      Binance\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    min-height: 500px;\r\n    height: auto;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n\r\nexport const StyledHr = styled.div`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  width: 95%;\r\n`\r\n\r\nexport const ModalHr = styled.hr`\r\n  border-style: solid none none none;\r\n  border-width: 2px;\r\n  border-color: ${({ theme }) => theme.colors.primary};\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  stakingAddress?: string\r\n  lpInfoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  stakingAddress,\r\n  lpInfoAddress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )} */}\r\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\r\n      <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => theme.isDark? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\r\n  // background:  rgb(43,28,0);\r\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: transparent;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n    // box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  flex: 1;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  background: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n\r\n  &:focus:not(:disabled) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\n// const StyledErrorMessage = styled(Text)`\r\n//   position: absolute;\r\n//   bottom: -22px;\r\n//\r\n//   a {\r\n//     display: inline;\r\n//   }\r\n// `\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n                                                 max,\r\n                                                 // symbol,\r\n                                                 onChange,\r\n                                                 onSelectMax,\r\n                                                 value,\r\n                                                 // addLiquidityUrl,\r\n                                                 // inputTitle,\r\n                                                 decimals = 18,\r\n                                               }) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  // const displayBalance = (balance: string) => {\r\n  //   if (isBalanceZero) {\r\n  //     return '0'\r\n  //   }\r\n  //   const balanceBigNumber = new BigNumber(balance)\r\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n  //     return balanceBigNumber.toLocaleString()\r\n  //   }\r\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  // }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n        </Flex> */}\r\n        <Flex alignItems='flex-end' justifyContent='space-around'>\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode='decimal'\r\n            step='any'\r\n            min='0'\r\n            onChange={onChange}\r\n            placeholder='0'\r\n            value={value}\r\n          />\r\n          <Button size='sm' onClick={onSelectMax} mr='8px' mb='4px'>\r\n            {t('Max')}\r\n          </Button>\r\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      <Flex>\r\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {t('Available')}: {getFullDisplayBalance}\r\n          </Text>  */}\r\n\r\n\r\n      </Flex>\r\n      {/* {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n"],"sourceRoot":""}
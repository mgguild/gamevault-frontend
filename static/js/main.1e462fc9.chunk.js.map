{"version":3,"sources":["state/actions.ts","contexts/Localization/helpers.ts","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","config/constants/priceHelperLps.ts","state/farms/fetchPublicFarmData.ts","state/farms/fetchFarm.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmsPrices.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","hooks/useRefresh.ts","config/constants/farms.ts","config/constants/index.ts","utils/getRpcUrl.ts","config/constants/guildpads.ts","config/constants/Guildpads/TankWarsZone.ts","config/constants/Guildpads/Demole.ts","utils/web3React.ts","config/constants/contracts.ts","utils/addressHelpers.ts","utils/index.ts","state/guildpads/fetchPublicGuildpadData.ts","state/guildpads/fetchGuildpad.ts","state/guildpads/fetchGuildpads.ts","state/guildpads/fetchGuildpadUser.ts","state/guildpads/index.ts","state/teams/helpers.ts","config/constants/teams.ts","state/pools/helpers.ts","state/hooks.ts","hooks/useToast.ts","hooks/useAuth.ts","config/constants/ifo.ts","state/block/index.ts","utils/collectibles.ts","utils/farmsPriceHelpers.ts","state/collectibles/index.ts","contexts/ThemeContext.tsx","config/constants/campaigns.ts","utils/achievements.ts","state/achievements/helpers.ts","state/achievements/index.ts","contexts/ToastsContext/Provider.tsx","hooks/useTabVisibility.ts","contexts/RefreshContext.tsx","utils/bigNumber.ts","utils/compoundApyHelpers.ts","views/Pools/helpers.tsx","components/layout/Container.tsx","hooks/useTheme.ts","config/constants/meta.ts","components/layout/Page.tsx","utils/apr.ts","utils/wallet.ts","utils/farmHelpers.ts","config/constants/types.ts","utils/multicall.ts","utils/formatBalance.ts","config/index.ts","utils/settings.ts","utils/contractHelpers.ts","state/predictions/index.ts","state/index.ts","config/constants/tokens.ts","config/constants/pools.ts","state/types.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/fetchVaultPublic.ts","state/pools/fetchVaultUser.ts","state/pools/index.ts","state/predictions/helpers.ts","state/predictions/queries.ts","config/localization/languages.ts","utils/web3.ts","state/teams/index.tsx","state/profile/helpers.ts","state/profile/getProfile.ts","state/profile/index.tsx","hooks/useEagerConnect.ts","views/Farms/Redirects.tsx","style/Global.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/SuspenseWithChunkError/index.tsx","components/ToastListener/index.tsx","components/PageLoader.tsx","components/EasterEgg/EasterEgg.tsx","App.tsx","Providers.tsx","index.tsx","config/constants/endpoints.ts","config/constants/nfts.ts"],"names":["LS_KEY","fetchLocale","locale","a","fetch","process","response","json","data","getLanguageCodeFromLS","localStorage","getItem","EN","initialState","isFetching","currentLanguage","languageMap","Map","set","translations","LanguageContext","createContext","undefined","LanguageProvider","children","useState","codeFromStorage","languages","state","setState","useEffect","enLocale","get","currentLocale","prevState","fetchInitialLocales","setLanguage","language","has","setItem","translate","useCallback","key","translatedText","match","interpolatedText","Object","keys","forEach","dataKey","templateKey","RegExp","replace","toString","Provider","value","t","useTranslation","languageContext","useContext","Error","priceHelperLps","fetchFarm","farm","pid","lpAddresses","token","quoteToken","stakingAddresses","lpAddress","getAddress","calls","address","name","params","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpStakingCalls","lpStaking","totalSupply","periodFinish","rewardRate","totalDeposits","BigNumber","totalRewardRate","times","endDate","Date","setUTCSeconds","hasEnded","now","remainingDays","Math","max","ceil","lpTokenRatio","div","tokenAmountTotal","BIG_TEN","pow","quoteTokenAmountTotal","tokenAmountMc","quoteTokenAmountMc","lpTotalInQuoteToken","masterchefABI","info","totalAllocPoint","allocPoint","_hex","BIG_ZERO","poolWeight","toJSON","tokenPriceVsQuote","multiplier","fetchPublicFarmData","farmPublicData","fetchFarms","farmsToFetch","Promise","all","map","farmConfig","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","symbol","filterFarmsByQuoteToken","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","quoteTokenInBusd","getFarmQuoteTokenPrice","BIG_ONE","fetchFarmsPrices","bnbBusdFarm","find","farmsWithPrices","baseTokenPrice","quoteTokenPrice","busdPrice","fetchFarmUserAllowances","account","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","lpStakingAbi","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","farmsConfig","userData","allowance","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","isArchivedPid","fetchFarmsPublicDataAsync","createAsyncThunk","pids","includes","farmsWithPriceHelpers","concat","priceHelperLpsConfig","farmsWithoutHelperLps","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","farmsSlice","createSlice","reducers","setLoadArchivedFarmsData","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","farmData","userDataEl","findIndex","actions","useRefresh","RefreshContext","fastRefresh","fast","slowRefresh","slow","isMain","lpSymbol","97","56","tokens","mgg","pairToken","busd","isPromoted","nodes","getNodeUrl","randomIndex","random","length","Guildpads","id","title","description","socials","website","twitter","telegram","discord","medium","type","TYPE","INO","distribution","DISTRIBUTION","AIRDROP","status","GUILDPAD_STATUS","ongoing","contractAddress","buyingCoin","wbnb","sellingCoin","TankWarsZone","inoDetails","price","boxes","date","start","end","boxDetails","redeemInfo","rewardList","rarityLevels","epochEndDate","nextRoundDate","youtube","upcoming","demole","rpcUrl","chainId","parseInt","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","bscConnector","BscConnector","connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","provider","MAINNET_CHAIN_ID","getCakeAddress","cake","addresses","getMulticallAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getLotteryV2Address","getPancakeProfileAddress","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getEasterNftAddress","getCakeVaultAddress","getPredictionsAddress","getChainlinkOracleAddress","isAddress","getBscScanLink","ChainId","MAINNET","BASE_BSC_SCAN_URLS","fetchPublicGuildpadData","guildpad","guildpadAddress","multicallv2","ino","hasStarted","boxInfo","totalSold","totalRaise","soldRarity1","buyLimitEnabled","buyLimit","whitelistEnabled","boxPrice","getBalanceAmount","rarityPrice","percentSold","raritySupply","multipliedBy","1","supply","sold","toPrecision","fetchGuildpad","guildpadPublicData","fetchGuildpads","guildpadsToFetch","guildpadConfig","fetchGuildpadUserBoxes","gpad","rawBoxes","parsedBoxes","box","fetchGuildpadIsUserWhitelisted","rawValues","parseValues","guildpadsConfig","boxesBought","isWhitelisted","fetchPublicGuildpadDataAsync","ids","guildpadToFetch","guildpads","fetchGuildpadUserDataAsync","useGuildpadBoxes","useGuildpadIsWhitelist","guildpadSlice","liveGuildpadData","guildpadData","profileContract","getProfileContract","getTeam","teamId","methods","getTeamProfile","call","teamName","numberUsers","numberPoints","isJoinable","staticTeamInfo","teamsList","staticTeam","merge","users","points","getTeams","teamsById","reduce","accum","team","numberTeams","nbTeams","i","push","profileABI","teamData","onChainTeamData","toNumber","teams","images","lg","md","sm","alt","ipfs","background","textColor","transformUserData","stakingTokenBalance","pendingReward","transformPool","pool","totalStaked","stakingLimit","rest","getTokenPricesFromFarm","prices","quoteTokenAddress","toLocaleLowerCase","tokenAddress","usePollFarmsData","includeArchive","dispatch","useAppDispatch","useWeb3React","farmToFetch","usePollCoreFarmData","usePollBlockNumber","interval","setInterval","web3NoAccount","eth","getBlockNumber","blockNumber","setBlock","clearInterval","useFarms","useSelector","useFarmFromPid","f","useFarmUser","useBusdPriceFromPid","useLpTokenPrice","farmTokenPriceInUsd","lpTokenPrice","overallValueOfAllTokensInFarm","totalLpTokens","useFetchPublicPoolsData","fetchPoolsPublicDataAsync","fetchPoolsPublicData","fetchPoolsStakingLimitsAsync","usePools","fetchPoolsUserDataAsync","pools","useFetchCakeVault","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","useCakeVault","cakeVault","totalSharesAsString","totalShares","pricePerFullShareAsString","pricePerFullShare","totalCakeInVaultAsString","totalCakeInVault","estimatedCakeBountyRewardAsString","estimatedCakeBountyReward","totalPendingCakeHarvestAsString","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","isLoading","userSharesAsString","userShares","cakeAtLastUserActionAsString","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","useMemo","useFetchProfile","fetchProfile","useProfile","profile","isInitialized","hasRegistered","hasProfile","usePriceCakeBusd","useBlock","block","useGuildpads","useGuildpadData","useToast","toastContext","ToastsContext","useAuth","activate","deactivate","toastError","login","connectorID","connector","error","UnsupportedChainIdError","setupNetwork","window","removeItem","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","message","logout","profileClear","close","ifos","blockSlice","currentBlock","initialBlock","getIdentifierKeyFromAddress","nftAddress","nftSource","values","nftSources","nftSourceEntry","identifierKey","getTokenUrl","tokenUri","startsWith","IPFS_GATEWAY","slice","getTokenUriData","tokenId","contract","getErc721Contract","tokenURI","uriDataResponse","ok","uriData","console","getNftByTokenId","Nfts","nft","identifier","preferredFarm","some","fetchWalletNfts","nftSourcePromises","nftSourceType","addressObj","getTokenIdAndData","tokenOfOwnerByIndex","walletNft","Number","balanceOf","balanceOfResponse","nftDataFetchPromises","nftData","nftSourceData","flat","collectiblesSlice","pending","association","CACHE_KEY","ThemeContext","React","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","stringify","theme","dark","light","campaigns","badge","campaignMap","campaign","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","request","GRAPH_API_PROFILE","gql","toLowerCase","user","getAchievements","pointIncreaseEvents","userPoint","campaignMeta","campaignId","achievementSlice","addAchievement","addAchievements","setAchievements","clearAchievements","fetchAchievements","achievements","ToastsProvider","toasts","setToasts","toast","prevToasts","kebabCase","currentToasts","prevToast","clear","remove","toastTypes","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","useTabVisibility","tabVisibleRef","useRef","onVisibilityChange","current","document","hidden","addEventListener","removeEventListener","RefreshContextProvider","setSlow","setFast","prev","BIG_NINE","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","getBalanceNumber","amountInCake","cakeAsNumberBalance","cakeAsBigNumber","getDecimalAmount","cakeAsDisplayBalance","getFullDisplayBalance","convertCakeToShares","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","getAprData","isAutoVault","earningTokenPrice","apr","isHighValueToken","round","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","getCakeVaultEarnings","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","autoUsdToDisplay","getPoolBlockInfo","startBlock","endBlock","isFinished","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","Container","styled","mediaQueries","useTheme","StyledThemeContext","DEFAULT_META","image","StyledPage","PageMeta","pageMeta","path","getCustomMeta","useLocation","pathname","property","content","Page","props","getPoolApr","stakingTokenPrice","rewardTokenPrice","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","isNaN","isFinite","getFarmV2Apr","LPTokenPrice","EPOCH_PER_YEAR","getFarmApr","cakePriceUsd","poolLiquidityUsd","CAKE_PER_YEAR","ethereum","log","method","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","BASE_BSC_SCAN_URL","registerToken","tokenImage","options","tokenAdded","calculateUserRewardRate","stakingToken","Token","rewardsToken","rewardRateAmount","TokenAmount","stakedAmount","token0","token1","dummyPair","Pair","totalStakedAmount","liquidityToken","JSBI","BigInt","raw","greaterThan","divide","multiply","toSignificant","PoolIds","PoolCategory","NftType","completed","IDO","VESTING","SELF_CLAIM","abi","multi","getMulticallContract","web3","itf","Interface","calldata","encodeFunctionData","aggregate","returnData","res","decodeFunctionResult","tryAggregate","requireSuccess","result","amount","balance","decimalsToAppear","formatNumber","number","minPrecision","maxPrecision","minimumFractionDigits","maximumFractionDigits","toLocaleString","config","EXPONENTIAL_AT","DECIMAL_PLACES","BSC_BLOCK_TIME","CAKE_PER_BLOCK","BASE_URL","BASE_EXCHANGE_URL","BASE_INFO_URL","BASE_ADD_LIQUIDITY_URL","BASE_SWAP_URL","LOTTERY_TICKET_PRICE","DEFAULT_TOKEN_DECIMAL","DEFAULT_GAS_LIMIT","DEFAULT_GAS_PRICE","TESTNET_CHAIN_ID","SPARKSWAP_API","API_ASSETS","API_DATA","API_LASTPRICE","GAS_SETTINGS","default","reallyfast","getDefaultSettings","gasPrice","getStorageKey","getSettings","settingsFromLs","getContract","amountInGwei","_web3","Contract","getBep20Contract","bep20Abi","erc721Abi","getLpStakingContract","getIfoV1Contract","ifoV1Abi","getInoContract","inoAbi","getIfoV2Contract","ifoV2Abi","getSouschefContract","poolsConfig","sousId","poolCategory","BINANCE","sousChefBnb","sousChef","getSouschefV2Contract","sousChefV2","getPointCenterIfoContract","pointCenterIfo","getCakeContract","cakeAbi","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getLotteryContract","lotteryAbi","getLotteryTicketContract","lotteryTicketAbi","getLotteryV2Contract","lotteryV2Abi","getMasterchefContract","masterChef","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getEasterNftContract","easterNftAbi","getCakeVaultContract","cakeVaultAbi","getPredictionsContract","predictionsAbi","getChainlinkOracleContract","chainlinkOracleAbi","MultiCallAbi","PredictionStatus","INITIAL","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","HistoryFilter","ALL","currentEpoch","currentRoundStartBlockNumber","intervalBlocks","bufferBlocks","minBetAmount","lastOraclePrice","rounds","history","bets","fetchBet","getBet","bet","transformBetResponse","fetchRoundBet","roundId","getBetHistory","betResponses","betResponse","fetchCurrentBets","roundIds","round_in","fetchHistory","claimed","predictionsSlice","setPredictionStatus","setHistoryPaneState","setChartPaneState","setHistoryFilter","initialize","updateMarketData","market","newRoundData","makeRoundData","incomingCurrentRound","maxBy","epoch","newestRound","futureRound","transformRoundResponse","makeFutureRoundResponse","paused","PAUSED","LIVE","setCurrentEpoch","markBetAsCollected","accountBets","markPositionAsEntered","setLastOraclePrice","betData","currentBet","rejected","store","configureStore","devTools","reducer","achievementsReducer","guildpadReducer","blockReducer","farmsReducer","poolsReducer","predictions","predictionsReducer","profileReducer","teamsReducer","collectibles","collectiblesReducer","useDispatch","iconExtension","projectLink","acknoledger","96","sfuel","bnb","txl","cos","bunny","alice","for","bux","nuls","belt","ramp","bfi","dexe","bel","tpt","watch","xmark","bmxx","iotx","bor","bopen","dodo","swingby","bry","zee","swgb","swg","sfp","lina","lit","hget","bdo","egld","ust","wsote","front","helmet","btcst","bscx","ten","balbt","asr","atm","og","reef","ditto","juv","psg","vai","blink","unfi","twt","hard","broobee","stax","nar","nya","ctk","inj","sxp","alpha","xvs","sushi","comp","syrup","bifi","dusk","beth","mamzn","mgoogl","mnflx","mtsla","ltc","usdc","dai","ada","band","dot","eos","link","usdt","btcb","xrp","atom","yfii","xtz","bch","yfi","uni","fil","bake","burger","bdigg","bbadger","trade","pnt","mir","pbtc","lto","pcws","zil","lien","swth","dft","gum","dego","nrv","easy","oddz","hoo","apys","bondly","tko","itam","arpa","eps","jgn","tlm","perl","alpa","hzn","suter","cgg","mix","hakka","xed","τbtc","alpaca","dfd","lmt","btt","trx","win","mcoin","math","kun","qsd","hyfi","oin","doge","fine","one","pmon","hotcross","τdoge","btr","ubxt","wmass","rfox","xend","cyc","chr","kalm","deri","well","popen","ez","vrt","tusd","mtrg","ktn","qkc","bcfx","mx","ata","mbox","boring","marsh","ampl","o3","hai","htb","woo","$dg","srkb","ttkb","own","kclp","kroot","bglg","kgo","tipsy","gzila","flash","bhc","hps","earningToken","CORE","harvest","sortOrder","BetPosition","fetchPoolsBlockLimits","poolsWithEnd","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","fetchPoolsTotalStaking","nonBnbPools","bnbPool","callsNonBnbPools","callsBnbPools","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","fetchPoolStakingLimit","sousContract","poolLimitPerUser","fetchPoolsStakingLimits","poolsWithStakingLimit","validPools","stakingLimitPromises","validPool","stakingLimits","bnbPools","nonMasterPools","masterChefContract","fetchPoolsAllowance","allowances","acc","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingCake","fetchPublicVaultData","sharePrice","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","fetchVaultFees","cakeVaultContract","fetchVaultUser","userContractResponse","getState","blockLimits","totalStakings","liveData","blockLimit","entry","totalStaking","isPoolEndBlockExceeded","isPoolFinished","stakingTokenAddress","earningTokenAddress","setPoolsPublicData","stakingLimitData","stakingTokenBalances","setPoolsUserData","updateUserAllowance","updatePoolsUserData","field","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","publicVaultInfo","vaultFees","PoolsSlice","livePoolsData","livePoolData","userPoolData","Result","numberOrNull","valueNum","failed","startAt","lockAt","lockBlock","lockPrice","closePrice","totalBets","totalAmount","bearBets","bullBets","bearAmount","bullAmount","position","hash","BULL","BEAR","claimedHash","totalBNB","roundResponse","positionResponse","getCanClaim","where","first","skip","GRAPH_API_PREDICTION","betId","code","languageList","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","archivedHttpProvider","ARCHIVED_NODE","web3WithArchivedNodeProvider","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","fetchTeam","fetchTeams","transformProfileResponse","profileResponse","userId","isActive","profileApi","REACT_APP_API_PROFILE","getUsername","username","getProfile","getUserProfile","Cookies","avatar","domain","secure","expires","profileSlice","profileFetchStart","profileFetchSucceeded","_state","profileFetchFailed","addPoints","_binanceChainListener","resolve","defineProperty","this","bsc","useEagerConnect","connectorId","connectorLocalStorageKey","isConnectorBinanceChain","isBinanceChainDefined","Reflect","then","RedirectToFarms","location","to","GlobalStyle","createGlobalStyle","colors","label","icon","items","href","Menu","currentLang","langs","setLang","links","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","nextState","replaceState","reload","fallback","Component","ToastListener","onRemove","Wrapper","PageLoader","EasterEgg","show","setShow","startFalling","useKonamiCheatCode","onAnimationEnd","memo","Farms","lazy","Pools","ComingSoon","Guildpad","NotFound","Pad","ExternalRedirect","App","Global","exact","component","iterations","Providers","ReactDOM","render","StrictMode","getElementById","PANCAKE","MIXIE","variationId","video","webm","mp4","blur"],"mappings":"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","file":"static/js/main.1e462fc9.chunk.js","sourcesContent":["export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\nexport { profileFetchStart, profileFetchSucceeded, profileFetchFailed } from './profile'\nexport { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } from './teams'\nexport { setBlock } from './block'\n","import { EN } from 'config/localization/languages'\n\nconst publicUrl = process.env.PUBLIC_URL\n\nexport const LS_KEY = 'pancakeswap_language'\n\nexport const fetchLocale = async (locale) => {\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\n  const data = await response.json()\n  return data\n}\n\nexport const getLanguageCodeFromLS = () => {\n  try {\n    const codeFromStorage = localStorage.getItem(LS_KEY)\n\n    return codeFromStorage || EN.locale\n  } catch {\n    return EN.locale\n  }\n}\n","import React, { createContext, useCallback, useEffect, useState } from 'react'\nimport { Language } from '@pancakeswap/uikit'\nimport { EN, languages } from 'config/localization/languages'\nimport translations from 'config/localization/translations.json'\nimport { ContextApi, ContextData, ProviderState } from './types'\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\n// Export the translations directly\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n    const codeFromStorage = getLanguageCodeFromLS()\n\n    return {\n      ...initialState,\n      currentLanguage: languages[codeFromStorage],\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      const enLocale = languageMap.get(EN.locale)\n\n      // Merge the EN locale to ensure that any locale fetched has all the keys\n      languageMap.set(language.locale, { ...enLocale, ...locale })\n      localStorage.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }\n\n  const translate = useCallback(\n    (key: string, data?: ContextData) => {\n      const translationSet = languageMap.has(currentLanguage.locale)\n        ? languageMap.get(currentLanguage.locale)\n        : languageMap.get(EN.locale)\n      const translatedText = translationSet[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n","import { useContext } from 'react'\nimport { LanguageContext } from './Provider'\n\nconst useTranslation = () => {\n  const languageContext = useContext(LanguageContext)\n\n  if (languageContext === undefined) {\n    throw new Error('Language context is undefined')\n  }\n\n  return languageContext\n}\n\nexport default useTranslation\n","import { FarmConfig } from './types'\n\nconst priceHelperLps: FarmConfig[] = [\n  /**\n   * These LPs are just used to help with price calculation for MasterChef LPs (farms.ts).\n   * This list is added to the MasterChefLps and passed to fetchFarm. The calls to get contract information about the token/quoteToken in the LP are still made.\n   * The absense of a PID means the masterchef contract calls are skipped for this farm.\n   * Prices are then fetched for all farms (masterchef + priceHelperLps).\n   * Before storing to redux, farms without a PID are filtered out.\n   */\n  // {\n  //   pid: null,\n  //   lpSymbol: 'QSD-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x7b3ae32eE8C532016f3E31C8941D937c59e055B9',\n  //   },\n  //   token: tokens.qsd,\n  //   quoteToken: tokens.wbnb,\n  // },\n]\n\nexport default priceHelperLps\n","import BigNumber from 'bignumber.js'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport { now } from 'lodash'\nimport erc20 from 'config/abi/erc20.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport multicall from 'utils/multicall'\nimport lpStaking from 'config/abi/lpStaking.json'\nimport { Farm, SerializedBigNumber } from '../types'\n\ntype PublicFarmData = {\n  totalDeposits: SerializedBigNumber\n  rewardRate: SerializedBigNumber\n  totalRewardRate: SerializedBigNumber\n  hasEnded: boolean\n  remainingDays: string\n  tokenAmountMc: SerializedBigNumber\n  quoteTokenAmountMc: SerializedBigNumber\n  tokenAmountTotal: SerializedBigNumber\n  quoteTokenAmountTotal: SerializedBigNumber\n  lpTotalInQuoteToken: SerializedBigNumber\n  lpTotalSupply: SerializedBigNumber\n  tokenPriceVsQuote: SerializedBigNumber\n  poolWeight: SerializedBigNumber\n  multiplier: string\n}\n\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken, stakingAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: getAddress(token.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: getAddress(quoteToken.address),\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: getAddress(token.address),\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: getAddress(quoteToken.address),\n      name: 'decimals',\n    },\n  ]\n\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n    await multicall(erc20, calls)\n  const lpStakingCalls = [\n    // Total deposits in staking address\n    {\n      address: getAddress(stakingAddresses),\n      name: 'totalSupply',\n    },\n    // Total deposits in staking address\n    {\n      address: getAddress(stakingAddresses),\n      name: 'periodFinish',\n    },\n    {\n      address: getAddress(stakingAddresses),\n      name: 'rewardRate',\n    },\n  ]\n  const [totalSupply, periodFinish, rewardRate] =\n    await multicall(lpStaking, lpStakingCalls)\n\n  // Total Deposits in staking address\n  const totalDeposits = new BigNumber(totalSupply)\n\n  // total reward rate\n  const totalRewardRate = new BigNumber(rewardRate).times(60 * 60 * 24 * 7)\n\n  // console.log(totalRewardRate)\n\n  const endDate = (new Date(0)).setUTCSeconds(periodFinish)\n  const hasEnded = endDate < now()\n  const remainingDays = (Math.max(0, Math.ceil(((((endDate - now()) / 1000) / 60) / 60) / 24))).toString()\n\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n\n  // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n\n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\n\n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] =\n    pid || pid === 0\n      ? await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n      ])\n      : [null, null]\n\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\n\n  return {\n    totalDeposits: totalDeposits.toJSON(),\n    'rewardRate': new BigNumber(rewardRate).toJSON(),\n    'totalRewardRate': totalRewardRate.toJSON(),\n    'hasEnded': hasEnded,\n    'remainingDays': remainingDays,\n    tokenAmountMc: tokenAmountMc.toJSON(),\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  }\n}\n\nexport default fetchFarm\n","import { Farm } from 'state/types'\nimport fetchPublicFarmData from './fetchPublicFarmData'\n\nconst fetchFarm = async (farm: Farm): Promise<Farm> => {\n  const farmPublicData = await fetchPublicFarmData(farm)\n\n  return { ...farm, ...farmPublicData }\n}\n\nexport default fetchFarm\n","import { FarmConfig } from 'config/constants/types'\nimport fetchFarm from './fetchFarm'\n\nconst fetchFarms = async (farmsToFetch: FarmConfig[]) => {\n  const data = await Promise.all(\n    farmsToFetch.map(async (farmConfig) => {\n      const farm = await fetchFarm(farmConfig)\n      return farm\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport { Farm } from 'state/types'\n\nconst getFarmFromTokenSymbol = (farms: Farm[], tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\n  return filteredFarm\n}\n\nconst getFarmBaseTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\n\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (farm.quoteToken.symbol === 'wBNB') {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\n  return BIG_ZERO\n}\n\nconst getFarmQuoteTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE\n  }\n\n  if (farm.quoteToken.symbol === 'wBNB') {\n    return bnbPriceBusd\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  return BIG_ZERO\n}\n\nconst fetchFarmsPrices = async (farms) => {\n  const bnbBusdFarm = farms.find((farm: Farm) => farm.pid === 251)\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\n\n  const farmsWithPrices = farms.map((farm) => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n    const token = { ...farm.token, busdPrice: baseTokenPrice.toJSON() }\n    const quoteToken = { ...farm.quoteToken, busdPrice: quoteTokenPrice.toJSON() }\n    return { ...farm, token, quoteToken }\n  })\n\n  return farmsWithPrices\n}\n\nexport default fetchFarmsPrices\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport multicall from 'utils/multicall'\nimport { getAddress } from 'utils/addressHelpers'\nimport { FarmConfig } from 'config/constants/types'\nimport lpStakingAbi from 'config/abi/lpStaking.json'\n\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return { address: lpContractAddress, name: 'allowance', params: [account, getAddress(farm.stakingAddresses)] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: getAddress(farm.stakingAddresses),\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n\n  const rawStakedBalances = await multicall(lpStakingAbi, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: getAddress(farm.stakingAddresses),\n      name: 'earned',\n      params: [account],\n    }\n  })\n\n  const rawEarnings = await multicall(lpStakingAbi, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport isArchivedPid from 'utils/farmHelpers'\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\nimport fetchFarms from './fetchFarms'\nimport fetchFarmsPrices from './fetchFarmsPrices'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\n  ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0',\n  },\n}))\n\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\n\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\n\n// Async thunks\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\n  'farms/fetchFarmsPublicDataAsync',\n  async (pids) => {\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\n\n    // Add price helper farms\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\n\n    const farms = await fetchFarms(farmsWithPriceHelpers)\n    const farmsWithPrices = await fetchFarmsPrices(farms)\n\n    // Filter out price helper LP config farms\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\n      return farm.pid || farm.pid === 0\n    })\n\n    return farmsWithoutHelperLps\n  },\n)\n\ninterface FarmUserDataResponse {\n  pid: number\n  allowance: string\n  tokenBalance: string\n  stakedBalance: string\n  earnings: string\n}\n\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\n  'farms/fetchFarmUserDataAsync',\n  async ({ account, pids }) => {\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\n\n    return userFarmAllowances.map((farmAllowance, index) => {\n      return {\n        pid: farmsToFetch[index].pid,\n        allowance: userFarmAllowances[index],\n        tokenBalance: userFarmTokenBalances[index],\n        stakedBalance: userStakedBalances[index],\n        earnings: userFarmEarnings[index],\n      }\n    })\n  },\n)\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload\n      state.loadArchivedFarmsData = loadArchivedFarmsData\n    },\n  },\n  extraReducers: (builder) => {\n    // Update farms with live data\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\n      state.data = state.data.map((farm) => {\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    })\n\n    // Update farms with user data\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach((userDataEl) => {\n        const { pid } = userDataEl\n        const index = state.data.findIndex((farm) => farm.pid === pid)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    })\n  },\n})\n\n// Actions\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\n\nexport default farmsSlice.reducer\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import tokens from './tokens'\nimport { FarmConfig } from './types'\nimport { CAKE_INFO_URL, PANCAKE_ADD_LIQUIDITY_URL } from '../index'\n\nconst farms: FarmConfig[] = [\n  /**\n   * These 3 farms (PID 0, 251, 252) should always be at the top of the file.\n   */\n  /* {\n    pid: 0,\n    lpSymbol: 'CAKE',\n    lpAddresses: {\n      97: '',\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n    },\n    token: tokens.syrup,\n    quoteToken: tokens.wbnb,\n  },\n  */\n\n  /**\n   * INTERNAL STAKING POOLS\n   */\n  // OWN - BNB - OWN\n  // {\n  //   pid: 251,\n  //   lpSymbol: 'SRKb-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xD581CdF609DD50fbaa25118583c6EE31b39662F9',\n  //   },\n  //   stakingAddresses: {\n  //     97: '',\n  //     56: '0xCec445174D6f4e87d38d43d4b13E36dd55CC56A1',\n  //   },\n  //   token: tokens.srkb,\n  //   pairToken: tokens.wbnb,\n  //   quoteToken: tokens.srkb,\n  // },\n  // {\n  //   pid: 252,\n  //   lpSymbol: 'OWN-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xB31F2F7939108D9a518f6152689Dc1463091Ee7b',\n  //   },\n  //   stakingAddresses: {\n  //     97: '',\n  //     56: '0x0Fe376032276Ad5fc55e782D6AB1f85Ce0669BFB',\n  //   },\n  //   token: tokens.own,\n  //   pairToken: tokens.wbnb,\n  //   quoteToken: tokens.own,\n  // },\n\n  /**\n   * EXTERNAL STAKING POOLS\n   */\n  {\n    isMain: true,\n    pid: 251,\n    lpSymbol: 'MGG-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x709eE9F39F1eC7aAcB05234C64d32b6DD5626309',\n    },\n    stakingAddresses: {\n      97: '',\n      56: '0xc5A228b9Ec0605944ee7a7cf5CBE528F310257DF',\n    },\n    token: tokens.mgg,\n    pairToken: tokens.busd,\n    quoteToken: tokens.mgg,\n    isPromoted: 1\n  },\n\n]\n\nexport default farms\n","export { default as farmsConfig } from './farms'\nexport { default as guildpadConfig } from './guildpads'\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import { GuildpadConfig } from \"./types\";\nimport MggGuildpad from \"./Guildpads/MggGuildpad\";\nimport TankWarsZoneGuildpad from './Guildpads/TankWarsZone';\nimport DemoleGuildpad from './Guildpads/Demole';\nimport AcknoledgerGuildpad from './Guildpads/Acknoledger';\n\nconst Guildpads: GuildpadConfig[] = [\n    TankWarsZoneGuildpad,\n    DemoleGuildpad,\n]\n\nexport default Guildpads\n","import BigNumber from 'bignumber.js'\nimport { GuildpadConfig, GUILDPAD_STATUS, TYPE, DISTRIBUTION } from \"../types\";\nimport tokens from '../tokens';\n\nconst socials = {\n  website: 'https://www.tankwars.zone/',\n  twitter: 'https://twitter.com/TankWarsZone',\n  telegram: 'https://t.me/TankWarsZone',\n  discord: 'https://discord.com/invite/82jCm7QyRA',\n  medium: 'https://tankwarszone.medium.com/'\n}\nconst guildpad: GuildpadConfig = {\n  id: 2,\n  title: 'TankWars Zone',\n  description: 'Tank wars zone is a metaverse-ready exciting and visually refreshing action game built on blockchain technology. Being the first blockchain game on Fantom & invested by the Fantom Foundation, the game will have very low transactions fees, the lowest time confirmations, and supportive communities for players. With various gameplays, you can play solo, or gather your friends, form a team, and battle with others while being able to earn money just by playing or staking your NFTs.',\n  socials,\n  type: TYPE.INO,\n  distribution: DISTRIBUTION.AIRDROP,\n  status: GUILDPAD_STATUS.ongoing,\n  contractAddress: {\n    97: '0xE673E67bD59A7390725ED98cBead9A5928F6f51E',\n    56: '0xf99869Fb775456e84Aa980f1fC104297694b8c47',\n  },\n  buyingCoin: tokens.wbnb,\n  sellingCoin: tokens.TankWarsZone,\n  inoDetails: {\n    price: 'TBA',\n    boxes: '300',\n  },\n  date: {\n    start: 'February 18, 2022 1PM UTC',\n    end: 'February 19, 2022 1PM UTC'\n  },\n  boxDetails:{\n    redeemInfo: 'Mystery Box can be later redeemed for Tanks after the Game Official Launch.',\n    rewardList: [ // made into array in case tokens & nfts are both rewards\n      {\n        description: 'There are 5 different tank rarity levels:',\n        rarityLevels: [\n          '5923 Common Tanks',\n          '2200 Uncommon Tanks',\n          '1100 Rare Tanks',\n          '555 Epic Tanks',\n          '222 Legendary Tanks',\n        ]\n      }\n    ]\n  },\n  epochEndDate: 1645246800000,\n  nextRoundDate: 1645275600000\n}\n\nexport default guildpad\n","import BigNumber from 'bignumber.js'\nimport { GuildpadConfig, GUILDPAD_STATUS, TYPE, DISTRIBUTION } from \"../types\";\nimport tokens from '../tokens';\n\n\nconst socials = {\n    website: 'https://demole.io/',\n    twitter: 'https://twitter.com/demoleio',\n    telegram: 'https://t.me/Demoleio',\n    discord: 'https://discord.com/invite/demole',\n    youtube: 'https://www.youtube.com/channel/UCs69Rvm26wDYf7-r3YX2Bzw'\n}\n\nconst guildpad: GuildpadConfig = {\n    id: 3,\n    title: 'Demole',\n    description: 'Demole is a 3D Metaverse Game that allows players to walk through 3 different modes of the world Metaverse from Station, RPG, and MOBA.',\n    socials,\n    type: TYPE.INO,\n    distribution: DISTRIBUTION.AIRDROP,\n    status: GUILDPAD_STATUS.upcoming,\n    contractAddress: {\n      97: '0x002',\n      56: '0x002',\n    },\n    buyingCoin: tokens.wbnb,\n    sellingCoin: tokens.demole,\n    inoDetails: {\n        price: 'TBA',\n    },\n    date: {\n        start: 'TBA',\n        end: 'TBA'\n    },\n}\n\nexport default guildpad\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from '@pancakeswap/uikit'\nimport Web3 from 'web3'\nimport getNodeUrl from './getRpcUrl'\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): Web3 => {\n  return provider\n}\n","export default {\n  masterChef: {\n    97: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\n    56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  },\n  sousChef: {\n    97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n    56: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\n  },\n  lottery: {\n    97: '0x99c2EcD51d52c036B00130d882Bc65f20Fdecf9f',\n    56: '0x3C3f2049cc17C136a604bE23cF7E42745edf3b91',\n  },\n  lotteryNFT: {\n    97: '0x8175c10383511b3a1C68f9dB222dc14A19CC950e',\n    56: '0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1',\n  },\n  lotteryV2: {\n    97: '0x4D8B718b4e617ea49bCe6B508c23353Cc7bADd28',\n    56: '',\n  },\n  multiCall: {\n    56: '0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B',\n    97: '0x87505ef062Dcc1570169700e485B8685c99391ff',\n  },\n  pancakeProfile: {\n    56: '0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a',\n    97: '0x4B683C7E13B6d5D7fd1FeA9530F451954c1A7c8A',\n  },\n  pancakeRabbits: {\n    56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\n    97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\n  },\n  bunnyFactory: {\n    56: '0xfa249Caa1D16f75fa159F7DFBAc0cC5EaB48CeFf',\n    97: '0x707CBF373175fdB601D34eeBF2Cf665d08f01148',\n  },\n  claimRefund: {\n    56: '0xE7e53A7e9E3Cf6b840f167eF69519175c497e149',\n    97: '',\n  },\n  pointCenterIfo: {\n    56: '0x3C6919b132462C1FEc572c6300E83191f4F0012a',\n    97: '0xd2Ac1B1728Bb1C11ae02AB6e75B76Ae41A2997e3',\n  },\n  bunnySpecial: {\n    56: '0xFee8A195570a18461146F401d6033f5ab3380849',\n    97: '0x7b7b1583De1DeB32Ce6605F6deEbF24A0671c17C',\n  },\n  tradingCompetition: {\n    56: '0xd718baa0B1F4f70dcC8458154042120FFE0DEFFA',\n    97: '0xC787F45B833721ED3aC46E99b703B3E1E01abb97',\n  },\n  easterNft: {\n    56: '0x23c41D28A239dDCAABd1bb1deF8d057189510066',\n    97: '0x24ec6962dbe874F6B67B5C50857565667fA0854F',\n  },\n  cakeVault: {\n    56: '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC',\n    97: '',\n  },\n  predictions: {\n    56: '0x516ffd7D1e0Ca40b1879935B2De87cb20Fc1124b',\n    97: '0x4f3140C74789F1D809420343ea83BcE52B7bbAA5',\n  },\n  chainlinkOracle: {\n    56: '0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE',\n    97: '',\n  },\n}\n","import { MAINNET_CHAIN_ID } from 'config'\nimport addresses from 'config/constants/contracts'\nimport tokens from 'config/constants/tokens'\nimport { Address } from 'config/constants/types'\n\nexport const getAddress = (address: Address): string => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  return address[chainId] ? address[chainId] : address[MAINNET_CHAIN_ID]\n}\n\nexport const getCakeAddress = () => {\n  return getAddress(tokens.cake.address)\n}\nexport const getMasterChefAddress = () => {\n  return getAddress(addresses.masterChef)\n}\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall)\n}\nexport const getWbnbAddress = () => {\n  return getAddress(tokens.wbnb.address)\n}\nexport const getLotteryAddress = () => {\n  return getAddress(addresses.lottery)\n}\nexport const getLotteryTicketAddress = () => {\n  return getAddress(addresses.lotteryNFT)\n}\nexport const getLotteryV2Address = () => {\n  return getAddress(addresses.lotteryV2)\n}\nexport const getPancakeProfileAddress = () => {\n  return getAddress(addresses.pancakeProfile)\n}\nexport const getPancakeRabbitsAddress = () => {\n  return getAddress(addresses.pancakeRabbits)\n}\nexport const getBunnyFactoryAddress = () => {\n  return getAddress(addresses.bunnyFactory)\n}\nexport const getClaimRefundAddress = () => {\n  return getAddress(addresses.claimRefund)\n}\nexport const getPointCenterIfoAddress = () => {\n  return getAddress(addresses.pointCenterIfo)\n}\nexport const getBunnySpecialAddress = () => {\n  return getAddress(addresses.bunnySpecial)\n}\nexport const getTradingCompetitionAddress = () => {\n  return getAddress(addresses.tradingCompetition)\n}\nexport const getEasterNftAddress = () => {\n  return getAddress(addresses.easterNft)\n}\nexport const getCakeVaultAddress = () => {\n  return getAddress(addresses.cakeVault)\n}\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions)\n}\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle)\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId, CurrencyAmount, JSBI, Percent } from '@pancakeswap-libs/sdk'\nimport { BASE_BSC_SCAN_URLS } from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getBscScanLink(\n  data: string | number,\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n  chainId: ChainId = ChainId.MAINNET,\n): string {\n  switch (type) {\n    case 'transaction': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\n    }\n    case 'token': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\n    }\n    case 'block': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\n    }\n    case 'countdown': {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\n    }\n    default: {\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport const epochToDate = (epochTime) => {\n  const date = new Date(0); // The 0 there is the key, which sets the date to the epoch\n  date.setUTCSeconds(epochTime);\n\n  return date;\n}\n\nexport const dateEnded = (endDate) => {\n  const current = new Date();\n  const end = epochToDate(endDate);\n\n  return current.getTime() > end.getTime()\n}\n","import ino from 'config/abi/ino.json'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport { Guildpad } from '../types'\nimport { isAddress } from '../../utils'\nimport { getBalanceAmount } from '../../utils/formatBalance'\n\ntype PublicGuildpadData = {\n  hasStarted?: boolean\n  hasEnded?: boolean\n  totalSupply?: string\n  totalSold?: string\n  totalRaise?: string\n  boxInfo?: any\n  buyLimitEnabled?: boolean\n  buyLimit?: string\n  whitelistEnabled?: boolean\n}\n\nconst fetchPublicGuildpadData = async (guildpad: Guildpad): Promise<PublicGuildpadData> => {\n  const { contractAddress } = guildpad\n  const guildpadAddress = getAddress(contractAddress)\n\n  if (!isAddress(guildpadAddress)) {\n    return guildpad\n  }\n\n  const calls = [\n    // check if guildpad already started\n    {\n      address: guildpadAddress,\n      name: 'isStart',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getIsFinished',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getTotalRaritySupply',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getRarity',\n      params: [1]\n    },\n    {\n      address: guildpadAddress,\n      name: 'getTotalRaritySold',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getTotalRaised',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getSoldRarity',\n      params: [1]\n    },\n    {\n      address: guildpadAddress,\n      name: 'getLimitPerAddressEnable',\n    },\n    {\n      address: guildpadAddress,\n      name: 'getLimitPerAddress',\n      params: [1],\n    },\n    {\n      address: guildpadAddress,\n      name: 'getWhitelistEnable',\n    },\n  ]\n\n  const [\n    hasStarted, hasEnded, totalSupply,\n    boxInfo, totalSold, totalRaise,\n    soldRarity1, buyLimitEnabled, buyLimit,\n    whitelistEnabled\n  ] =\n    await multicallv2(ino, calls)\n\n  const boxPrice = getBalanceAmount(new BigNumber(boxInfo.rarityPrice.toString()))\n  const percentSold =  new BigNumber(new BigNumber(soldRarity1.toString()).div(new BigNumber(boxInfo.raritySupply.toString())).toString()).multipliedBy(new BigNumber(100).toString())\n  return {\n    hasStarted: hasStarted[0],\n    hasEnded: hasEnded[0],\n    totalSupply: totalSupply.toString(),\n    boxInfo: {\n      1: {\n        price: boxPrice.toString(),\n        supply: boxInfo.raritySupply.toString(),\n        sold: soldRarity1.toString(),\n        percentSold: percentSold.toPrecision(4).toString(),\n      },\n    },\n    totalSold: totalSold.toString(),\n    totalRaise: totalRaise.toString(),\n    buyLimitEnabled: buyLimitEnabled[0],\n    buyLimit: buyLimit.toString(),\n    whitelistEnabled,\n  }\n}\n\nexport default fetchPublicGuildpadData\n","import { Guildpad } from 'state/types'\nimport fetchPublicGuildpadData from './fetchPublicGuildpadData'\n\nconst fetchGuildpad = async (guildpad: Guildpad): Promise<Guildpad> => {\n  const guildpadPublicData = await fetchPublicGuildpadData(guildpad)\n  return { ...guildpad, ...guildpadPublicData }\n}\n\nexport default fetchGuildpad\n","import { GuildpadConfig } from 'config/constants/types'\nimport fetchGuildpad from './fetchGuildpad'\n\nconst fetchGuildpads = async (guildpadsToFetch: GuildpadConfig[]) => {\n  const data = await Promise.all(\n    guildpadsToFetch.map(async (guildpadConfig) => {\n      const guildpad = await fetchGuildpad(guildpadConfig)\n      return guildpad\n    }),\n  )\n\n  return data\n}\n\nexport default fetchGuildpads\n","import BigNumber from 'bignumber.js'\nimport ino from 'config/abi/ino.json'\nimport multicall from 'utils/multicall'\nimport { getAddress } from 'utils/addressHelpers'\nimport { GuildpadConfig } from 'config/constants/types'\nimport { isAddress } from '../../utils'\n\n\nexport const fetchGuildpadUserBoxes = async (account: string, guildpadsToFetch: GuildpadConfig[]) => {\n  const calls = guildpadsToFetch.map((guildpad) => {\n    return {\n      address: getAddress(guildpad.contractAddress),\n      name: 'getAddressRewardedAmount',\n      params: [account, 1],\n    }\n  }).filter(gpad => {\n    return isAddress(gpad.address)\n  })\n  const rawBoxes = await multicall(ino, calls)\n  const parsedBoxes = rawBoxes.map((box) => {\n    return new BigNumber(box).toJSON()\n  })\n  return parsedBoxes\n}\n\nexport const fetchGuildpadIsUserWhitelisted = async (account: string, guildpadsToFetch: GuildpadConfig[]) => {\n  const calls = guildpadsToFetch.map((guildpad) => {\n    return {\n      address: getAddress(guildpad.contractAddress),\n      name: 'getAddressInWhitelist',\n      params: [account],\n    }\n  }).filter(gpad => {\n    return isAddress(gpad.address)\n  })\n  const rawValues = await multicall(ino, calls)\n  const parseValues = rawValues.map((value) => {\n    return value[0]\n  })\n  return parseValues\n}\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport guildpadsConfig from 'config/constants/guildpads'\nimport { Guildpad, GuildpadState } from '../types'\nimport fetchGuildpads from './fetchGuildpads'\nimport { fetchGuildpadIsUserWhitelisted, fetchGuildpadUserBoxes } from './fetchGuildpadUser'\n\nconst noAccountGuildpadConfig = guildpadsConfig.map((guildpad) => ({\n  ...guildpad,\n  totalSold: '0',\n  totalRaise: '0',\n  userData: {\n    boxesBought: '0',\n    isWhitelisted: false,\n  },\n  hasStarted: false,\n  hasEnded: false,\n  totalSupply: '0',\n  boxInfo: {\n    1: {\n      price: '0',\n      supply: '0',\n      sold: '0'\n    }\n  },\n  buyLimitEnabled: false,\n  buyLimit: '0'\n}))\n\nconst initialState: GuildpadState = { data: noAccountGuildpadConfig, userDataLoaded: false }\n\n// Async thunks\nexport const fetchPublicGuildpadDataAsync = createAsyncThunk<Guildpad[], number[]>(\n  'guildpad/fetchPublicGuildpadDataAsync',\n  async (ids) => {\n    const guildpadToFetch = guildpadsConfig.filter((guildpadConfig) => ids.includes(guildpadConfig.id))\n    const guildpads = await fetchGuildpads(guildpadToFetch)\n\n    return guildpads\n  },\n)\n\n// export const updateGuildpadStatus = createAsyncThunk('guildpad/updateGuildpadStatus', async() => {\n\n// })\n\ninterface GuildpadUserDataResponse {\n  id: number\n  boxesBought: string\n  isWhitelisted?: boolean\n}\n\nexport const fetchGuildpadUserDataAsync = createAsyncThunk<GuildpadUserDataResponse[], { account: string; ids: number[] }>(\n  'farms/fetchGuildpadUserDataAsync',\n  async ({ account, ids }) => {\n    const guildpadToFetch = guildpadsConfig.filter((guildpadConfig) => ids.includes(guildpadConfig.id))\n    const useGuildpadBoxes = await fetchGuildpadUserBoxes(account, guildpadToFetch)\n    const useGuildpadIsWhitelist = await fetchGuildpadIsUserWhitelisted(account, guildpadToFetch)\n    return useGuildpadBoxes.map((box, index) => {\n      return {\n        id: guildpadToFetch[index].id,\n        boxesBought: box,\n        isWhitelisted: useGuildpadIsWhitelist[index],\n      }\n    })\n  },\n)\n\nexport const guildpadSlice = createSlice({\n  name: 'Guildpads',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // Update guildpad with live data\n    builder.addCase(fetchPublicGuildpadDataAsync.fulfilled, (state, action) => {\n      state.data = state.data.map((guildpad) => {\n        const liveGuildpadData = action.payload.find((guildpadData) => guildpadData.id === guildpad.id)\n        return { ...guildpad, ...liveGuildpadData }\n      })\n    })\n\n    // Update guildpad with user data\n    builder.addCase(fetchGuildpadUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach((userDataEl) => {\n        const { id } = userDataEl\n        const index = state.data.findIndex((guildpad) => guildpad.id === id)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    })\n  },\n})\n\n// Actions\n// export const { setLoadArchivedGuildpadData } = guildpadSlice.actions\n\nexport default guildpadSlice.reducer\n","import merge from 'lodash/merge'\nimport teamsList from 'config/constants/teams'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Team } from 'config/constants/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { TeamsById } from 'state/types'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\n\nconst profileContract = getProfileContract()\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const {\n      0: teamName,\n      2: numberUsers,\n      3: numberPoints,\n      4: isJoinable,\n    } = await profileContract.methods.getTeamProfile(teamId).call()\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers,\n      points: numberPoints,\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return {\n        ...accum,\n        [team.id]: team,\n      }\n    }, {})\n    const nbTeams = await profileContract.methods.numberTeams().call()\n\n    const calls = []\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push({\n        address: getPancakeProfileAddress(),\n        name: 'getTeamProfile',\n        params: [i],\n      })\n    }\n    const teamData = await multicallv2(profileABI, calls)\n\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n      return {\n        ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: numberUsers.toNumber(),\n          points: numberPoints.toNumber(),\n          isJoinable,\n        },\n      }\n    }, {})\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n","import { Team } from './types'\n\nconst teams: Team[] = [\n  {\n    id: 1,\n    name: 'Syrup Storm',\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\n    images: {\n      lg: 'syrup-storm-lg.png',\n      md: 'syrup-storm-md.png',\n      sm: 'syrup-storm-sm.png',\n      alt: 'syrup-storm-alt.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png',\n    },\n    background: 'syrup-storm-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 2,\n    name: 'Fearsome Flippers',\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\n    images: {\n      lg: 'fearsome-flippers-lg.png',\n      md: 'fearsome-flippers-md.png',\n      sm: 'fearsome-flippers-sm.png',\n      alt: 'fearsome-flippers-alt.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png',\n    },\n    background: 'fearsome-flippers-bg.svg',\n    textColor: '#FFFFFF',\n    users: 0,\n    points: 0,\n  },\n  {\n    id: 3,\n    name: 'Chaotic Cakers',\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\n    images: {\n      lg: 'chaotic-cakers-lg.png',\n      md: 'chaotic-cakers-md.png',\n      sm: 'chaotic-cakers-sm.png',\n      alt: 'chaotic-cakers-alt.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png',\n    },\n    background: 'chaotic-cakers-bg.svg',\n    textColor: '#191326',\n    users: 0,\n    points: 0,\n  },\n]\n\nexport default teams\n","import BigNumber from 'bignumber.js'\nimport { Farm, Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ntype UserData =\n  | Pool['userData']\n  | {\n      allowance: number | string\n      stakingTokenBalance: number | string\n      stakedBalance: number | string\n      pendingReward: number | string\n    }\n\nexport const transformUserData = (userData: UserData) => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\n  }\n}\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit),\n  } as Pool\n}\n\nexport const getTokenPricesFromFarm = (farms: Farm[]) => {\n  return farms.reduce((prices, farm) => {\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase()\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase()\n    /* eslint-disable no-param-reassign */\n    if (!prices[quoteTokenAddress]) {\n      prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber()\n    }\n    if (!prices[tokenAddress]) {\n      prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber()\n    }\n    /* eslint-enable no-param-reassign */\n    return prices\n  }, {})\n}\n","import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { orderBy } from 'lodash'\nimport { Team } from 'config/constants/types'\nimport Nfts from 'config/constants/nfts'\nimport { farmsConfig, guildpadConfig } from 'config/constants'\nimport web3NoAccount from 'utils/web3'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useRefresh from 'hooks/useRefresh'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport {\n  fetchCakeVaultFees,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchFarmsPublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  setBlock,\n} from './actions'\nimport {\n  AchievementState,\n  Farm,\n  FarmsState,\n  Guildpad,\n  GuildpadState,\n  Pool,\n  ProfileState,\n  State,\n  TeamsState,\n} from './types'\nimport { fetchProfile } from './profile'\nimport { fetchTeam, fetchTeams } from './teams'\nimport { fetchAchievements } from './achievements'\nimport { fetchWalletNfts } from './collectibles'\nimport { getCanClaim } from './predictions/helpers'\nimport { transformPool } from './pools/helpers'\nimport { fetchPoolsStakingLimitsAsync } from './pools'\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms'\nimport { fetchGuildpadUserDataAsync, fetchPublicGuildpadDataAsync } from './guildpads'\n\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251]))\n  }, [dispatch, fastRefresh])\n}\n\nexport const usePollBlockNumber = () => {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const blockNumber = await web3NoAccount.eth.getBlockNumber()\n      dispatch(setBlock(blockNumber))\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [dispatch])\n}\n\n// Farms\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\n// Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\nexport const useFarmFromTokenSymbol = (tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\n  const farms = useSelector((state: State) => state.farms.data.filter((farm) => farm.token.symbol === tokenSymbol))\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens)\n  return filteredFarm\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.token.busdPrice)\n}\n\nexport const useBusdPriceFromToken = (tokenSymbol: string): BigNumber => {\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol)\n  const tokenPrice = useBusdPriceFromPid(tokenFarm?.pid)\n  return tokenPrice\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// Pools\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await web3NoAccount.eth.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh])\n}\n\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const usePoolFromPid = (sousId: number): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return transformPool(pool)\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\n// Profile\n\nexport const useFetchProfile = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchProfile(account))\n  }, [account, dispatch])\n}\n\nexport const useProfile = () => {\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\n}\n\n// Teams\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n\n// Achievements\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\n  return achievements\n}\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const bnbBusdFarm = useFarmFromPid(251)\n  return new BigNumber(0)\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n  return new BigNumber(0)\n}\n\n// Block\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n\n// Predictions\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetRounds = () => {\n  return useSelector((state: State) => state.predictions.rounds)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetRound = (id: string) => {\n  const rounds = useGetRounds()\n  return rounds[id]\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount])\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetBetByRoundId = (account: string, roundId: string) => {\n  const bets = useSelector((state: State) => state.predictions.bets)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][roundId]) {\n    return null\n  }\n\n  return bets[account][roundId]\n}\n\nexport const useBetCanClaim = (account: string, roundId: string) => {\n  const bet = useGetBetByRoundId(account, roundId)\n\n  if (!bet) {\n    return false\n  }\n\n  return getCanClaim(bet)\n}\n\nexport const useGetLastOraclePrice = (): BigNumber => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return new BigNumber(lastOraclePrice)\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n\n\n// Launchpad or Guildpad\n\nexport const useGuildpads = (): GuildpadState => {\n  const guildpads = useSelector((state: State) => state.guildpads)\n  return guildpads\n}\n\nexport const useGuildpad = () => {\n  const guildpad = useSelector((state: State) => state.guildpads.selected)\n  return guildpad\n}\n\nexport const useGuildpadData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const guildpadsToFetch = guildpadConfig\n    const ids = guildpadsToFetch.map((guildpadToFetch) => guildpadToFetch.id)\n\n    dispatch(fetchPublicGuildpadDataAsync(ids))\n\n    if (account) {\n      dispatch(\n        fetchGuildpadUserDataAsync({ account, ids }))\n    }\n  }, [dispatch, slowRefresh, account])\n}\n","import { useContext } from 'react'\nimport { ToastsContext } from 'contexts/ToastsContext'\n\nconst useToast = () => {\n  const toastContext = useContext(ToastsContext)\n\n  if (toastContext === undefined) {\n    throw new Error('Toasts context undefined')\n  }\n\n  return toastContext\n}\n\nexport default useToast\n","import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\n// import { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\nimport { ConnectorId } from '@sparkpointio/sparkswap-uikit'\nimport { connectorsByName } from 'utils/web3React'\nimport { setupNetwork } from 'utils/wallet'\nimport useToast from 'hooks/useToast'\nimport { profileClear } from 'state/profile'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\n\nconst useAuth = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback(\n    (connectorID: ConnectorId) => {\n      const connector = connectorsByName[connectorID]\n      if (connector) {\n        activate(connector, async (error: Error) => {\n          if (error instanceof UnsupportedChainIdError) {\n            const hasSetup = await setupNetwork()\n            if (hasSetup) {\n              activate(connector)\n            }\n          } else {\n            window.localStorage.removeItem('1')\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n              toastError(t('Provider Error'), t('No provider was found'))\n            } else if (\n              error instanceof UserRejectedRequestErrorInjected ||\n              error instanceof UserRejectedRequestErrorWalletConnect\n            ) {\n              if (connector instanceof WalletConnectConnector) {\n                const walletConnector = connector as WalletConnectConnector\n                walletConnector.walletConnectProvider = null\n              }\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\n            } else {\n              toastError(error.name, error.message)\n            }\n          }\n        })\n      } else {\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\n      }\n    },\n    [t, activate, toastError],\n  )\n\n  const logout = useCallback(() => {\n    dispatch(profileClear())\n    deactivate()\n    // This localStorage key is set by @web3-react/walletconnect-connector\n    if (window.localStorage.getItem('walletconnect')) {\n      connectorsByName.walletconnect.close()\n      connectorsByName.walletconnect.walletConnectProvider = null\n    }\n  }, [deactivate, dispatch])\n\n  return { login, logout }\n}\n\nexport default useAuth\n","import { Ifo } from './types'\n\n// const cakeBnbLpToken: Token = {\n//   // symbol: farms[1].lpSymbol,\n//   // address: farms[1].lpAddresses,\n//   // decimals: 18,\n// }\n\nconst ifos: Ifo[] = [\n  // {\n  //   id: 'kalmar',\n  //   address: '0x1aFB32b76696CdF05593Ca3f3957AEFB23a220FB',\n  //   isActive: true,\n  //   name: 'Kalmar (KALM)',\n  //   poolBasic: {\n  //     saleAmount: '375,000 KALM',\n  //     raiseAmount: '$750,000',\n  //     cakeToBurn: '$375,000',\n  //     distributionRatio: 0.3,\n  //   },\n  //   poolUnlimited: {\n  //     saleAmount: '875,000 KALM',\n  //     raiseAmount: '$2,500,000',\n  //     cakeToBurn: '$1,250,000',\n  //     distributionRatio: 0.7,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.kalm,\n  //   releaseBlockNumber: 7707736,\n  //   campaignId: '511110000',\n  //   articleUrl: 'https://pancakeswap.medium.com/kalmar-kalm-ifo-to-be-hosted-on-pancakeswap-4540059753e4',\n  //   tokenOfferingPrice: 2.0,\n  //   version: 2,\n  // },\n  // {\n  //   id: 'hotcross',\n  //   address: '0xb664cdbe385656F8c54031c0CB12Cea55b584b63',\n  //   isActive: false,\n  //   name: 'Hot Cross (HOTCROSS)',\n  //   poolBasic: {\n  //     saleAmount: '15,000,000 HOTCROSS',\n  //     raiseAmount: '$750,000',\n  //     cakeToBurn: '$375,000',\n  //     distributionRatio: 0.3,\n  //   },\n  //   poolUnlimited: {\n  //     saleAmount: '35,000,000 HOTCROSS',\n  //     raiseAmount: '$1,750,000',\n  //     cakeToBurn: '$875,000',\n  //     distributionRatio: 0.7,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.hotcross,\n  //   releaseBlockNumber: 7477900,\n  //   campaignId: '511100000',\n  //   articleUrl: 'https://pancakeswap.medium.com/hot-cross-hotcross-ifo-to-be-hosted-on-pancakeswap-10e70f1f6841',\n  //   tokenOfferingPrice: 0.05,\n  //   version: 2,\n  // },\n  // {\n  //   id: 'horizon',\n  //   address: '0x6137B571f7F1E44839ae10310a08be86D1A4D03B',\n  //   isActive: false,\n  //   name: 'Horizon Protocol (HZN)',\n  //   poolBasic: {\n  //     saleAmount: '3,000,000 HZN',\n  //     raiseAmount: '$750,000',\n  //     cakeToBurn: '$375,000',\n  //     distributionRatio: 0.3,\n  //   },\n  //   poolUnlimited: {\n  //     saleAmount: '7,000,000 HZN',\n  //     raiseAmount: '$1,750,000',\n  //     cakeToBurn: '$875,000',\n  //     distributionRatio: 0.7,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.hzn,\n  //   releaseBlockNumber: 6581111,\n  //   campaignId: '511090000',\n  //   articleUrl: 'https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8',\n  //   tokenOfferingPrice: 0.25,\n  //   version: 2,\n  // },\n  // {\n  //   id: 'belt',\n  //   address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\n  //   isActive: false,\n  //   name: 'Belt (BELT)',\n  //   poolUnlimited: {\n  //     saleAmount: '150,000 BELT',\n  //     raiseAmount: '$3,000,000',\n  //     cakeToBurn: '$1,500,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.belt,\n  //   releaseBlockNumber: 5493919,\n  //   campaignId: '511080000',\n  //   articleUrl: 'https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'watch',\n  //   address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\n  //   isActive: false,\n  //   name: 'Yieldwatch (WATCH)',\n  //   poolUnlimited: {\n  //     saleAmount: '8,000,000 WATCH',\n  //     raiseAmount: '$800,000',\n  //     cakeToBurn: '$400,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.watch,\n  //   releaseBlockNumber: 5294924,\n  //   campaignId: '511070000',\n  //   articleUrl: 'https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'berry',\n  //   address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\n  //   isActive: false,\n  //   name: 'Berry (BRY)',\n  //   poolUnlimited: {\n  //     saleAmount: '2,000,000 BRY',\n  //     raiseAmount: '$1,000,000',\n  //     cakeToBurn: '$500,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.bry,\n  //   releaseBlockNumber: 4750968,\n  //   campaignId: '511060000',\n  //   articleUrl: 'https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'soteria',\n  //   address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\n  //   isActive: false,\n  //   name: 'Soteria (wSOTE)',\n  //   poolUnlimited: {\n  //     saleAmount: '1,500,000 wSOTE',\n  //     raiseAmount: '$525,000',\n  //     cakeToBurn: '$262,500',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.wsote,\n  //   releaseBlockNumber: 4086064,\n  //   campaignId: '511050000',\n  //   articleUrl: 'https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'helmet',\n  //   address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\n  //   isActive: false,\n  //   name: 'Helmet.insure (Helmet)',\n  //   poolUnlimited: {\n  //     saleAmount: '10,000,000 Helmet',\n  //     raiseAmount: '$1,000,000',\n  //     cakeToBurn: '$500,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.helmet,\n  //   releaseBlockNumber: 3771926,\n  //   campaignId: '511040000',\n  //   articleUrl: 'https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'tenet',\n  //   address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\n  //   isActive: false,\n  //   name: 'Tenet (TEN)',\n  //   poolUnlimited: {\n  //     saleAmount: '1,000,000 TEN',\n  //     raiseAmount: '$1,000,000',\n  //     cakeToBurn: '$500,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.ten,\n  //   releaseBlockNumber: 3483883,\n  //   campaignId: '511030000',\n  //   articleUrl: 'https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'ditto',\n  //   address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\n  //   isActive: false,\n  //   name: 'Ditto (DITTO)',\n  //   poolUnlimited: {\n  //     saleAmount: '700,000 DITTO',\n  //     raiseAmount: '$630,000',\n  //     cakeToBurn: '$315,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.ditto,\n  //   releaseBlockNumber: 3279767,\n  //   campaignId: '511020000',\n  //   articleUrl: 'https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n  // {\n  //   id: 'blink',\n  //   address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\n  //   isActive: false,\n  //   name: 'BLINk (BLK)',\n  //   poolUnlimited: {\n  //     saleAmount: '100,000,000 BLINK',\n  //     raiseAmount: '$1,000,000',\n  //     cakeToBurn: '$500,000',\n  //     distributionRatio: 1,\n  //   },\n  //   currency: cakeBnbLpToken,\n  //   token: tokens.blink,\n  //   releaseBlockNumber: 3279767,\n  //   campaignId: '511010000',\n  //   articleUrl: 'https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8',\n  //   tokenOfferingPrice: null,\n  //   version: 1,\n  // },\n]\n\nexport default ifos\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { BlockState } from '../types'\n\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\n\nexport const blockSlice = createSlice({\n  name: 'Block',\n  initialState,\n  reducers: {\n    setBlock: (state, action: PayloadAction<number>) => {\n      if (state.initialBlock === 0) {\n        state.initialBlock = action.payload\n      }\n\n      state.currentBlock = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setBlock } = blockSlice.actions\n\nexport default blockSlice.reducer\n","import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\nimport { Nft, NftType } from 'config/constants/types'\nimport { getAddress } from './addressHelpers'\nimport { getErc721Contract } from './contractHelpers'\n\n/**\n * Gets the identifier key based on the nft address\n * Helpful for looking up the key when all you have is the address\n */\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\n    const address = getAddress(nftSourceEntry.address)\n    return address === nftAddress\n  })\n\n  return nftSource ? nftSource.identifierKey : null\n}\n\n/**\n * Some sources like Pancake do not return HTTP tokenURI's\n */\nexport const getTokenUrl = (tokenUri: string) => {\n  if (tokenUri.startsWith('ipfs://')) {\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\n  }\n\n  return tokenUri\n}\n\nexport const getAddressByType = (type: NftType) => {\n  return getAddress(nftSources[type].address)\n}\n\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\n  try {\n    const contract = getErc721Contract(nftAddress)\n    const tokenUri = await contract.methods.tokenURI(tokenId).call()\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\n\n    if (!uriDataResponse.ok) {\n      return null\n    }\n\n    const uriData = await uriDataResponse.json()\n    return uriData\n  } catch (error) {\n    console.error('getTokenUriData', error)\n    return null\n  }\n}\n\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\n  const uriData = await getTokenUriData(nftAddress, tokenId)\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\n\n  // Bail out early if we have no uriData, identifierKey, or the value does not\n  // exist in the object\n  if (!uriData) {\n    return null\n  }\n\n  if (!identifierKey) {\n    return null\n  }\n\n  if (!uriData[identifierKey]) {\n    return null\n  }\n\n  return Nfts.find((nft) => {\n    return uriData[identifierKey].includes(nft.identifier)\n  })\n}\n","import { Farm } from 'state/types'\n\n/**\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\n * @param farms Array of farms\n * @param preferredQuoteTokens Array of preferred quote tokens\n * @returns A preferred farm, if found - or the first element of the farms array\n */\nexport const filterFarmsByQuoteToken = (farms: Farm[], preferredQuoteTokens: string[] = ['BUSD', 'wBNB']): Farm => {\n  const preferredFarm = farms.find((farm) => {\n    return preferredQuoteTokens.some((quoteToken) => {\n      return farm.quoteToken.symbol === quoteToken\n    })\n  })\n  return preferredFarm || farms[0]\n}\n\nexport default filterFarmsByQuoteToken\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { CollectiblesState } from 'state/types'\nimport { nftSources } from 'config/constants/nfts'\nimport { NftType } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { getNftByTokenId } from 'utils/collectibles'\n\nconst initialState: CollectiblesState = {\n  isInitialized: false,\n  isLoading: true,\n  data: {},\n}\n\ntype NftSourceItem = [number, string]\n\n// Thunks\nexport const fetchWalletNfts = createAsyncThunk<NftSourceItem[], string>(\n  'collectibles/fetchWalletNfts',\n  async (account) => {\n    // For each nft source get nft data\n    const nftSourcePromises = Object.keys(nftSources).map(async (nftSourceType) => {\n      const { address: addressObj } = nftSources[nftSourceType as NftType]\n      const address = getAddress(addressObj)\n      const contract = getErc721Contract(address)\n\n      const getTokenIdAndData = async (index: number) => {\n        try {\n          const tokenId = await contract.methods.tokenOfOwnerByIndex(account, index).call()\n          const walletNft = await getNftByTokenId(address, tokenId)\n          return [Number(tokenId), walletNft.identifier]\n        } catch (error) {\n          console.error('getTokenIdAndData', error)\n          return null\n        }\n      }\n\n      const balanceOfResponse = await contract.methods.balanceOf(account).call()\n      const balanceOf = Number(balanceOfResponse)\n\n      if (balanceOf === 0) {\n        return []\n      }\n\n      const nftDataFetchPromises = []\n\n      // For each index get the tokenId and data associated with it\n      for (let i = 0; i < balanceOf; i++) {\n        nftDataFetchPromises.push(getTokenIdAndData(i))\n      }\n\n      const nftData = await Promise.all(nftDataFetchPromises)\n      return nftData\n    })\n\n    const nftSourceData = await Promise.all(nftSourcePromises)\n\n    return nftSourceData.flat()\n  },\n)\n\nexport const collectiblesSlice = createSlice({\n  name: 'collectibles',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchWalletNfts.pending, (state) => {\n      state.isLoading = true\n    })\n    builder.addCase(fetchWalletNfts.fulfilled, (state, action) => {\n      state.isLoading = false\n      state.isInitialized = true\n      state.data = action.payload.reduce((accum, association) => {\n        if (!association) {\n          return accum\n        }\n\n        const [tokenId, identifier] = association as NftSourceItem\n\n        return {\n          ...accum,\n          [identifier]: accum[identifier] ? [...accum[identifier], tokenId] : [tokenId],\n        }\n      }, {})\n    })\n  },\n})\n\nexport default collectiblesSlice.reducer\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@metagg/mgg-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: true, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : true\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { Campaign } from './types'\n\n/**\n * id: The campaign id (required)\n * type: The type of the achievement\n * title: A string or an object to be translated.\n * Note: If the value is a string it is likely used as data in a translation object\n *\n * badge: Achievement avatar\n */\n\nconst campaigns: Campaign[] = [\n  {\n    id: '511110000',\n    type: 'ifo',\n    title: 'Kalmar',\n    badge: 'ifo-kalm.svg',\n  },\n  {\n    id: '511100000',\n    type: 'ifo',\n    title: 'Hotcross',\n    badge: 'ifo-hotcross.svg',\n  },\n  {\n    id: '511090000',\n    type: 'ifo',\n    title: 'Horizon Protocol',\n    badge: 'ifo-hzn.svg',\n  },\n  {\n    id: '511080000',\n    type: 'ifo',\n    title: 'Belt',\n    badge: 'ifo-belt.svg',\n  },\n  {\n    id: '511070000',\n    type: 'ifo',\n    title: 'Yieldwatch',\n    badge: 'ifo-watch.svg',\n  },\n  {\n    id: '511060000',\n    type: 'ifo',\n    title: 'Berry',\n    badge: 'ifo-bry.svg',\n  },\n  {\n    id: '511050000',\n    type: 'ifo',\n    title: 'Soteria',\n    badge: 'ifo-wsote.svg',\n  },\n  {\n    id: '511040000',\n    type: 'ifo',\n    title: 'Helmet',\n    badge: 'ifo-helmet.svg',\n  },\n  {\n    id: '511030000',\n    type: 'ifo',\n    title: 'Tenet',\n    badge: 'ifo-ten.svg',\n  },\n  {\n    id: '511020000',\n    type: 'ifo',\n    title: 'Ditto',\n    badge: 'ifo-ditto.svg',\n  },\n  {\n    id: '511010000',\n    type: 'ifo',\n    title: 'Blink',\n    badge: 'ifo-blk.svg',\n  },\n  {\n    id: '512010001',\n    type: 'teambattle',\n    title: 'Easter Champion: Gold',\n    badge: 'easter-champion-gold.svg',\n  },\n  {\n    id: '512010002',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010003',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010004',\n    type: 'teambattle',\n    title: 'Easter Top 500: Gold',\n    badge: 'easter-top-500-gold.svg',\n  },\n  {\n    id: '512010005',\n    type: 'teambattle',\n    title: 'Easter Participant: Gold',\n    badge: 'easter-participant-gold.svg',\n  },\n  {\n    id: '512010006',\n    type: 'teambattle',\n    title: 'Easter Champion: Silver',\n    badge: 'easter-champion-silver.svg',\n  },\n  {\n    id: '512010007',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010008',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010009',\n    type: 'teambattle',\n    title: 'Easter Top 500: Silver',\n    badge: 'easter-top-500-silver.svg',\n  },\n  {\n    id: '512010010',\n    type: 'teambattle',\n    title: 'Easter Participant: Silver',\n    badge: 'easter-participant-silver.svg',\n  },\n  {\n    id: '512010011',\n    type: 'teambattle',\n    title: 'Easter Champion: Bronze',\n    badge: 'easter-champion-bronze.svg',\n  },\n  {\n    id: '512010012',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010013',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010014',\n    type: 'teambattle',\n    title: 'Easter Top 500: Bronze',\n    badge: 'easter-top-500-bronze.svg',\n  },\n  {\n    id: '512010015',\n    type: 'teambattle',\n    title: 'Easter Participant: Bronze',\n    badge: 'easter-participant-bronze.svg',\n  },\n]\n\n/**\n * Transform the campaign config into a map. Keeps the config the same\n * as the others and allows easy access to a campaign by id\n */\nexport const campaignMap = new Map<string, Campaign>()\n\ncampaigns.forEach((campaign) => {\n  campaignMap.set(campaign.id, campaign)\n})\n\nexport default campaigns\n","import { ethers } from 'ethers'\nimport { Campaign } from 'config/constants/types'\nimport { getPointCenterIfoContract } from 'utils/contractHelpers'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement, TranslatableText } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: ethers.BigNumber\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address)\n  const pointCenterContract = getPointCenterIfoContract()\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatuses = (await pointCenterContract.methods\n    .checkClaimStatuses(account, ifoCampaignAddresses)\n    .call()) as boolean[]\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await multicallv2(\n    pointCenterIfoABI,\n    claimStatuses.reduce((accum, claimStatus, index) => {\n      if (claimStatus === true) {\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\n      }\n      return accum\n    }, []),\n  )) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: claimableIfoDataItem.numberPoints.toNumber(),\n      },\n    ]\n  }, [])\n}\n","import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    return [\n      ...accum,\n      {\n        id: userPoint.campaignId,\n        type: campaignMeta.type,\n        address: userPoint.id,\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(userPoint.points),\n      },\n    ]\n  }, [])\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\nimport { AchievementState, Achievement } from '../types'\nimport { getAchievements } from './helpers'\n\nconst initialState: AchievementState = {\n  data: [],\n}\n\nexport const achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\n      state.data.push(action.payload)\n    },\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\n      state.data = [...state.data, ...action.payload]\n    },\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\n      state.data = action.payload\n    },\n    clearAchievements: (state) => {\n      state.data = []\n    },\n  },\n})\n\n// Actions\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\n\n// Thunks\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\n  try {\n    const achievements = await getAchievements(account)\n    dispatch(setAchievements(achievements))\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport default achievementSlice.reducer\n","import React, { createContext, ReactNode, useCallback, useState } from 'react'\nimport { kebabCase } from 'lodash'\nimport { Toast, toastTypes } from '@pancakeswap/uikit'\nimport { ToastContextApi } from './types'\n\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\n\nexport const ToastsProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\n\n  const toast = useCallback(\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\n      setToasts((prevToasts) => {\n        const id = kebabCase(title)\n\n        // Remove any existing toasts with the same id\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\n\n        return [\n          {\n            id,\n            title,\n            description,\n            type,\n          },\n          ...currentToasts,\n        ]\n      })\n    },\n    [setToasts],\n  )\n\n  const toastError = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.DANGER })\n  }\n  const toastInfo = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.INFO })\n  }\n  const toastSuccess = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.SUCCESS })\n  }\n  const toastWarning = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.WARNING })\n  }\n  const clear = () => setToasts([])\n  const remove = (id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\n  }\n\n  return (\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\n      {children}\n    </ToastsContext.Provider>\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nconst useTabVisibility = () => {\n  const tabVisibleRef = useRef(true)\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      tabVisibleRef.current = !document.hidden\n    }\n\n    window.addEventListener('visibilitychange', onVisibilityChange)\n\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange)\n    }\n  }, [])\n\n  return { tabVisibleRef }\n}\n\nexport default useTabVisibility\n","import React, { useState, useEffect } from 'react'\nimport useTabVisibility from 'hooks/useTabVisibility'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const { tabVisibleRef } = useTabVisibility()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import BigNumber from 'bignumber.js'\n\nexport const BIG_ZERO = new BigNumber(0)\nexport const BIG_ONE = new BigNumber(1)\nexport const BIG_NINE = new BigNumber(9)\nexport const BIG_TEN = new BigNumber(10)\n","export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n    const aprAfterFee = farmApr - feeRelativeToApr\n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\n\nexport const getAprData = (pool: Pool, performanceFee: number) => {\n  const { isAutoVault, earningTokenPrice, apr } = pool\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n      numberOfDays: 365,\n      farmApr: apr,\n      tokenPrice: earningTokenPrice,\n      roundingDecimals,\n      compoundFrequency,\n      performanceFee,\n    })\n    const autoApr = getRoi({\n      amountEarned: tokenEarnedPerThousand365D,\n      amountInvested: oneThousandDollarsWorthOfToken,\n    })\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\n  }\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeContext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { ContextApi } from 'contexts/Localization/types'\nimport { PageMeta } from './types'\n\nexport const DEFAULT_META: PageMeta = {\n  title: 'MGG',\n  description:\n    'Stake MGG and earn token rewards',\n  image: 'https://app.metagg.com/MGG.png',\n}\n\nexport const getCustomMeta = (path: string, t: ContextApi['t']): PageMeta => {\n  switch (path) {\n    case '/farms':\n      return {\n        title: `${t('Liquidity')} | ${t('MGG')}`,\n      }\n    case '/pools':\n      return {\n        title: `${t('Pools')} | ${t('MGG')}`,\n      }\n    case '/gamefi':\n      return {\n        title: `${t('GameFi Vaults')} | ${t('MGG')}`,\n      }\n    case '/launchpad':\n      return {\n        title: `${t('IGO and INO Launchpad')} | ${t('MGG')}`,\n      }\n    case '/liquidity':\n      return {\n        title: `${t('Pools')} | ${t('MGG')} - ${t('Stake MGG and earn LP tokens!')}`,\n      }\n    case '/lottery':\n      return {\n        title: `${t('Lottery')} | ${t('MGG')}`,\n      }\n    case '/collectibles':\n      return {\n        title: `${t('Collectibles')} | ${t('MGG')}`,\n      }\n    case '/ifo':\n      return {\n        title: `${t('Initial Farm Offering')} | ${t('MGG')}`,\n      }\n    case '/teams':\n      return {\n        title: `${t('Leaderboard')} | ${t('MGG')}`,\n      }\n    case '/profile/tasks':\n      return {\n        title: `${t('Task Center')} | ${t('MGG')}`,\n      }\n    case '/profile':\n      return {\n        title: `${t('Your Profile')} | ${t('MGG')}`,\n      }\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Helmet } from 'react-helmet-async'\nimport { useLocation } from 'react-router'\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\nimport Container from './Container'\n\nconst StyledPage = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nconst PageMeta = () => {\n  const { t } = useTranslation()\n  const { pathname } = useLocation()\n  // const cakePriceUsd = usePriceCakeBusd()\n  // const cakePriceUsdDisplay = cakePriceUsd.gt(0)\n  //   ? `$${cakePriceUsd.toNumber().toLocaleString(undefined, {\n  //       minimumFractionDigits: 3,\n  //       maximumFractionDigits: 3,\n  //     })}`\n  //   : ''\n\n  const pageMeta = getCustomMeta(pathname, t) || {}\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\n  // const pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\n\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta property='og:title' content={title} />\n      <meta property='og:description' content={description} />\n      <meta property='og:image' content={image} />\n    </Helmet>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  return (\n    <>\n      <PageMeta />\n      <StyledPage {...props}>{children}</StyledPage>\n    </>\n  )\n}\n\nexport default Page\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, EPOCH_PER_YEAR, CAKE_PER_YEAR } from 'config'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  \n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get the FARM APR value in %\n * @param LPTokenPrice LP Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of LP Token in the pool\n * @param rewardForDuration Amount of rewards allocated to the farms\n * @param duration Duration of the farm in EPOCH\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getFarmV2Apr = (\n  LPTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  rewardRate: number\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(rewardRate).times(EPOCH_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(LPTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_YEAR.times(poolWeight)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","// Set of helper functions to facilitate wallet setup\n\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\nexport const setupNetwork = async () => {\n  const provider = (window as WindowChain).ethereum\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n    console.log(process.env.REACT_APP_CHAIN_ID)\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: 'Binance Smart Chain Testnet',\n            nativeCurrency: {\n              name: 'BNB',\n              symbol: 'bnb',\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\n          },\n        ],\n      })\n      return true\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  } else {\n    console.error('Can\\'t setup the BSC network on metamask because window.ethereum is undefined')\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @param tokenImage\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (\n  tokenAddress: string,\n  tokenSymbol: string,\n  tokenDecimals: number,\n  tokenImage: string,\n) => {\n  const tokenAdded = await (window as WindowChain).ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n","import { ChainId, JSBI, Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { getAddress } from './addressHelpers'\n\nconst ARCHIVED_FARMS_START_PID = 139\nconst ARCHIVED_FARMS_END_PID = 250\n\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\n\nexport const calculateUserRewardRate = (\n  {\n    lpAddresses,\n    totalDeposits,\n    quoteToken,\n    token,\n    rewardRate,\n    userData,\n    pairToken\n  }: any) => {\n  const stakingToken = new Token(\n    ChainId.MAINNET,\n    getAddress(lpAddresses),\n    18,\n  )\n  const rewardsToken = new Token(\n    ChainId.MAINNET, getAddress(quoteToken.address), quoteToken.decimals)\n  const rewardRateAmount = new TokenAmount(rewardsToken, rewardRate ?? 0)\n  const stakedAmount = new TokenAmount(stakingToken, userData.stakedBalance ?? 0)\n  const totalSupply = new TokenAmount(stakingToken, totalDeposits ?? 0)\n  const token0 = new Token(ChainId.MAINNET, getAddress(token.address), token.decimals)\n  const token1 = new Token(ChainId.MAINNET, getAddress(pairToken.address), pairToken.decimals)\n\n  const dummyPair = new Pair(new TokenAmount(token0, '0'), new TokenAmount(token1, '0'))\n\n  const totalStakedAmount = new TokenAmount(\n    dummyPair.liquidityToken, JSBI.BigInt(totalSupply.raw))\n\n  return new TokenAmount(\n    rewardsToken,\n    JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0))\n      ? JSBI.divide(JSBI.multiply(rewardRateAmount.raw, stakedAmount.raw), totalStakedAmount.raw)\n      : JSBI.BigInt(0),\n  )?.multiply(`${60 * 60 * 24 * 7}`)\n    ?.toSignificant(4)\n}\n\n// export const calcuLateApy = () => {\n//\n// }\n\nexport default isArchivedPid\n","import { TranslatableText } from 'state/types'\nimport BigNumber from 'bignumber.js'\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface Token {\n  symbol: string\n  address?: Address\n  decimals?: number\n  projectLink?: string\n  busdPrice?: string\n  iconExtension?: string | 'svg'\n}\n\nexport enum PoolIds {\n  poolBasic = 'poolBasic',\n  poolUnlimited = 'poolUnlimited',\n}\n\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\n\ninterface IfoPoolInfo {\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  distributionRatio: number // Range [0-1]\n}\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  currency: Token\n  token: Token\n  releaseBlockNumber: number\n  articleUrl: string\n  campaignId: string\n  tokenOfferingPrice: number\n  version: number\n  [PoolIds.poolBasic]?: IfoPoolInfo\n  [PoolIds.poolUnlimited]: IfoPoolInfo\n}\n\nexport interface Ino {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  currency: Token\n  token: Token\n  releaseBlockNumber: number\n  articleUrl: string\n  campaignId: string\n  tokenOfferingPrice: number\n  version: number\n  [PoolIds.poolBasic]?: IfoPoolInfo\n  [PoolIds.poolUnlimited]: IfoPoolInfo\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n  'AUTO' = 'Auto',\n}\n\nexport interface FarmConfig {\n  isMain?: true\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  stakingAddresses: Address\n  token: Token\n  pairToken: Token\n  quoteToken: Token\n  multiplier?: string\n  isCommunity?: boolean\n  liquidityUrl?: string\n  infoURL?: string\n  isPromoted?: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  isMain?: boolean\n  sousId: number\n  earningToken: Token\n  stakingToken: Token\n  contractAddress: Address\n  poolCategory: PoolCategory\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  isComingSoon?: boolean\n  enableEmergencyWithdraw?: boolean\n  isAddTokenDisabled?: boolean\n  isDepositDisabled?: boolean\n  isWithdrawDisabled?: boolean\n}\n\nexport type Images = {\n  lg: string\n  md: string\n  sm: string\n  ipfs?: string\n}\n\nexport type NftImages = {\n  blur?: string\n} & Images\n\nexport type NftVideo = {\n  webm: string\n  mp4: string\n}\n\nexport type NftSource = {\n  [key in NftType]: {\n    address: Address\n    identifierKey: string\n  }\n}\n\nexport enum NftType {\n  PANCAKE = 'pancake',\n  MIXIE = 'mixie',\n}\n\nexport type Nft = {\n  description: string\n  name: string\n  images: NftImages\n  sortOrder: number\n  type: NftType\n  video?: NftVideo\n\n  // Uniquely identifies the nft.\n  // Used for matching an NFT from the config with the data from the NFT's tokenURI\n  identifier: string\n\n  // Used to be \"bunnyId\". Used when minting NFT\n  variationId?: number | string\n}\n\nexport type TeamImages = {\n  alt: string\n} & Images\n\nexport type Team = {\n  id: number\n  name: string\n  description: string\n  isJoinable?: boolean\n  users: number\n  points: number\n  images: TeamImages\n  background: string\n  textColor: string\n}\n\nexport type CampaignType = 'ifo' | 'teambattle'\n\nexport type Campaign = {\n  id: string\n  type: CampaignType\n  title?: TranslatableText\n  description?: TranslatableText\n  badge?: string\n}\n\nexport type PageMeta = {\n  title: string\n  description?: string\n  image?: string\n}\n\nexport type Status = 'ongoing' | 'upcoming' | 'completed' | null;\nexport type Type = 'INO' | 'IDO';\nexport type Distribution = 'VESTING' | 'SELF-CLAIM' | 'AIRDROP';\nexport const GUILDPAD_STATUS: { ongoing: Status; upcoming: Status; completed: Status } = {\n  ongoing: 'ongoing',\n  upcoming: 'upcoming',\n  completed: 'completed',\n}\nexport const TYPE: { INO: Type; IDO: Type } = { INO: 'INO', IDO: 'IDO' }\nexport const DISTRIBUTION: { VESTING: Distribution; SELF_CLAIM: Distribution; AIRDROP: Distribution} = {\n  VESTING: 'VESTING',\n  SELF_CLAIM: 'SELF-CLAIM',\n  AIRDROP: 'AIRDROP'\n}\n\nexport interface Socials {\n  website?: string;\n  twitter?: string;\n  telegram?: string;\n  medium?: string;\n  discord?: string;\n  youtube?: string;\n}\n\ntype InoDetails = {\n  price?: string;\n  ratio?: string;\n  boxes?: string;\n}\n\ntype IdoDetails = {\n  price?: string;\n}\n\ninterface GuildPadInformation {\n  title: string;\n  description: string;\n  distribution?: string;\n  type?: Type;\n  date?: {start: string, end: string};\n  status: Status;\n  hasStarted?: boolean;\n  hasEnded?: boolean;\n  totalSupply?: string;\n  totalSold?: string;\n  totalRaise?: string;\n  buyLimitEnabled?: boolean,\n  whitelistEnabled?: boolean,\n  nextRoundDate?: number,\n  buyLimit?: string,\n  socials?: Socials;\n  inoDetails?: InoDetails;\n  idoDetails?: IdoDetails;\n  boxDetails?: any;\n  epochEndDate?: number\n}\n\n\nexport interface GuildpadConfig extends GuildPadInformation {\n  id: number,\n  contractAddress?: Address;\n  FundstoRaise?: string;\n  buyingCoin?: Token;\n  sellingCoin?:  Token;\n  available?: string;\n  boxInfo?: {\n    1: {\n      price: string,\n      supply: string,\n      sold: string\n    }\n  };\n}\n","import Web3 from 'web3'\nimport { Interface } from '@ethersproject/abi'\nimport web3NoAccount from 'utils/web3'\nimport { getMulticallContract } from 'utils/contractHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (example: balanceOf)\n  params?: any[] // Function params\n}\n\ninterface MulticallOptions {\n  web3?: Web3\n  blockNumber?: number\n  requireSuccess?: boolean\n}\n\nconst multicall = async (abi: any[], calls: Call[], options: MulticallOptions = {}) => {\n    const multi = getMulticallContract(options.web3 || web3NoAccount)\n    const itf = new Interface(abi)\n\n    const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n    const { returnData } = await multi.methods.aggregate(calldata).call(undefined, options.blockNumber)\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n    return res\n}\n\n/**\n * Multicall V2 uses the new \"tryAggregate\" function. It is different in 2 ways\n *\n * 1. If \"requireSuccess\" is false multicall will not bail out if one of the calls fails\n * 2. The return inclues a boolean whether the call was successful e.g. [wasSuccessfull, callResult]\n */\nexport const multicallv2 = async (abi: any[], calls: Call[], options: MulticallOptions = {}): Promise<any> => {\n  const multi = getMulticallContract(options.web3 || web3NoAccount)\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const returnData = await multi.methods\n    .tryAggregate(options.requireSuccess === undefined ? true : options.requireSuccess, calldata)\n    .call(undefined, options.blockNumber)\n  const res = returnData.map((call, i) => {\n    const [result, data] = call\n    return result ? itf.decodeFunctionResult(calls[i].name, data) : null\n  })\n\n  return res\n}\n\nexport default multicall\n","import BigNumber from 'bignumber.js'\nimport { BIG_TEN } from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n","import BigNumber from 'bignumber.js/bignumber'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BSC_BLOCK_TIME = 3\n\n// CAKE_PER_BLOCK details\n// 40 CAKE is minted per block\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\n// 10 CAKE per block goes to CAKE syrup pool\n// 10 CAKE per block goes to Yield farms and lottery\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\n// CAKE/Block in src/views/Home/components/CakeStats.tsx = 20 (40 - Amount sent to burn pool)\n\nexport const CAKE_PER_BLOCK = new BigNumber(40)\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\nexport const CAKE_PER_YEAR = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR)\n// export const BASE_URL = 'https://pancakeswap.finance'\nexport const BASE_URL = 'https://pancakeswap.finance'\nexport const BASE_EXCHANGE_URL = 'https://pancakeswap.finance'\nexport const BASE_INFO_URL = 'https://pancakeswap.finance/info/pool/'\nexport const CAKE_INFO_URL = 'https://pancakeswap.finance/info/pool/'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/add`\nexport const BASE_SWAP_URL = `${BASE_EXCHANGE_URL}/swap`\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/pool`\nexport const PANCAKE_EXCHANGE_URL = 'https://pancakeswap.finance'\nexport const PANCAKE_ADD_LIQUIDITY_URL = `${PANCAKE_EXCHANGE_URL}/add`\nexport const BASE_BSC_SCAN_URL = 'https://bscscan.com'\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\nexport const LOTTERY_TICKET_PRICE = 1\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\nexport const DEFAULT_GAS_LIMIT = 200000\nexport const DEFAULT_GAS_PRICE = 5\nexport const TESTNET_CHAIN_ID = '97'\nexport const MAINNET_CHAIN_ID = '56'\nexport const EPOCH_PER_YEAR = 31556926\nexport const SPARKSWAP_API = 'https://api.pancakeswap.info/api/v2/'\nexport const API_ASSETS = 'tokens'\nexport const API_SUMMARY = 'summary'\nexport const API_DATA = 'data'\nexport const API_LIQUIDITY = 'liquidity'\nexport const API_LASTPRICE = 'price'\n\n\n\nexport const BASE_BSC_SCAN_URLS = {\n  [MAINNET_CHAIN_ID]: 'https://bscscan.com',\n  [TESTNET_CHAIN_ID]: 'https://testnet.bscscan.com',\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_PRICE } from 'config'\nimport { getDecimalAmount } from './formatBalance'\n\nexport interface UserSettings {\n  gasPrice: number\n}\n\nexport const VERSION = 1.01\n\nexport const GAS_SETTINGS = {\n  default: DEFAULT_GAS_PRICE,\n  fast: 10,\n  reallyfast: 15,\n}\n\nexport const getGasPriceInWei = (amountInGwei: number) => {\n  return getDecimalAmount(new BigNumber(amountInGwei), 9)\n}\n\nexport const getDefaultSettings = (): UserSettings => ({\n  gasPrice: GAS_SETTINGS.default,\n})\n\nexport const getStorageKey = (account: string) => {\n  return `pancakeswap_settings_${account}_${VERSION}`\n}\n\nexport const getSettings = (account: string): UserSettings => {\n  try {\n    const settingsFromLs = localStorage.getItem(getStorageKey(account))\n    return settingsFromLs ? JSON.parse(settingsFromLs) : getDefaultSettings()\n  } catch (error) {\n    return getDefaultSettings()\n  }\n}\n\nexport const setSettings = (account: string, newSettings: UserSettings) => {\n  localStorage.setItem(getStorageKey(account), JSON.stringify(newSettings))\n}\n\nexport const setSetting = (account: string, newSetting: Partial<UserSettings>) => {\n  const currentSettings = getSettings(account)\n  setSettings(account, { ...currentSettings, ...newSetting })\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport web3NoAccount from 'utils/web3'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport inoAbi from 'config/abi/ino.json'\n\n// Addresses\nimport {\n  getAddress,\n  getPancakeProfileAddress,\n  getPancakeRabbitsAddress,\n  getBunnyFactoryAddress,\n  getBunnySpecialAddress,\n  getCakeAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getLotteryV2Address,\n  getMasterChefAddress,\n  getPointCenterIfoAddress,\n  getClaimRefundAddress,\n  getTradingCompetitionAddress,\n  getEasterNftAddress,\n  getCakeVaultAddress,\n  getPredictionsAddress,\n  getChainlinkOracleAddress,\n  getMulticallAddress,\n} from 'utils/addressHelpers'\n\n// ABI\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\nimport bep20Abi from 'config/abi/erc20.json'\nimport erc721Abi from 'config/abi/erc721.json'\nimport lpStakingAbi from 'config/abi/lpStaking.json'\nimport lpTokenAbi from 'config/abi/lpToken.json'\nimport cakeAbi from 'config/abi/cake.json'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport claimRefundAbi from 'config/abi/claimRefund.json'\nimport tradingCompetitionAbi from 'config/abi/tradingCompetition.json'\nimport easterNftAbi from 'config/abi/easterNft.json'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { DEFAULT_GAS_PRICE, TESTNET_CHAIN_ID } from 'config'\nimport { getSettings, getGasPriceInWei } from './settings'\n\nexport const getDefaultGasPrice = () => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  if (chainId === TESTNET_CHAIN_ID) {\n    return 10\n  }\n  return DEFAULT_GAS_PRICE\n}\n\nconst getContract = (abi: any, address: string, web3?: Web3, account?: string) => {\n  const _web3 = web3 ?? web3NoAccount\n  const gasPrice = account ? getSettings(account).gasPrice : getDefaultGasPrice()\n\n  return new _web3.eth.Contract(abi as unknown as AbiItem, address, {\n    gasPrice: getGasPriceInWei(gasPrice).toString(),\n  })\n}\n\nexport const getBep20Contract = (address: string, web3?: Web3) => {\n  return getContract(bep20Abi, address, web3)\n}\nexport const getErc721Contract = (address: string, web3?: Web3) => {\n  return getContract(erc721Abi, address, web3)\n}\nexport const getLpStakingContract = (address: string, web3?: Web3) => {\n  return getContract(lpStakingAbi, address, web3)\n}\nexport const getLpContract = (address: string, web3?: Web3) => {\n  return getContract(lpTokenAbi, address, web3)\n}\nexport const getIfoV1Contract = (address: string, web3?: Web3) => {\n  return getContract(ifoV1Abi, address, web3)\n}\nexport const getInoContract = (address: string, web3?: Web3) => {\n  return getContract(inoAbi, address, web3)\n}\nexport const getIfoV2Contract = (address: string, web3?: Web3) => {\n  return getContract(ifoV2Abi, address, web3)\n}\nexport const getSouschefContract = (id: number, web3?: Web3) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  return getContract(abi, getAddress(config.contractAddress), web3)\n}\nexport const getSouschefV2Contract = (id: number, web3?: Web3) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  return getContract(sousChefV2, getAddress(config.contractAddress), web3)\n}\nexport const getPointCenterIfoContract = (web3?: Web3) => {\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), web3)\n}\nexport const getCakeContract = (web3?: Web3) => {\n  return getContract(cakeAbi, getCakeAddress(), web3)\n}\nexport const getProfileContract = (web3?: Web3) => {\n  return getContract(profileABI, getPancakeProfileAddress(), web3)\n}\nexport const getPancakeRabbitContract = (web3?: Web3) => {\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), web3)\n}\nexport const getBunnyFactoryContract = (web3?: Web3) => {\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), web3)\n}\nexport const getBunnySpecialContract = (web3?: Web3) => {\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), web3)\n}\nexport const getLotteryContract = (web3?: Web3) => {\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\n}\nexport const getLotteryTicketContract = (web3?: Web3) => {\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\n}\nexport const getLotteryV2Contract = (web3?: Web3) => {\n  return getContract(lotteryV2Abi, getLotteryV2Address(), web3)\n}\nexport const getMasterchefContract = (web3?: Web3) => {\n  return getContract(masterChef, getMasterChefAddress(), web3)\n}\nexport const getClaimRefundContract = (web3?: Web3) => {\n  return getContract(claimRefundAbi, getClaimRefundAddress(), web3)\n}\nexport const getTradingCompetitionContract = (web3?: Web3) => {\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), web3)\n}\nexport const getEasterNftContract = (web3?: Web3) => {\n  return getContract(easterNftAbi, getEasterNftAddress(), web3)\n}\nexport const getCakeVaultContract = (web3?: Web3) => {\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), web3)\n}\nexport const getPredictionsContract = (web3?: Web3) => {\n  return getContract(predictionsAbi, getPredictionsAddress(), web3)\n}\nexport const getChainlinkOracleContract = (web3?: Web3) => {\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), web3)\n}\nexport const getMulticallContract = (web3?: Web3) => {\n  return getContract(MultiCallAbi, getMulticallAddress(), web3)\n}\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Bet, HistoryFilter, Market, PredictionsState, PredictionStatus, Round } from 'state/types'\nimport {\n  makeFutureRoundResponse,\n  transformRoundResponse,\n  getBetHistory,\n  transformBetResponse,\n  getBet,\n  makeRoundData,\n} from './helpers'\n\nconst initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  currentRoundStartBlockNumber: 0,\n  intervalBlocks: 100,\n  bufferBlocks: 2,\n  minBetAmount: '1000000000000000',\n  lastOraclePrice: BIG_ZERO.toJSON(),\n  rounds: {},\n  history: {},\n  bets: {},\n}\n\n// Thunks\nexport const fetchBet = createAsyncThunk<{ account: string; bet: Bet }, { account: string; id: string }>(\n  'predictions/fetchBet',\n  async ({ account, id }) => {\n    const response = await getBet(id)\n    const bet = transformBetResponse(response)\n    return { account, bet }\n  },\n)\n\nexport const fetchRoundBet = createAsyncThunk<\n  { account: string; roundId: string; bet: Bet },\n  { account: string; roundId: string }\n>('predictions/fetchRoundBet', async ({ account, roundId }) => {\n  const betResponses = await getBetHistory({\n    user: account.toLowerCase(),\n    round: roundId,\n  })\n\n  // This should always return 0 or 1 bet because a user can only place\n  // one bet per round\n  if (betResponses && betResponses.length === 1) {\n    const [betResponse] = betResponses\n    return { account, roundId, bet: transformBetResponse(betResponse) }\n  }\n\n  return { account, roundId, bet: null }\n})\n\n/**\n * Used to poll the user bets of the current round cards\n */\nexport const fetchCurrentBets = createAsyncThunk<\n  { account: string; bets: Bet[] },\n  { account: string; roundIds: string[] }\n>('predictions/fetchCurrentBets', async ({ account, roundIds }) => {\n  const betResponses = await getBetHistory({\n    user: account.toLowerCase(),\n    round_in: roundIds,\n  })\n\n  return { account, bets: betResponses.map(transformBetResponse) }\n})\n\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\n  'predictions/fetchHistory',\n  async ({ account, claimed }) => {\n    const response = await getBetHistory({\n      user: account.toLowerCase(),\n      claimed,\n    })\n    const bets = response.map(transformBetResponse)\n\n    return { account, bets }\n  },\n)\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\n      state.status = action.payload\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    initialize: (state, action: PayloadAction<PredictionsState>) => {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    },\n    updateMarketData: (state, action: PayloadAction<{ rounds: Round[]; market: Market }>) => {\n      const { rounds, market } = action.payload\n      const newRoundData = makeRoundData(rounds)\n      const incomingCurrentRound = maxBy(rounds, 'epoch')\n\n      if (state.currentEpoch !== incomingCurrentRound.epoch) {\n        // Add new round\n        const newestRound = maxBy(rounds, 'epoch') as Round\n        const futureRound = transformRoundResponse(\n          makeFutureRoundResponse(newestRound.epoch + 2, newestRound.startBlock + state.intervalBlocks),\n        )\n\n        newRoundData[futureRound.id] = futureRound\n      }\n\n      state.currentEpoch = incomingCurrentRound.epoch\n      state.currentRoundStartBlockNumber = incomingCurrentRound.startBlock\n      state.status = market.paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE\n      state.rounds = { ...state.rounds, ...newRoundData }\n    },\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\n      state.currentEpoch = action.payload\n    },\n    markBetAsCollected: (state, action: PayloadAction<{ account: string; roundId: string }>) => {\n      const { account, roundId } = action.payload\n      const accountBets = state.bets[account]\n\n      if (accountBets && accountBets[roundId]) {\n        accountBets[roundId].claimed = true\n      }\n    },\n    markPositionAsEntered: (state, action: PayloadAction<{ account: string; roundId: string; bet: Bet }>) => {\n      const { account, roundId, bet } = action.payload\n\n      state.bets = {\n        ...state.bets,\n        [account]: {\n          ...state.bets[account],\n          [roundId]: bet,\n        },\n      }\n    },\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\n      state.lastOraclePrice = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    // Get unclaimed bets\n    builder.addCase(fetchCurrentBets.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n      const betData = bets.reduce((accum, bet) => {\n        return {\n          ...accum,\n          [bet.round.id]: bet,\n        }\n      }, {})\n\n      state.bets = merge({}, state.bets, {\n        [account]: betData,\n      })\n    })\n\n    // Get round bet\n    builder.addCase(fetchRoundBet.fulfilled, (state, action) => {\n      const { account, roundId, bet } = action.payload\n\n      if (bet) {\n        state.bets = {\n          ...state.bets,\n          [account]: {\n            ...state.bets[account],\n            [roundId]: bet,\n          },\n        }\n      }\n    })\n\n    // Update Bet\n    builder.addCase(fetchBet.fulfilled, (state, action) => {\n      const { account, bet } = action.payload\n      state.history[account] = [...state.history[account].filter((currentBet) => currentBet.id !== bet.id), bet]\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n      state.isHistoryPaneOpen = true\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.isHistoryPaneOpen = true\n      state.history[account] = bets\n\n      // Save any fetched bets in the \"bets\" namespace\n      const betData = bets.reduce((accum, bet) => {\n        return {\n          ...accum,\n          [bet.round.id]: bet,\n        }\n      }, {})\n\n      state.bets = merge({}, state.bets, {\n        [account]: betData,\n      })\n    })\n  },\n})\n\n// Actions\nexport const {\n  initialize,\n  setChartPaneState,\n  setCurrentEpoch,\n  setHistoryFilter,\n  setHistoryPaneState,\n  updateMarketData,\n  markBetAsCollected,\n  setPredictionStatus,\n  markPositionAsEntered,\n  setLastOraclePrice,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\nimport predictionsReducer from './predictions'\nimport profileReducer from './profile'\nimport teamsReducer from './teams'\nimport achievementsReducer from './achievements'\n// import guildpadReduer from './launchpad'\nimport guildpadReducer from './guildpads'\nimport blockReducer from './block'\nimport collectiblesReducer from './collectibles'\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    guildpads: guildpadReducer,\n    block: blockReducer,\n    farms: farmsReducer,\n    pools: poolsReducer,\n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    collectibles: collectiblesReducer,\n  },\n})\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport default store\n","const guildpadTokens = {\n  TankWarsZone: {\n    symbol: 'TankWarsZone',\n    address: {\n      56: 'tankwarszone',\n      97: 'tankwarszone',\n    },\n    iconExtension: 'png',\n    decimals: 18,\n    projectLink: 'https://www.tankwars.zone/',\n  },\n  demole: {\n    symbol: '$DMLG',\n    address: {\n      56: 'demole',\n      97: 'demole',\n    },\n    iconExtension: 'png',\n    decimals: 18,\n    projectLink: 'https://demole.io/',\n  },\n  acknoledger: {\n    symbol: 'Acknoledger',\n    address: {\n      56: 'Acknoledger',\n      96: 'Acknoledger',\n    },\n    iconExtension: 'png',\n    decimals: 18,\n    projectLink: 'https://acknoledger.com/'\n  }\n}\n\nconst tokens = {\n  ...guildpadTokens,\n  sfuel: {\n    symbol: 'SFUEL',\n    address: {\n      56: '0x37ac4d6140e54304d77437a5c11924f61a2d976f',\n      97: '0x37ac4d6140e54304d77437a5c11924f61a2d976f',\n    },\n    decimals: 18,\n    projectLink: 'https://sparkpoint.io/',\n  },\n  bnb: {\n    symbol: 'BNB',\n    projectLink: 'https://www.binance.com/',\n  },\n  cake: {\n    symbol: 'CAKE',\n    address: {\n      56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n      97: '0xa35062141Fa33BCA92Ce69FeD37D0E8908868AAe',\n    },\n    decimals: 18,\n    projectLink: 'https://pancakeswap.finance/',\n  },\n  txl: {\n    symbol: 'TXL',\n    address: {\n      56: '0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://tixl.org/',\n  },\n  cos: {\n    symbol: 'COS',\n    address: {\n      56: '0x96Dd399F9c3AFda1F194182F71600F1B65946501',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.contentos.io/',\n  },\n  bunny: {\n    symbol: 'BUNNY',\n    address: {\n      56: '0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://pancakebunny.finance/',\n  },\n  alice: {\n    symbol: 'ALICE',\n    address: {\n      56: '0xAC51066d7bEC65Dc4589368da368b212745d63E8',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://www.myneighboralice.com/',\n  },\n  for: {\n    symbol: 'FOR',\n    address: {\n      56: '0x658A109C5900BC6d2357c87549B651670E5b0539',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.for.tube/home',\n  },\n  bux: {\n    symbol: 'BUX',\n    address: {\n      56: '0x211FfbE424b90e25a15531ca322adF1559779E45',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://getbux.com/bux-crypto/',\n  },\n  nuls: {\n    symbol: 'NULS',\n    address: {\n      56: '0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://www.nuls.io/',\n  },\n  belt: {\n    symbol: 'BELT',\n    address: {\n      56: '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://beta.belt.fi/',\n  },\n  ramp: {\n    symbol: 'RAMP',\n    address: {\n      56: '0x8519EA49c997f50cefFa444d240fB655e89248Aa',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://rampdefi.com/',\n  },\n  bfi: {\n    symbol: 'BFI',\n    address: {\n      56: '0x81859801b01764D4f0Fa5E64729f5a6C3b91435b',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bearn.fi/',\n  },\n  dexe: {\n    symbol: 'DEXE',\n    address: {\n      56: '0x039cB485212f996A9DBb85A9a75d898F94d38dA6',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://dexe.network/',\n  },\n  bel: {\n    symbol: 'BEL',\n    address: {\n      56: '0x8443f091997f06a61670B735ED92734F5628692F',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bella.fi/',\n  },\n  tpt: {\n    symbol: 'TPT',\n    address: {\n      56: '0xECa41281c24451168a37211F0bc2b8645AF45092',\n      97: '',\n    },\n    decimals: 4,\n    projectLink: 'https://www.tokenpocket.pro/',\n  },\n  watch: {\n    symbol: 'WATCH',\n    address: {\n      56: '0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://yieldwatch.net/',\n  },\n  xmark: {\n    symbol: 'xMARK',\n    address: {\n      56: '0x26A5dFab467d4f58fB266648CAe769503CEC9580',\n      97: '',\n    },\n    decimals: 9,\n    projectLink: 'https://benchmarkprotocol.finance/',\n  },\n  bmxx: {\n    symbol: 'bMXX',\n    address: {\n      56: '0x4131b87F74415190425ccD873048C708F8005823',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://multiplier.finance/',\n  },\n  iotx: {\n    symbol: 'IOTX',\n    address: {\n      56: '0x9678E42ceBEb63F23197D726B29b1CB20d0064E5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://iotex.io/',\n  },\n  bor: {\n    symbol: 'BOR',\n    address: {\n      56: '0x92D7756c60dcfD4c689290E8A9F4d263b3b32241',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.boringdao.com/',\n  },\n  bopen: {\n    symbol: 'bOPEN',\n    address: {\n      56: '0xF35262a9d427F96d2437379eF090db986eaE5d42',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://opendao.io/',\n  },\n  dodo: {\n    symbol: 'DODO',\n    address: {\n      56: '0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://dodoex.io/',\n  },\n  swingby: {\n    symbol: 'SWINGBY',\n    address: {\n      56: '0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://swingby.network/',\n  },\n  bry: {\n    symbol: 'BRY',\n    address: {\n      56: '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://berrydata.co/',\n  },\n  zee: {\n    symbol: 'ZEE',\n    address: {\n      56: '0x44754455564474A89358B2C2265883DF993b12F0',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://zeroswap.io/',\n  },\n  swgb: {\n    symbol: 'SWGb',\n    address: {\n      56: '0xe40255c5d7fa7ceec5120408c78c787cecb4cfdb',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://swirgepay.com/',\n  },\n  swg: {\n    symbol: 'SWG',\n    address: {\n      56: '0xe792f64C582698b8572AAF765bDC426AC3aEfb6B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://swirgepay.com/',\n  },\n  sfp: {\n    symbol: 'SFP',\n    address: {\n      56: '0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.safepal.io/',\n  },\n  lina: {\n    symbol: 'LINA',\n    address: {\n      56: '0x762539b45A1dCcE3D36d080F74d1AED37844b878',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://linear.finance/',\n  },\n  lit: {\n    symbol: 'LIT',\n    address: {\n      56: '0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.litentry.com/',\n  },\n  hget: {\n    symbol: 'HGET',\n    address: {\n      56: '0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://www.hedget.com/',\n  },\n  bdo: {\n    symbol: 'BDO',\n    address: {\n      56: '0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bdollar.fi/',\n  },\n  egld: {\n    symbol: 'EGLD',\n    address: {\n      56: '0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://elrond.com/',\n  },\n  ust: {\n    symbol: 'UST',\n    address: {\n      56: '0x23396cf899ca06c4472205fc903bdb4de249d6fc',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  wsote: {\n    symbol: 'wSOTE',\n    address: {\n      56: '0x541E619858737031A1244A5d0Cd47E5ef480342c',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://soteria.finance/#/',\n  },\n  front: {\n    symbol: 'FRONT',\n    address: {\n      56: '0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://frontier.xyz/',\n  },\n  helmet: {\n    symbol: 'Helmet',\n    address: {\n      56: '0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.helmet.insure/',\n  },\n  btcst: {\n    symbol: 'BTCST',\n    address: {\n      56: '0x78650B139471520656b9E7aA7A5e9276814a38e9',\n      97: '',\n    },\n    decimals: 17,\n    projectLink: 'https://www.1-b.tc/',\n  },\n  bscx: {\n    symbol: 'BSCX',\n    address: {\n      56: '0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bscex.org/',\n  },\n  ten: {\n    symbol: 'TEN',\n    address: {\n      56: '0xdFF8cb622790b7F92686c722b02CaB55592f152C',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.tenet.farm/',\n  },\n  balbt: {\n    symbol: 'bALBT',\n    address: {\n      56: '0x72fAa679E1008Ad8382959FF48E392042A8b06f7',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://allianceblock.io/',\n  },\n  asr: {\n    symbol: 'ASR',\n    address: {\n      56: '0x80D5f92C2c8C682070C95495313dDB680B267320',\n      97: '',\n    },\n    decimals: 2,\n    projectLink: 'https://www.chiliz.com',\n  },\n  atm: {\n    symbol: 'ATM',\n    address: {\n      56: '0x25E9d05365c867E59C1904E7463Af9F312296f9E',\n      97: '',\n    },\n    decimals: 2,\n    projectLink: 'https://www.chiliz.com',\n  },\n  og: {\n    symbol: 'OG',\n    address: {\n      56: '0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c',\n      97: '',\n    },\n    decimals: 2,\n    projectLink: 'https://www.chiliz.com',\n  },\n  reef: {\n    symbol: 'REEF',\n    address: {\n      56: '0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://reef.finance/',\n  },\n  ditto: {\n    symbol: 'DITTO',\n    address: {\n      56: '0x233d91A0713155003fc4DcE0AFa871b508B3B715',\n      97: '',\n    },\n    decimals: 9,\n    projectLink: 'https://ditto.money/',\n  },\n  juv: {\n    symbol: 'JUV',\n    address: {\n      56: '0xC40C9A843E1c6D01b7578284a9028854f6683b1B',\n      97: '',\n    },\n    decimals: 2,\n    projectLink: 'https://www.chiliz.com',\n  },\n  psg: {\n    symbol: 'PSG',\n    address: {\n      56: '0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1',\n      97: '',\n    },\n    decimals: 2,\n    projectLink: 'https://www.chiliz.com',\n  },\n  vai: {\n    symbol: 'VAI',\n    address: {\n      56: '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://venus.io/',\n  },\n  wbnb: {\n    symbol: 'wBNB',\n    address: {\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\n    },\n    decimals: 18,\n    projectLink: 'https://pancakeswap.finance/',\n  },\n  blink: {\n    symbol: 'BLINK',\n    address: {\n      56: '0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://blink.wink.org',\n  },\n  unfi: {\n    symbol: 'UNFI',\n    address: {\n      56: '0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://unifiprotocol.com',\n  },\n  twt: {\n    symbol: 'TWT',\n    address: {\n      56: '0x4B0F1812e5Df2A09796481Ff14017e6005508003',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://trustwallet.com/',\n  },\n  hard: {\n    symbol: 'HARD',\n    address: {\n      56: '0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://hard.kava.io',\n  },\n  broobee: {\n    symbol: 'bROOBEE',\n    address: {\n      56: '0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://roobee.io/',\n  },\n  stax: {\n    symbol: 'STAX',\n    address: {\n      56: '0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'http://stablexswap.com/',\n  },\n  nar: {\n    symbol: 'NAR',\n    address: {\n      56: '0xA1303E6199b319a891b79685F0537D289af1FC83',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://narwhalswap.org/',\n  },\n  nya: {\n    symbol: 'NYA',\n    address: {\n      56: '0xbFa0841F7a90c4CE6643f651756EE340991F99D5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://nyanswop.org/',\n  },\n  ctk: {\n    symbol: 'CTK',\n    address: {\n      56: '0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://www.certik.foundation/',\n  },\n  inj: {\n    symbol: 'INJ',\n    address: {\n      56: '0xa2B726B1145A4773F68593CF171187d8EBe4d495',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://injectiveprotocol.com/',\n  },\n  sxp: {\n    symbol: 'SXP',\n    address: {\n      56: '0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://swipe.io/',\n  },\n  alpha: {\n    symbol: 'ALPHA',\n    address: {\n      56: '0xa1faa113cbE53436Df28FF0aEe54275c13B40975',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://alphafinance.io/',\n  },\n  xvs: {\n    symbol: 'XVS',\n    address: {\n      56: '0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://venus.io/',\n  },\n  sushi: {\n    symbol: 'SUSHI',\n    address: {\n      56: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://sushi.com/',\n  },\n  comp: {\n    symbol: 'COMP',\n    address: {\n      56: '0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://compound.finance/',\n  },\n  syrup: {\n    symbol: 'SYRUP',\n    address: {\n      56: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n      97: '0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9',\n    },\n    decimals: 18,\n    projectLink: 'https://pancakeswap.finance/',\n  },\n  bifi: {\n    symbol: 'BIFI',\n    address: {\n      56: '0xCa3F508B8e4Dd382eE878A314789373D80A5190A',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://beefy.finance/',\n  },\n  dusk: {\n    symbol: 'DUSK',\n    address: {\n      56: '0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://dusk.network/',\n  },\n  busd: {\n    symbol: 'BUSD',\n    address: {\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.paxos.com/busd/',\n  },\n  eth: {\n    symbol: 'ETH',\n    address: {\n      56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ethereum.org/en/',\n  },\n  beth: {\n    symbol: 'BETH',\n    address: {\n      56: '0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ethereum.org/en/eth2/beacon-chain/',\n  },\n  mamzn: {\n    symbol: 'mAMZN',\n    address: {\n      56: '0x3947B992DC0147D2D89dF0392213781b04B25075',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  mgoogl: {\n    symbol: 'mGOOGL',\n    address: {\n      56: '0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  mnflx: {\n    symbol: 'mNFLX',\n    address: {\n      56: '0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  mtsla: {\n    symbol: 'mTSLA',\n    address: {\n      56: '0xF215A127A196e3988C09d052e16BcFD365Cd7AA3',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  ltc: {\n    symbol: 'LTC',\n    address: {\n      56: '0x4338665CBB7B2485A8855A139b75D5e34AB0DB94',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://litecoin.org/',\n  },\n  usdc: {\n    symbol: 'USDC',\n    address: {\n      56: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.centre.io/usdc',\n  },\n  dai: {\n    symbol: 'DAI',\n    address: {\n      56: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'http://www.makerdao.com/',\n  },\n  ada: {\n    symbol: 'ADA',\n    address: {\n      56: '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://www.cardano.org/',\n  },\n  band: {\n    symbol: 'BAND',\n    address: {\n      56: '0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://bandprotocol.com/',\n  },\n  dot: {\n    symbol: 'DOT',\n    address: {\n      56: '0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://polkadot.network/',\n  },\n  eos: {\n    symbol: 'EOS',\n    address: {\n      56: '0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://eos.io/',\n  },\n  link: {\n    symbol: 'LINK',\n    address: {\n      56: '0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://chain.link/',\n  },\n  usdt: {\n    symbol: 'USDT',\n    address: {\n      56: '0x55d398326f99059fF775485246999027B3197955',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://tether.to/',\n  },\n  btcb: {\n    symbol: 'BTCB',\n    address: {\n      56: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://bitcoin.org/',\n  },\n  xrp: {\n    symbol: 'XRP',\n    address: {\n      56: '0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://ripple.com/xrp/',\n  },\n  atom: {\n    symbol: 'ATOM',\n    address: {\n      56: '0x0Eb3a705fc54725037CC9e008bDede697f62F335',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://cosmos.network/',\n  },\n  yfii: {\n    symbol: 'YFII',\n    address: {\n      56: '0x7F70642d88cf1C4a3a7abb072B53B929b653edA5',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://dfi.money/#/',\n  },\n  xtz: {\n    symbol: 'XTZ',\n    address: {\n      56: '0x16939ef78684453bfDFb47825F8a5F714f12623a',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://www.tezos.com/',\n  },\n  bch: {\n    symbol: 'BCH',\n    address: {\n      56: '0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'http://bch.info/',\n  },\n  yfi: {\n    symbol: 'YFI',\n    address: {\n      56: '0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://yearn.finance/',\n  },\n  uni: {\n    symbol: 'UNI',\n    address: {\n      56: '0xBf5140A22578168FD562DCcF235E5D43A02ce9B1',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://uniswap.org/',\n  },\n  fil: {\n    symbol: 'FIL',\n    address: {\n      56: '0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://filecoin.io/',\n  },\n  bake: {\n    symbol: 'BAKE',\n    address: {\n      56: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bakeryswap.org/',\n  },\n  burger: {\n    symbol: 'BURGER',\n    address: {\n      56: '0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f',\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    decimals: 18,\n    projectLink: 'https://burgerswap.org/',\n  },\n  bdigg: {\n    symbol: 'bDIGG',\n    address: {\n      56: '0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://badger.finance/',\n  },\n  bbadger: {\n    symbol: 'bBadger',\n    address: {\n      56: '0x1F7216fdB338247512Ec99715587bb97BBf96eae',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://badger.finance/',\n  },\n  trade: {\n    symbol: 'TRADE',\n    address: {\n      56: '0x7af173F350D916358AF3e218Bdf2178494Beb748',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://unitrade.app/',\n  },\n  pnt: {\n    symbol: 'PNT',\n    address: {\n      56: '0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ptokens.io/',\n  },\n  mir: {\n    symbol: 'MIR',\n    address: {\n      56: '0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  pbtc: {\n    symbol: 'pBTC',\n    address: {\n      56: '0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ptokens.io/',\n  },\n  lto: {\n    symbol: 'LTO',\n    address: {\n      56: '0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ltonetwork.com/',\n  },\n  pcws: {\n    symbol: 'pCWS',\n    address: {\n      56: '0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://game.seascape.network/',\n  },\n  zil: {\n    symbol: 'ZIL',\n    address: {\n      56: '0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787',\n      97: '',\n    },\n    decimals: 12,\n    projectLink: 'https://www.zilliqa.com/',\n  },\n  lien: {\n    symbol: 'LIEN',\n    address: {\n      56: '0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://lien.finance/',\n  },\n  swth: {\n    symbol: 'SWTH',\n    address: {\n      56: '0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://switcheo.network/',\n  },\n  dft: {\n    symbol: 'DFT',\n    address: {\n      56: '0x42712dF5009c20fee340B245b510c0395896cF6e',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.dfuture.com/home',\n  },\n  gum: {\n    symbol: 'GUM',\n    address: {\n      56: '0xc53708664b99DF348dd27C3Ac0759d2DA9c40462',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://gourmetgalaxy.io/',\n  },\n  dego: {\n    symbol: 'DEGO',\n    address: {\n      56: '0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bsc.dego.finance/home',\n  },\n  nrv: {\n    symbol: 'NRV',\n    address: {\n      56: '0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://nerve.fi/',\n  },\n  easy: {\n    symbol: 'EASY',\n    address: {\n      56: '0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://easyfi.network/',\n  },\n  oddz: {\n    symbol: 'ODDZ',\n    address: {\n      56: '0xCD40F2670CF58720b694968698A5514e924F742d',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://oddz.fi/',\n  },\n  hoo: {\n    symbol: 'HOO',\n    address: {\n      56: '0xE1d1F66215998786110Ba0102ef558b22224C016',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://hoo.com/',\n  },\n  apys: {\n    symbol: 'APYS',\n    address: {\n      56: '0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://apyswap.com/',\n  },\n  bondly: {\n    symbol: 'BONDLY',\n    address: {\n      56: '0x96058f8C3e16576D9BD68766f3836d9A33158f89',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bondly.finance/',\n  },\n  tko: {\n    symbol: 'TKO',\n    address: {\n      56: '0x9f589e3eabe42ebC94A44727b3f3531C0c877809',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.tokocrypto.com/',\n  },\n  itam: {\n    symbol: 'ITAM',\n    address: {\n      56: '0x04C747b40Be4D535fC83D09939fb0f626F32800B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://itam.network/',\n  },\n  arpa: {\n    symbol: 'ARPA',\n    address: {\n      56: '0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://arpachain.io/',\n  },\n  eps: {\n    symbol: 'EPS',\n    address: {\n      56: '0xA7f552078dcC247C2684336020c03648500C6d9F',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://ellipsis.finance/',\n  },\n  jgn: {\n    symbol: 'JGN',\n    address: {\n      56: '0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://jgndefi.com/',\n  },\n  tlm: {\n    symbol: 'TLM',\n    address: {\n      56: '0x2222227E22102Fe3322098e4CBfE18cFebD57c95',\n      97: '',\n    },\n    decimals: 4,\n    projectLink: 'https://alienworlds.io/',\n  },\n  perl: {\n    symbol: 'PERL',\n    address: {\n      56: '0x0F9E4D49f25de22c2202aF916B681FBB3790497B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://perlinx.finance/',\n  },\n  alpa: {\n    symbol: 'ALPA',\n    address: {\n      56: '0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://bsc.alpaca.city/',\n  },\n  hzn: {\n    symbol: 'HZN',\n    address: {\n      56: '0xC0eFf7749b125444953ef89682201Fb8c6A917CD',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://horizonprotocol.com/',\n  },\n  suter: {\n    symbol: 'SUTER',\n    address: {\n      56: '0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://shield.suterusu.io/',\n  },\n  cgg: {\n    symbol: 'CGG',\n    address: {\n      56: '0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://chainguardians.io/',\n  },\n  mix: {\n    symbol: 'MIX',\n    address: {\n      56: '0xB67754f5b4C704A24d2db68e661b2875a4dDD197',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mixie.chainguardians.io/',\n  },\n  hakka: {\n    symbol: 'HAKKA',\n    address: {\n      56: '0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://hakka.finance/',\n  },\n  xed: {\n    symbol: 'XED',\n    address: {\n      56: '0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.exeedme.com/',\n  },\n  τbtc: {\n    symbol: 'τBTC',\n    address: {\n      56: '0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c',\n      97: '',\n    },\n    decimals: 9,\n    projectLink: 'https://www.btcst.finance/',\n  },\n  alpaca: {\n    symbol: 'ALPACA',\n    address: {\n      56: '0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.alpacafinance.org/',\n  },\n  dfd: {\n    symbol: 'DFD',\n    address: {\n      56: '0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://dusd.finance/',\n  },\n  lmt: {\n    symbol: 'LMT',\n    address: {\n      56: '0x9617857E191354dbEA0b714d78Bc59e57C411087',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://lympo.io/lmt/',\n  },\n  btt: {\n    symbol: 'BTT',\n    address: {\n      56: '0x8595F9dA7b868b1822194fAEd312235E43007b49',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bittorrent.com/',\n  },\n  trx: {\n    symbol: 'TRX',\n    address: {\n      56: '0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://tron.network/',\n  },\n  win: {\n    symbol: 'WIN',\n    address: {\n      56: '0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://winklink.org/',\n  },\n  mcoin: {\n    symbol: 'mCOIN',\n    address: {\n      56: '0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mirror.finance/',\n  },\n  math: {\n    symbol: 'MATH',\n    address: {\n      56: '0xF218184Af829Cf2b0019F8E6F0b2423498a36983',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://mathwallet.org/',\n  },\n  kun: {\n    symbol: 'KUN',\n    address: {\n      56: '0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://chemix.io/home',\n  },\n  qsd: {\n    symbol: 'QSD',\n    address: {\n      56: '0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://chemix.io/home',\n  },\n  hyfi: {\n    symbol: 'HYFI',\n    address: {\n      56: '0x9a319b959e33369C5eaA494a770117eE3e585318',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://hyfi.pro/#/',\n  },\n  oin: {\n    symbol: 'OIN',\n    address: {\n      56: '0x658E64FFcF40D240A43D52CA9342140316Ae44fA',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://oin.finance/',\n  },\n  doge: {\n    symbol: 'DOGE',\n    address: {\n      56: '0xbA2aE424d960c26247Dd6c32edC70B295c744C43',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://dogecoin.com/',\n  },\n  fine: {\n    symbol: 'FINE',\n    address: {\n      56: '0x4e6415a5727ea08aAE4580057187923aeC331227',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://refinable.com/',\n  },\n  one: {\n    symbol: 'ONE',\n    address: {\n      56: '0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bigone.com/',\n  },\n  pmon: {\n    symbol: 'PMON',\n    address: {\n      56: '0x1796ae0b0fa4862485106a0de9b654eFE301D0b2',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://polkamon.com/',\n  },\n  hotcross: {\n    symbol: 'HOTCROSS',\n    address: {\n      56: '0x4FA7163E153419E0E1064e418dd7A99314Ed27b6',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.hotcross.com/',\n  },\n  τdoge: {\n    symbol: 'τDOGE',\n    address: {\n      56: '0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://www.btcst.finance/',\n  },\n  btr: {\n    symbol: 'BTR',\n    address: {\n      56: '0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bitrue.com/',\n  },\n  ubxt: {\n    symbol: 'UBXT',\n    address: {\n      56: '0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://upbots.com/',\n  },\n  wmass: {\n    symbol: 'WMASS',\n    address: {\n      56: '0x7e396BfC8a2f84748701167c2d622F041A1D7a17',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://massnet.org/en/',\n  },\n  rfox: {\n    symbol: 'RFOX',\n    address: {\n      56: '0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.redfoxlabs.io/',\n  },\n  xend: {\n    symbol: 'XEND',\n    address: {\n      56: '0x4a080377f83D669D7bB83B3184a8A5E61B500608',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://xend.finance/',\n  },\n  cyc: {\n    symbol: 'CYC',\n    address: {\n      56: '0x810EE35443639348aDbbC467b33310d2AB43c168',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://cyclone.xyz/',\n  },\n  chr: {\n    symbol: 'CHR',\n    address: {\n      56: '0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE',\n      97: '',\n    },\n    decimals: 6,\n    projectLink: 'https://chromia.com/',\n  },\n  kalm: {\n    symbol: 'KALM',\n    address: {\n      56: '0x4BA0057f784858a48fe351445C672FF2a3d43515',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://kalmar.io/',\n  },\n  deri: {\n    symbol: 'DERI',\n    address: {\n      56: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://deri.finance/#/index',\n  },\n  well: {\n    symbol: 'WELL',\n    address: {\n      56: '0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.bitwellex.com/',\n  },\n  popen: {\n    symbol: 'pOPEN',\n    address: {\n      56: '0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://opendao.io/',\n  },\n  ez: {\n    symbol: 'EZ',\n    address: {\n      56: '0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://easyfi.network/',\n  },\n  vrt: {\n    symbol: 'VRT',\n    address: {\n      56: '0x5F84ce30DC3cF7909101C69086c50De191895883',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://venus.io/',\n  },\n  tusd: {\n    symbol: 'TUSD',\n    address: {\n      56: '0x14016E85a25aeb13065688cAFB43044C2ef86784',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.trueusd.com/',\n  },\n  mtrg: {\n    symbol: 'MTRG',\n    address: {\n      56: '0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.meter.io/',\n  },\n  ktn: {\n    symbol: 'KTN',\n    address: {\n      56: '0xDAe6c2A48BFAA66b43815c5548b10800919c993E',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://kattana.io/',\n  },\n  qkc: {\n    symbol: 'QKC',\n    address: {\n      56: '0xA1434F1FC3F437fa33F7a781E041961C0205B5Da',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://quarkchain.io/',\n  },\n  bcfx: {\n    symbol: 'bCFX',\n    address: {\n      56: '0x045c4324039dA91c52C55DF5D785385Aab073DcF',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.confluxnetwork.org/',\n  },\n  mx: {\n    symbol: 'MX',\n    address: {\n      56: '0x9F882567A62a5560d147d64871776EeA72Df41D3',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.mxc.com/',\n  },\n  ata: {\n    symbol: 'ATA',\n    address: {\n      56: '0xA2120b9e674d3fC3875f415A7DF52e382F141225',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.ata.network/',\n  },\n  mbox: {\n    symbol: 'MBOX',\n    address: {\n      56: '0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.mobox.io/#/',\n  },\n  boring: {\n    symbol: 'BORING',\n    address: {\n      56: '0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.boringdao.com/',\n  },\n  marsh: {\n    symbol: 'MARSH',\n    address: {\n      56: '0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://unmarshal.io/',\n  },\n  ampl: {\n    symbol: 'AMPL',\n    address: {\n      56: '0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F',\n      97: '',\n    },\n    decimals: 9,\n    projectLink: 'https://www.ampleforth.org/',\n  },\n  o3: {\n    symbol: 'O3',\n    address: {\n      56: '0xEe9801669C6138E84bD50dEB500827b776777d28',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://o3swap.com/',\n  },\n  hai: {\n    symbol: 'HAI',\n    address: {\n      56: '0xaA9E582e5751d703F85912903bacADdFed26484C',\n      97: '',\n    },\n    decimals: 8,\n    projectLink: 'https://hacken.io/',\n  },\n  htb: {\n    symbol: 'HTB',\n    address: {\n      56: '0x4e840AADD28DA189B9906674B4Afcb77C128d9ea',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://www.hotbit.io/',\n  },\n  woo: {\n    symbol: 'WOO',\n    address: {\n      56: '0x4691937a7508860F876c9c0a2a617E7d9E945D4B',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://woo.network/',\n  },\n  $dg: {\n    symbol: '$DG',\n    address: {\n      56: '0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19',\n      97: '',\n    },\n    decimals: 18,\n    projectLink: 'https://decentral.games/',\n  },\n  srkb: {\n    symbol: 'SRKb',\n    address: {\n      56: '0xC3440c10c4F36f354eB591B19FafB4906d449B75',\n      97: '0xC3440c10c4F36f354eB591B19FafB4906d449B75',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n    projectLink: 'https://sparkpoint.io/',\n  },\n  mgg: {\n    symbol: 'MGG',\n    address: {\n      1: '0x9F7A0406Abe72354006Ac8949c156365A7455e3A',\n      56: '0x6125adcab2f171bc70cfe2caecfec5509273a86a',\n      97: '0xb67F3922042B8c4546DFD9E55C1E55CaC7aE1F3f',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n    projectLink: 'https://sparkpoint.io/',\n  },\n  ttkb: {\n    symbol: 'TTKb',\n    address: {\n      56: '0x9ee47c9630a41525c139ef9ca42ba3b238ecfecf',\n      97: '0x9ee47c9630a41525c139ef9ca42ba3b238ecfecf',\n    },\n    decimals: 18,\n    projectLink: 'https://sparkpoint.io/',\n  },\n  own: {\n    symbol: 'OWN',\n    address: {\n      56: '0x7665CB7b0d01Df1c9f9B9cC66019F00aBD6959bA',\n      97: '0x7665CB7b0d01Df1c9f9B9cC66019F00aBD6959bA',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n    projectLink: 'https://ownly.io/',\n  },\n  kclp: {\n    symbol: 'KCLP',\n    address: {\n      56: '0x47b8806C2891c4a92b5c590C32CFE1Eb617648EF',\n      97: '0x47b8806C2891c4a92b5c590C32CFE1Eb617648EF',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n    projectLink: 'https://kucoinlaunchpad.com/',\n  },\n  kroot: {\n    symbol: 'KROOT',\n    address: {\n      56: '0x0cD3a8Ce155A8d9DAAF19E5caa642e72a2a24Cd8',\n      97: '0x0cD3a8Ce155A8d9DAAF19E5caa642e72a2a24Cd8',\n    },\n    decimals: 18,\n  },\n  bglg: {\n    symbol: 'BGLG',\n    address: {\n      56: '0xEa01D8D9EaCCa9996Db6Bb3377c1Fe64308e7328',\n      97: '0xEa01D8D9EaCCa9996Db6Bb3377c1Fe64308e7328',\n    },\n    decimals: 18,\n  },\n  kgo: {\n    symbol: 'KGO',\n    address: {\n      56: '0x5d3AfBA1924aD748776E4Ca62213BF7acf39d773',\n      97: '0x5d3AfBA1924aD748776E4Ca62213BF7acf39d773',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n  tipsy: {\n    symbol: 'TIPSY',\n    address: {\n      56: '0xf380334b9A181F54BF2f32FDD3e153D259472eBB',\n      97: '0xf380334b9A181F54BF2f32FDD3e153D259472eBB',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n  gzila: {\n    symbol: 'GZILA',\n    address: {\n      56: '0x4178934c6E313a062c5addD66ab0D9B8d858347a',\n      97: '0x4178934c6E313a062c5addD66ab0D9B8d858347a',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n  flash: {\n    symbol: 'FLASH',\n    address: {\n      56: '0x5f0366c9962193fa774cdce9602195593b49f23c',\n      97: '0x5f0366c9962193fa774cdce9602195593b49f23c',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n  bhc: {\n    symbol: 'BHC',\n    address: {\n      56: '0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4',\n      97: '0x6fd7c98458a943f469e1cf4ea85b173f5cd342f4',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n  hps: {\n    symbol: 'MGG',\n    address: {\n      56: '0xeda21b525ac789eab1a08ef2404dd8505ffb973d',\n      97: '0xeda21b525ac789eab1a08ef2404dd8505ffb973d',\n    },\n    decimals: 18,\n    iconExtension: 'png',\n  },\n}\n\nexport default tokens\n\n","import tokens from './tokens'\nimport { PoolConfig, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  {\n    isMain: true,\n    sousId: 9,\n    stakingToken: tokens.mgg,\n    earningToken: tokens.mgg,\n    contractAddress: {\n      97: '0x131E4A6743C942c1c564fB124fD069f96e44629B',\n      56: '0x6506b58CEFecA9820debC9485Fc2A49E3310C869',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '154320987654320987',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  // Dummy Contract #1\n  // {\n  //   sousId: 4,\n  //   stakingToken: tokens.sfuel,\n  //   earningToken: tokens.sfuel,\n  //   contractAddress: {\n  //     97: '0xa4bf8a4abb7fd91971854ac0aade50c61afd9f1a',\n  //     56: '0x9c03326543bf9a927a5ff51c407fbc444f19ca1a',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   harvest: true,\n  //   tokenPerBlock: '49603174603174603',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   isComingSoon: true,\n  // },\n  // Dummy Contract #2\n  // {\n  //   sousId: 5,\n  //   stakingToken: tokens.srkb,\n  //   earningToken: tokens.sfuel,\n  //   contractAddress: {\n  //     97: '0xa4bf8a4abb7fd91971854ac0aade50c61afd9f3a',\n  //     56: '0x9c03326543bf9a927a5ff51c407fbc444f19ca3a',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   harvest: true,\n  //   tokenPerBlock: '49603174603174603',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   isComingSoon: false,\n  // }\n]\n\nexport default pools\n","import { ThunkAction } from 'redux-thunk'\nimport { AnyAction } from '@reduxjs/toolkit'\nimport BigNumber from 'bignumber.js'\nimport { CampaignType, FarmConfig, Nft, PoolConfig, Team, GuildpadConfig } from 'config/constants/types'\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, State, unknown, AnyAction>\n\nexport type TranslatableText =\n  | string\n  | {\n      key: string\n      data?: {\n        [key: string]: string | number\n      }\n    }\n\nexport type SerializedBigNumber = string\n\nexport interface Farm extends FarmConfig {\n  totalDeposits?: string\n  rewardRate?: SerializedBigNumber\n  totalRewardRate?: SerializedBigNumber\n  hasEnded?: boolean\n  remainingDays?: string\n  tokenAmountMc?: SerializedBigNumber\n  quoteTokenAmountMc?: SerializedBigNumber\n  tokenAmountTotal?: SerializedBigNumber\n  quoteTokenAmountTotal?: SerializedBigNumber\n  lpTotalInQuoteToken?: SerializedBigNumber\n  lpTotalSupply?: SerializedBigNumber\n  tokenPriceVsQuote?: SerializedBigNumber\n  poolWeight?: SerializedBigNumber\n  isPromoted?: number\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n}\n\nexport interface Pool extends PoolConfig {\n  totalStaked?: BigNumber\n  stakingLimit?: BigNumber\n  startBlock?: number\n  endBlock?: number\n  apr?: number\n  stakingTokenPrice?: number\n  earningTokenPrice?: number\n  isAutoVault?: boolean\n  userData?: {\n    allowance: BigNumber\n    stakingTokenBalance: BigNumber\n    stakedBalance: BigNumber\n    pendingReward: BigNumber\n  }\n}\n\nexport interface Profile {\n  userId: number\n  points: number\n  teamId: number\n  nftAddress: string\n  tokenId: number\n  isActive: boolean\n  username: string\n  nft?: Nft\n  team: Team\n  hasRegistered: boolean\n}\n\n// Slices states\n\nexport interface FarmsState {\n  data: Farm[]\n  loadArchivedFarmsData: boolean\n  userDataLoaded: boolean\n}\n\nexport interface VaultFees {\n  performanceFee: number\n  callFee: number\n  withdrawalFee: number\n  withdrawalFeePeriod: number\n}\n\nexport interface VaultUser {\n  isLoading: boolean\n  userShares: string\n  cakeAtLastUserAction: string\n  lastDepositedTime: string\n  lastUserActionTime: string\n}\nexport interface CakeVault {\n  totalShares?: string\n  pricePerFullShare?: string\n  totalCakeInVault?: string\n  estimatedCakeBountyReward?: string\n  totalPendingCakeHarvest?: string\n  fees?: VaultFees\n  userData?: VaultUser\n}\n\nexport interface PoolsState {\n  data: Pool[]\n  cakeVault: CakeVault\n  userDataLoaded: boolean\n}\n\nexport interface ProfileState {\n  isInitialized: boolean\n  isLoading: boolean\n  hasRegistered: boolean\n  data: Profile\n}\n\nexport type TeamResponse = {\n  0: string\n  1: string\n  2: string\n  3: string\n  4: boolean\n}\n\nexport type TeamsById = {\n  [key: string]: Team\n}\n\nexport interface TeamsState {\n  isInitialized: boolean\n  isLoading: boolean\n  data: TeamsById\n}\n\nexport interface Achievement {\n  id: string\n  type: CampaignType\n  address: string\n  title: TranslatableText\n  description?: TranslatableText\n  badge: string\n  points: number\n}\n\nexport interface AchievementState {\n  data: Achievement[]\n}\n\n// Block\n\nexport interface BlockState {\n  currentBlock: number\n  initialBlock: number\n}\n\n// Collectibles\n\nexport interface CollectiblesState {\n  isInitialized: boolean\n  isLoading: boolean\n  data: {\n    [key: string]: number[]\n  }\n}\n\n// Predictions\n\nexport enum BetPosition {\n  BULL = 'Bull',\n  BEAR = 'Bear',\n  HOUSE = 'House',\n}\n\nexport enum PredictionStatus {\n  INITIAL = 'initial',\n  LIVE = 'live',\n  PAUSED = 'paused',\n  ERROR = 'error',\n}\n\nexport interface Round {\n  id: string\n  epoch: number\n  failed?: boolean\n  startBlock: number\n  startAt: number\n  lockAt: number\n  lockBlock: number\n  lockPrice: number\n  endBlock: number\n  closePrice: number\n  totalBets: number\n  totalAmount: number\n  bullBets: number\n  bearBets: number\n  bearAmount: number\n  bullAmount: number\n  position: BetPosition\n  bets?: Bet[]\n}\n\nexport interface Market {\n  id: string\n  paused: boolean\n  epoch: number\n}\n\nexport interface Bet {\n  id?: string\n  hash?: string\n  amount: number\n  position: BetPosition\n  claimed: boolean\n  claimedHash: string\n  user?: PredictionUser\n  round: Round\n}\n\nexport interface PredictionUser {\n  id: string\n  address: string\n  block: number\n  totalBets: number\n  totalBNB: number\n}\n\nexport interface RoundData {\n  [key: string]: Round\n}\n\nexport interface HistoryData {\n  [key: string]: Bet[]\n}\n\nexport interface BetData {\n  [key: string]: {\n    [key: string]: Bet\n  }\n}\n\nexport enum HistoryFilter {\n  ALL = 'all',\n  COLLECTED = 'collected',\n  UNCOLLECTED = 'uncollected',\n}\n\nexport interface PredictionsState {\n  status: PredictionStatus\n  isLoading: boolean\n  isHistoryPaneOpen: boolean\n  isChartPaneOpen: boolean\n  isFetchingHistory: boolean\n  historyFilter: HistoryFilter\n  currentEpoch: number\n  currentRoundStartBlockNumber: number\n  intervalBlocks: number\n  bufferBlocks: number\n  minBetAmount: string\n  lastOraclePrice: string\n  rounds: RoundData\n  history: HistoryData\n  bets: BetData\n}\n\nexport interface Guildpad extends GuildpadConfig {\n  userData?: {\n    boxesBought: string\n    isWhitelisted?: boolean\n  }\n}\n\nexport interface GuildpadState {\n  selected?: Guildpad | null;\n  data: Guildpad[];\n  userDataLoaded: boolean\n}\n\n// Global state\n\nexport interface State {\n  achievements: AchievementState\n  block: BlockState\n  farms: FarmsState\n  guildpads: GuildpadState\n  pools: PoolsState\n  predictions: PredictionsState\n  profile: ProfileState\n  teams: TeamsState\n  collectibles: CollectiblesState\n}\n","import BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from 'utils/multicall'\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getSouschefV2Contract } from 'utils/contractHelpers'\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStaking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'totalDeposit',\n      params: [],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(sousChefV2, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\n  try {\n    const sousContract = getSouschefV2Contract(sousId)\n    const stakingLimit = await sousContract.methods.poolLimitPerUser().call()\n    return new BigNumber(stakingLimit)\n  } catch (error) {\n    return BIG_ZERO\n  }\n}\n\nexport const fetchPoolsStakingLimits = async (\n  poolsWithStakingLimit: number[],\n): Promise<{ [key: string]: BigNumber }> => {\n  const validPools = poolsConfig\n    .filter((p) => p.stakingToken.symbol !== 'BNB' && !p.isFinished)\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\n\n  // Get the staking limit for each valid pool\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\n  const stakingLimits = await Promise.all(stakingLimitPromises)\n\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\n    return {\n      ...accum,\n      [validPools[index].sousId]: stakingLimit,\n    }\n  }, {})\n}\n","import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport multicall from 'utils/multicall'\nimport { getMasterchefContract } from 'utils/contractHelpers'\nimport { getAddress } from 'utils/addressHelpers'\nimport web3NoAccount from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst masterChefContract = getMasterchefContract()\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'allowance',\n    params: [account, getAddress(p.contractAddress)],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3NoAccount.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingCake('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = [\n      'getPricePerFullShare',\n      'totalShares',\n      'calculateHarvestCakeRewards',\n      'calculateTotalPendingCakeRewards',\n    ].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\n      cakeVaultAbi,\n      calls,\n    )\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\n\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n","import BigNumber from 'bignumber.js'\nimport { getCakeVaultContract } from 'utils/contractHelpers'\n\nconst cakeVaultContract = getCakeVaultContract()\n\nconst fetchVaultUser = async (account: string) => {\n  try {\n    const userContractResponse = await cakeVaultContract.methods.userInfo(account).call()\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime as string,\n      lastUserActionTime: userContractResponse.lastUserActionTime as string,\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n    }\n  }\n}\n\nexport default fetchVaultUser\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PoolsState, Pool, CakeVault, VaultFees, VaultUser, AppThunk } from 'state/types'\nimport { getPoolApr } from 'utils/apr'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\nimport fetchVaultUser from './fetchVaultUser'\nimport { getTokenPricesFromFarm } from './helpers'\n\nconst initialState: PoolsState = {\n  data: [...poolsConfig],\n  userDataLoaded: false,\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n    },\n  },\n}\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = (currentBlock: number) => async (dispatch, getState) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStaking()\n\n  const prices = getTokenPricesFromFarm(getState().farms.data)\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\n\n    const stakingTokenAddress = pool.stakingToken.address ? getAddress(pool.stakingToken.address).toLowerCase() : null\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\n\n    const earningTokenAddress = pool.earningToken.address ? getAddress(pool.earningToken.address).toLowerCase() : null\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\n    const apr = !isPoolFinished\n      ? getPoolApr(\n          stakingTokenPrice,\n          earningTokenPrice,\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\n          parseFloat(pool.tokenPerBlock),\n        )\n      : 0\n\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      stakingTokenPrice,\n      earningTokenPrice,\n      apr,\n      isFinished: isPoolFinished,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState()\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\n    .map((pool) => pool.sousId)\n\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\n\n  const stakingLimitData = poolsConfig.map((pool) => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return { sousId: pool.sousId }\n    }\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON(),\n    }\n  })\n\n  dispatch(setPoolsPublicData(stakingLimitData))\n}\n\nexport const fetchPoolsUserDataAsync =\n  (account: string): AppThunk =>\n  async (dispatch) => {\n    const allowances = await fetchPoolsAllowance(account)\n    const stakingTokenBalances = await fetchUserBalances(account)\n    const stakedBalances = await fetchUserStakeBalances(account)\n    const pendingRewards = await fetchUserPendingRewards(account)\n\n    const userData = poolsConfig.map((pool) => ({\n      sousId: pool.sousId,\n      allowance: allowances[pool.sousId],\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\n      stakedBalance: stakedBalances[pool.sousId],\n      pendingReward: pendingRewards[pool.sousId],\n    }))\n\n    dispatch(setPoolsUserData(userData))\n  }\n\nexport const updateUserAllowance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const allowances = await fetchPoolsAllowance(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n  }\n\nexport const updateUserBalance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const tokenBalances = await fetchUserBalances(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n  }\n\nexport const updateUserStakedBalance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const stakedBalances = await fetchUserStakeBalances(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n  }\n\nexport const updateUserPendingReward =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const pendingRewards = await fetchUserPendingRewards(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n  }\n\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\n  const publicVaultInfo = await fetchPublicVaultData()\n  return publicVaultInfo\n})\n\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees()\n  return vaultFees\n})\n\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\n  'cakeVault/fetchUser',\n  async ({ account }) => {\n    const userData = await fetchVaultUser(account)\n    return userData\n  },\n)\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n      state.userDataLoaded = true\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\n    })\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\n      const fees = action.payload\n      state.cakeVault = { ...state.cakeVault, fees }\n    })\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\n      const userData = action.payload\n      userData.isLoading = false\n      state.cakeVault = { ...state.cakeVault, userData }\n    })\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\nexport default PoolsSlice.reducer\n","import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\nimport { Bet, BetPosition, Market, PredictionStatus, Round, RoundData } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport { getPredictionsAddress } from 'utils/addressHelpers'\nimport {\n  BetResponse,\n  getRoundBaseFields,\n  getBetBaseFields,\n  getUserBaseFields,\n  RoundResponse,\n  MarketResponse,\n  TotalWonMarketResponse,\n  TotalWonRoundResponse,\n} from './queries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  LIVE = 'live',\n}\n\nexport const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): RoundResponse => {\n  return {\n    id: epoch.toString(),\n    epoch: epoch.toString(),\n    startBlock: startBlock.toString(),\n    failed: null,\n    startAt: null,\n    lockAt: null,\n    lockBlock: null,\n    lockPrice: null,\n    endBlock: null,\n    closePrice: null,\n    totalBets: '0',\n    totalAmount: '0',\n    bearBets: '0',\n    bullBets: '0',\n    bearAmount: '0',\n    bullAmount: '0',\n    position: null,\n    bets: [],\n  }\n}\n\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedHash: betResponse.claimedHash,\n    user: {\n      id: betResponse.user.id,\n      address: betResponse.user.address,\n      block: numberOrNull(betResponse.user.block),\n      totalBets: numberOrNull(betResponse.user.totalBets),\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\n    },\n  } as Bet\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponse(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    startBlock,\n    startAt,\n    lockAt,\n    lockBlock,\n    lockPrice,\n    endBlock,\n    closePrice,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bearBets,\n    bearAmount,\n    bullAmount,\n    position,\n    bets = [],\n  } = roundResponse\n\n  const getRoundPosition = (positionResponse: string) => {\n    if (positionResponse === 'Bull') {\n      return BetPosition.BULL\n    }\n\n    if (positionResponse === 'Bear') {\n      return BetPosition.BEAR\n    }\n\n    return null\n  }\n\n  return {\n    id,\n    failed,\n    epoch: numberOrNull(epoch),\n    startBlock: numberOrNull(startBlock),\n    startAt: numberOrNull(startAt),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\n    endBlock: numberOrNull(endBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : null,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bearBets: numberOrNull(bearBets),\n    bearAmount: numberOrNull(bearAmount),\n    bullAmount: numberOrNull(bullAmount),\n    position: getRoundPosition(position),\n    bets: bets.map(transformBetResponse),\n  }\n}\n\nexport const transformMarketResponse = (marketResponse: MarketResponse): Market => {\n  return {\n    id: marketResponse.id,\n    paused: marketResponse.paused,\n    epoch: Number(marketResponse.epoch.epoch),\n  }\n}\n\nexport const transformTotalWonResponse = (\n  marketResponse: TotalWonMarketResponse,\n  roundResponse: TotalWonRoundResponse[],\n): number => {\n  const houseRounds = roundResponse.reduce((accum, round) => {\n    return accum + (round.totalAmount ? parseFloat(round.totalAmount) : 0)\n  }, 0)\n\n  const totalBNB = marketResponse.totalBNB ? parseFloat(marketResponse.totalBNB) : 0\n  const totalBNBTreasury = marketResponse.totalBNBTreasury ? parseFloat(marketResponse.totalBNBTreasury) : 0\n\n  return Math.max(totalBNB - (totalBNBTreasury + houseRounds), 0)\n}\n\nexport const makeRoundData = (rounds: Round[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.id]: round,\n    }\n  }, {})\n}\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\n/**\n * Given a bet object, check if it is eligible to be claimed or refunded\n */\nexport const getCanClaim = (bet: Bet) => {\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n}\n\n/**\n * Returns only bets where the user has won.\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\n */\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\n  return bets.filter(getCanClaim)\n}\n\n/**\n * Gets static data from the contract\n */\nexport const getStaticPredictionsData = async () => {\n  const calls = ['currentEpoch', 'intervalBlocks', 'minBetAmount', 'paused', 'bufferBlocks'].map((method) => ({\n    address: getPredictionsAddress(),\n    name: method,\n  }))\n  const [[currentEpoch], [intervalBlocks], [minBetAmount], [isPaused], [bufferBlocks]] = await multicallv2(\n    predictionsAbi,\n    calls,\n  )\n\n  return {\n    status: isPaused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: currentEpoch.toNumber(),\n    intervalBlocks: intervalBlocks.toNumber(),\n    bufferBlocks: bufferBlocks.toNumber(),\n    minBetAmount: minBetAmount.toNumber(),\n  }\n}\n\nexport const getMarketData = async (): Promise<{\n  rounds: Round[]\n  market: Market\n}> => {\n  const response = (await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getMarketData {\n        rounds(first: 5, orderBy: epoch, orderDirection: desc) {\n          ${getRoundBaseFields()}\n        }\n        market(id: 1) {\n          id\n          paused\n          epoch {\n            epoch\n          }\n        }\n      }\n    `,\n  )) as { rounds: RoundResponse[]; market: MarketResponse }\n\n  return {\n    rounds: response.rounds.map(transformRoundResponse),\n    market: transformMarketResponse(response.market),\n  }\n}\n\nexport const getTotalWon = async (): Promise<number> => {\n  const response = (await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getTotalWonData($position: String) {\n        market(id: 1) {\n          totalBNB\n          totalBNBTreasury\n        }\n        rounds(where: { position: $position }) {\n          totalAmount\n        }\n      }\n    `,\n    { position: BetPosition.HOUSE },\n  )) as { market: TotalWonMarketResponse; rounds: TotalWonRoundResponse[] }\n\n  return transformTotalWonResponse(response.market, response.rounds)\n}\n\nexport const getRound = async (id: string) => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getRound($id: ID!) {\n        round(id: $id) {\n          ${getRoundBaseFields()}\n          bets {\n           ${getBetBaseFields()}\n            user {\n             ${getUserBaseFields()}\n            }\n          }\n        }\n      }\n  `,\n    { id },\n  )\n  return response.round\n}\n\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: BetHistoryWhereClause = {},\n  first = 1000,\n  skip = 0,\n): Promise<BetResponse[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getBet = async (betId: string): Promise<BetResponse> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBet($id: ID!) {\n        bet(id: $id) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n  `,\n    {\n      id: betId.toLowerCase(),\n    },\n  )\n  return response.bet\n}\n","export interface UserResponse {\n  id: string\n  address: string\n  block: string\n  totalBets: string\n  totalBNB: string\n  bets?: BetResponse[]\n}\n\nexport interface BetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  claimedHash: string\n  user?: UserResponse\n  round?: RoundResponse\n}\n\nexport interface HistoricalBetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  user?: UserResponse\n  round: {\n    id: string\n    epoch: string\n  }\n}\n\nexport interface RoundResponse {\n  id: string\n  epoch: string\n  failed: boolean\n  startBlock: string\n  startAt: string\n  lockAt: string\n  lockBlock: string\n  lockPrice: string\n  endBlock: string\n  closePrice: string\n  totalBets: string\n  totalAmount: string\n  bearBets: string\n  bullBets: string\n  bearAmount: string\n  bullAmount: string\n  position: string\n  bets: BetResponse[]\n}\n\nexport interface MarketResponse {\n  id: string\n  paused: boolean\n  epoch: {\n    epoch: string\n  }\n}\n\nexport interface TotalWonMarketResponse {\n  totalBNB: string\n  totalBNBTreasury: string\n}\n\nexport interface TotalWonRoundResponse {\n  totalAmount: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const getRoundBaseFields = () => `\n  id\n  epoch\n  failed\n  startAt\n  startBlock\n  lockAt\n  lockBlock\n  lockPrice\n  endAt\n  endBlock\n  closePrice\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n  position\n`\n\nexport const getBetBaseFields = () => `\n  id\n  hash  \n  amount\n  position\n  claimed\n  claimedHash\n`\n\nexport const getUserBaseFields = () => `\n  id\n  address\n  block\n  totalBets\n  totalBNB\n`\n","import { Language } from '@pancakeswap/uikit'\n\nexport const AR: Language = { locale: 'ar-SA', language: 'العربية', code: 'ar' }\nexport const BN: Language = { locale: 'bn-BD', language: 'বাংলা', code: 'bn' }\nexport const EN: Language = { locale: 'en-US', language: 'English', code: 'en' }\nexport const DE: Language = { locale: 'de-DE', language: 'Deutsch', code: 'de' }\nexport const EL: Language = { locale: 'el-GR', language: 'Ελληνικά', code: 'el' }\nexport const ESES: Language = { locale: 'es-ES', language: 'Español', code: 'es-ES' }\nexport const FI: Language = { locale: 'fi-FI', language: 'Suomalainen', code: 'fi' }\nexport const FIL: Language = { locale: 'fil-PH', language: 'Filipino', code: 'fil' }\nexport const FR: Language = { locale: 'fr-FR', language: 'Français', code: 'fr' }\nexport const HI: Language = { locale: 'hi-IN', language: 'हिंदी', code: 'hi' }\nexport const HU: Language = { locale: 'hu-HU', language: 'Magyar', code: 'hu' }\nexport const ID: Language = { locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' }\nexport const IT: Language = { locale: 'it-IT', language: 'Italiano', code: 'it' }\nexport const JA: Language = { locale: 'ja-JP', language: '日本語', code: 'ja' }\nexport const KO: Language = { locale: 'ko-KR', language: '한국어', code: 'ko' }\nexport const NL: Language = { locale: 'nl-NL', language: 'Nederlands', code: 'nl' }\nexport const PL: Language = { locale: 'pl-PL', language: 'Polski', code: 'pl' }\nexport const PTBR: Language = { locale: 'pt-BR', language: 'Português (Brazil)', code: 'pt-br' }\nexport const PTPT: Language = { locale: 'pt-PT', language: 'Português', code: 'pt-pt' }\nexport const RO: Language = { locale: 'ro-RO', language: 'Română', code: 'ro' }\nexport const RU: Language = { locale: 'ru-RU', language: 'Русский', code: 'ru' }\nexport const SVSE: Language = { locale: 'sv-SE', language: 'Svenska', code: 'sv' }\nexport const TA: Language = { locale: 'ta-IN', language: 'தமிழ்', code: 'ta' }\nexport const TR: Language = { locale: 'tr-TR', language: 'Türkçe', code: 'tr' }\nexport const UK: Language = { locale: 'uk-UA', language: 'Українська', code: 'uk' }\nexport const VI: Language = { locale: 'vi-VN', language: 'Tiếng Việt', code: 'vi' }\nexport const ZHCN: Language = { locale: 'zh-CN', language: '简体中文', code: 'zh-cn' }\nexport const ZHTW: Language = { locale: 'zh-TW', language: '繁體中文', code: 'zh-tw' }\n\nexport const languages = {\n  'ar-SA': AR,\n  'bn-BD': BN,\n  'en-US': EN,\n  'de-DE': DE,\n  'el-GR': EL,\n  'es-ES': ESES,\n  'fi-FI': FI,\n  'fil-PH': FIL,\n  'fr-FR': FR,\n  'hi-IN': HI,\n  'hu-HU': HU,\n  'id-ID': ID,\n  'it-IT': IT,\n  'ja-JP': JA,\n  'ko-KR': KO,\n  'nl-NL': NL,\n  'pl-PL': PL,\n  'pt-BR': PTBR,\n  'pt-PT': PTPT,\n  'ro-RO': RO,\n  'ru-RU': RU,\n  'sv-SE': SVSE,\n  'ta-IN': TA,\n  'tr-TR': TR,\n  'uk-UA': UK,\n  'vi-VN': VI,\n  'zh-CN': ZHCN,\n  'zh-TW': ZHTW,\n}\n\nexport const languageList = Object.values(languages)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { ARCHIVED_NODE } from 'config/constants/endpoints'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\n\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\nconst web3NoAccount = new Web3(httpProvider)\n\nconst archivedHttpProvider = new Web3.providers.HttpProvider(ARCHIVED_NODE, { timeout: 10000 } as HttpProviderOptions)\nexport const web3WithArchivedNodeProvider = new Web3(archivedHttpProvider)\n\nexport default web3NoAccount\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport teamsList from 'config/constants/teams'\nimport { Team } from 'config/constants/types'\nimport { TeamsById, TeamsState } from '../types'\nimport { getTeam, getTeams } from './helpers'\n\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\n  return {\n    ...accum,\n    [team.id]: team,\n  }\n}, {})\n\nconst initialState: TeamsState = {\n  isInitialized: false,\n  isLoading: true,\n  data: teamsById,\n}\n\nexport const teamsSlice = createSlice({\n  name: 'teams',\n  initialState,\n  reducers: {\n    fetchStart: (state) => {\n      state.isLoading = true\n    },\n    fetchFailed: (state) => {\n      state.isLoading = false\n      state.isInitialized = true\n    },\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\n      state.isInitialized = true\n      state.isLoading = false\n      state.data[action.payload.id] = action.payload\n    },\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\n      state.isInitialized = true\n      state.isLoading = false\n      state.data = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\n\n// Thunks\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\n  try {\n    dispatch(fetchStart())\n    const team = await getTeam(teamId)\n    dispatch(teamFetchSucceeded(team))\n  } catch (error) {\n    dispatch(fetchFailed())\n  }\n}\n\nexport const fetchTeams = () => async (dispatch) => {\n  try {\n    dispatch(fetchStart())\n    const teams = await getTeams()\n    dispatch(teamsFetchSucceeded(teams))\n  } catch (error) {\n    dispatch(fetchFailed())\n  }\n}\n\nexport default teamsSlice.reducer\n","import { Profile } from 'state/types'\n\nexport type ProfileResponse = {\n  0: string\n  1: string\n  2: string\n  3: string\n  4: string\n  5: boolean\n}\n\nexport const transformProfileResponse = (profileResponse: ProfileResponse): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: nftAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: Number(userId),\n    points: Number(numberPoints),\n    teamId: Number(teamId),\n    tokenId: Number(tokenId),\n    nftAddress,\n    isActive,\n  }\n}\n","import Cookies from 'js-cookie'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { getNftByTokenId } from 'utils/collectibles'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      nft = await getNftByTokenId(nftAddress, tokenId)\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ProfileState } from 'state/types'\nimport type { AppDispatch } from 'state'\nimport getProfile, { GetProfileResponse } from './getProfile'\n\nconst initialState: ProfileState = {\n  isInitialized: false,\n  isLoading: true,\n  hasRegistered: false,\n  data: null,\n}\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    profileFetchStart: (state) => {\n      state.isLoading = true\n    },\n    profileFetchSucceeded: (_state, action: PayloadAction<GetProfileResponse>) => {\n      const { profile, hasRegistered } = action.payload\n\n      return {\n        isInitialized: true,\n        isLoading: false,\n        hasRegistered,\n        data: profile,\n      }\n    },\n    profileFetchFailed: (state) => {\n      state.isLoading = false\n      state.isInitialized = true\n    },\n    profileClear: () => ({\n      ...initialState,\n      isLoading: false,\n    }),\n    addPoints: (state, action: PayloadAction<number>) => {\n      state.data.points += action.payload\n    },\n  },\n})\n\n// Actions\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, profileClear, addPoints } =\n  profileSlice.actions\n\n// Thunks\n// TODO: this should be an AsyncThunk\nexport const fetchProfile = (address: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(profileFetchStart())\n    const response = await getProfile(address)\n    dispatch(profileFetchSucceeded(response))\n  } catch (error) {\n    dispatch(profileFetchFailed())\n  }\n}\n\nexport default profileSlice.reducer\n","import { useEffect } from 'react'\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\n\nconst _binanceChainListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'BinanceChain', {\n      get() {\n        return this.bsc\n      },\n      set(bsc) {\n        this.bsc = bsc\n\n        resolve()\n      },\n    }),\n  )\n\nconst useEagerConnect = () => {\n  const { login } = useAuth()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n\n        return\n      }\n\n      login(connectorId)\n    }\n  }, [login])\n}\n\nexport default useEagerConnect\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\n\nexport function RedirectToFarms({ location }: RouteComponentProps){\n    return <Redirect to={{...location, pathname: '/farms'}} />\n}\n\nexport function RedirectToPools({ location }: RouteComponentProps){\n    return <Redirect to={{...location, pathname: '/liquidity'}} />\n}","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { SparkSwapTheme } from '@metagg/mgg-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends SparkSwapTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","import { MenuEntry } from '@sparkpointio/sparkswap-uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: \"Staking\",\n    icon: \"\",\n    // href: \"/farms\"\n    items: [\n      {\n        label: 'Liquidity',\n        href: '/farms'\n      },\n      {\n        label: 'Pool-Based',\n        href: '/pools'\n      }\n    ]\n  },\n  {\n    label: \"GameFi Vault\",\n    icon: \"\",\n    href: \"/gamefi\",\n  },\n  {\n    label: \"Launchpad\",\n    icon: \"\",\n    href: \"/launchpad\",\n  },\n  {\n    label: \"Earning Dashboard\",\n    icon: \"\",\n    href: \"/earning-dashboard\",\n  },\n  {\n    label: \"Bridge\",\n    icon: \"\",\n    href: \"https://app.chainport.io\",\n  },\n/*\n  {\n    label: \"Swap\",\n    icon: \"TradeIcon\",\n    href: \"https://sparkswap.finance/#/swap\",\n  },\n  {\n    label: \"Staking\",\n    icon: \"FarmIcon\",\n    items: [\n      {\n        label: \"Farms\",\n        href: \"/farms\",\n      },\n      {\n        label: \"Pools\",\n        href: \"/pools\",\n      },\n      {\n        label: \"Old Farms/Pools\",\n        href: \"https://app.srk.finance/#/stake\",\n      },\n    ],\n  },\n  {\n    label: \"Farm\",\n    icon: \"FarmIcon\",\n    href: \"https://app.srk.finance/#/stake\",\n  },\n  {\n    label: \"Pool\",\n    icon: \"PoolIcon\",\n    href: \"/pools\",\n  },\n  \n  {\n    label: \"Launch\",\n    icon: \"LaunchIcon\",\n    href: \"https://launch.sparkswap.finance/#/\",\n  },\n  {\n    label: \"Info\",\n    icon: \"InfoIcon\",\n    href: \"https://sparkswap.info/#/home\",\n  },\n  {\n    label: \"Airdrop\",\n    icon: \"AirdropIcon\",\n    href: \"https://app.srk.finance/#/airdrop\",\n  },\n  {\n    label: \"Teams\",\n    icon: \"GroupsIcon\",\n    href: \"https://srk.finance/team\",\n  },\n  {\n    label: \"Help\",\n    icon: \"MoreIcon\",\n    href: \"https://medium.com/theecosystem/a-beginners-guide-to-sparkswap-79f92a2f7074\"\n  }\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    initialOpenState: true,\n    items: [\n      {\n        label: 'Exchange',\n        href: '/swap'\n      },\n      {\n        label: 'Liquidity',\n        href: '/pool'\n      }\n    ]\n  },\n \n  {\n    label: \"Info\",\n    icon: \"InfoIcon\",\n    items: [\n      {\n        label: \"Overview\",\n        href: \"https://coinmarketcap.com/currencies/sparkpoint/\",\n      },\n      {\n        label: \"Trade SRK\",\n        href: \"https://srk.sh/trade\",\n      },\n    ],\n  },\n  {\n    label: \"More\",\n    icon: \"MoreIcon\",\n    items: [\n      {\n        label: \"SparkDeFi\",\n        href: \"https://srk.finance/\",\n      },\n      {\n        label: \"SparkPoint\",\n        href: \"https://sparkpoint.io/\",\n      },\n      {\n        label: \"Github\",\n        href: \"https://github.com/sparkpointio\",\n      },\n      {\n        label: \"White Paper\",\n        href: \"https://github.com/sparkpointio/sparkdefi-whitepaper/blob/main/WHITEPAPER.md\",\n      },\n      {\n        label: \"Blog\",\n        href: \"https://medium.com/theecosystem\",\n      },\n    ],\n  },\n  */\n]\n\nexport default config\n","import React from 'react'\nimport { Menu as UikitMenu } from '@metagg/mgg-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { languageList } from 'config/localization/languages'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useAuth from 'hooks/useAuth'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account } = useWeb3React()\n  const { login, logout } = useAuth()\n  const { isDark, toggleTheme } = useTheme()\n  const { currentLanguage, setLanguage } = useTranslation()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={login}\n      logout={logout}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={currentLanguage.code}\n      langs={languageList}\n      setLang={setLanguage}\n      links={config}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React, { Suspense, SuspenseProps } from 'react'\n\ninterface State {\n  hasError: boolean\n}\n\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n\n  componentDidCatch(error) {\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\n\n    // Save a flag on the window object indicating that we have already had a chunk error.\n    // This prevents infinite reloads\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\n\n    // If was a chunk load error, refresh the page\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\n      window.history.replaceState(nextState, '')\n      window.location.reload()\n      return\n    }\n\n    throw error\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { fallback } = this.props\n\n    if (hasError) {\n      return fallback\n    }\n\n    return <Suspense {...this.props} />\n  }\n}\n\nexport default SuspenseWithChunkError\n","import React from 'react'\nimport { ToastContainer } from '@pancakeswap/uikit'\nimport useToast from 'hooks/useToast'\n\nconst ToastListener = () => {\n  const { toasts, remove } = useToast()\n\n  const handleRemove = (id: string) => remove(id)\n\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\n}\n\nexport default ToastListener\n","import React from 'react'\nimport styled from 'styled-components'\nimport {Spinner}  from '@metagg/mgg-uikit';\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner/>\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useState, useCallback } from 'react'\nimport { FallingBunnies, FallingBunniesProps, useKonamiCheatCode } from '@pancakeswap/uikit'\n\nconst EasterEgg: React.FC<FallingBunniesProps> = (props) => {\n  const [show, setShow] = useState(false)\n  const startFalling = useCallback(() => setShow(true), [setShow])\n  useKonamiCheatCode(startFalling)\n\n  if (show) {\n    return (\n      <div onAnimationEnd={() => setShow(false)}>\n        <FallingBunnies {...props} />\n      </div>\n    )\n  }\n  return null\n}\n\nexport default React.memo(EasterEgg)\n","import React, { lazy } from 'react'\nimport { HashRouter, Redirect, Route, Switch, Link } from 'react-router-dom'\nimport { ResetCSS,  } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport useEagerConnect from 'hooks/useEagerConnect'\nimport { useFetchProfile, usePollBlockNumber, usePollCoreFarmData } from 'state/hooks'\nimport { RedirectToFarms, RedirectToPools } from 'views/Farms/Redirects'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\nimport ToastListener from './components/ToastListener'\nimport PageLoader from './components/PageLoader'\nimport EasterEgg from './components/EasterEgg'\n// import Pools from './views/Pools'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page\n// const Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Pools = lazy(() => import('./views/Pools'))\nconst ComingSoon = lazy(() => import('./views/ComingSoon'))\nconst Guildpad = lazy(() => import('./views/GuildPad'))\nconst Lottery = lazy(() => import('./views/Lottery'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Pad = lazy(() => import('./views/GuildPad/Pad'))\n// const Collectibles = lazy(() => import('./views/Collectibles'))\n// const Teams = lazy(() => import('./views/Teams'))\n// const Team = lazy(() => import('./views/Teams/Team'))\n// const Profile = lazy(() => import('./views/Profile'))\n// const TradingCompetition = lazy(() => import('./views/TradingCompetition'))\n// const Predictions = lazy(() => import('./views/Predictions'))\n\n// This config is required for number formatting\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst ExternalRedirect = ({ to, ...routeProps }) => {\n  return <Redirect to={to} />;\n};\n\nconst App: React.FC = () => {\n  usePollBlockNumber()\n  useEagerConnect()\n  useFetchProfile()\n  usePollCoreFarmData()\n\n  return (\n    <HashRouter>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <SuspenseWithChunkError fallback={<PageLoader />}>\n          <Switch>\n            <Route path='/farms'>\n              <Farms />\n            </Route>\n            <Route path='/pools' exact>\n              <Pools />\n              {/* <ComingSoon title=\"Pools\" /> */}\n            </Route>\n            <Route path='/gamefi' exact>\n              <ComingSoon title=\"GameFi Vaults\" />\n            </Route>\n            <Route path='/launchpad' exact>\n              {/* <ComingSoon title=\"Launchpad\" /> */}\n              <Guildpad />\n            </Route>\n            <Route path='/launchpad/:guildpadTitle' component={Pad}/>\n            <Route path='/earning-dashboard' exact>\n              <ComingSoon title=\"Earning Dashboard\" />\n            </Route>\n            <Route path='/staking'>\n              <Redirect to='/farms' />\n            </Route>\n            <Route path='/' component={RedirectToFarms} />\n            {/* 404 */}\n            <Route component={NotFound} />\n            {/* External link for redirect */}\n            <ExternalRedirect exact path=\"/apply\" to=\"https://www.google.com\" />\n          </Switch>\n        </SuspenseWithChunkError>\n      </Menu>\n      <EasterEgg iterations={2} />\n      <ToastListener />\n    </HashRouter>\n  )\n}\n\nexport default React.memo(App)\n","import React from 'react'\nimport { ModalProvider } from '@metagg/mgg-uikit'\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { HelmetProvider } from 'react-helmet-async'\nimport { Provider } from 'react-redux'\nimport { getLibrary } from 'utils/web3React'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { LanguageProvider } from 'contexts/Localization'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport { ToastsProvider } from 'contexts/ToastsContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Provider store={store}>\n        <ToastsProvider>\n          <HelmetProvider>\n            <ThemeContextProvider>\n              <LanguageProvider>\n                <RefreshContextProvider>\n                  <ModalProvider>{children}</ModalProvider>\n                </RefreshContextProvider>\n              </LanguageProvider>\n            </ThemeContextProvider>\n          </HelmetProvider>\n        </ToastsProvider>\n      </Provider>\n    </Web3ReactProvider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\nexport const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\nexport const ARCHIVED_NODE = process.env.REACT_APP_ARCHIVED_NODE\n","import { Nft, NftSource, NftType } from './types'\n\nexport const IPFS_GATEWAY = 'https://gateway.pinata.cloud'\n\nexport const nftSources: NftSource = {\n  [NftType.PANCAKE]: {\n    address: {\n      56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\n      97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\n    },\n    identifierKey: 'image',\n  },\n  [NftType.MIXIE]: {\n    address: {\n      56: '0xa251b5EAa9E67F2Bc8b33F33e20E91552Bf85566',\n      97: '',\n    },\n    identifierKey: 'image',\n  },\n}\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Mixie v1',\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\n    images: {\n      lg: 'mixie-1-lg.png',\n      md: 'mixie-1-md.png',\n      sm: 'mixie-1-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/001-Chef-Mixie.png',\n    },\n    sortOrder: 999,\n    identifier: '001-Chef-Mixie',\n    type: NftType.MIXIE,\n    variationId: 1,\n  },\n  {\n    name: 'Mixie v2',\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\n    images: {\n      lg: 'mixie-2-lg.png',\n      md: 'mixie-2-md.png',\n      sm: 'mixie-2-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/002-Chef-Mixie.png',\n    },\n    sortOrder: 999,\n    identifier: '002-Chef-Mixie',\n    type: NftType.MIXIE,\n    variationId: 2,\n  },\n  {\n    name: 'Mixie v3',\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\n    images: {\n      lg: 'mixie-3-lg.png',\n      md: 'mixie-3-md.png',\n      sm: 'mixie-3-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/003-Chef-Mixie.png',\n    },\n    sortOrder: 999,\n    identifier: '003-Chef-Mixie',\n    type: NftType.MIXIE,\n    variationId: 3,\n  },\n  {\n    name: 'Easter ‘21 Champions',\n    description: 'Eggscellent! Celebrating Syrup Storm winning the Easter Battle!',\n    images: {\n      lg: 'easter-champion-storm-lg.png',\n      md: 'easter-champion-storm-md.png',\n      sm: 'easter-champion-storm-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.png',\n    },\n    video: {\n      webm: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.webm',\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.mp4',\n    },\n    sortOrder: 999,\n    identifier: 'easter-champion-storm',\n    type: NftType.PANCAKE,\n    variationId: 15,\n  },\n  {\n    name: \"Cakeston Easter '21\",\n    description: 'Melting Easter eggs and melting hearts!',\n    images: {\n      lg: 'cakeston-easter-21-lg.png',\n      md: 'cakeston-easter-21-md.png',\n      sm: 'cakeston-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-caker.png',\n    },\n    sortOrder: 999,\n    identifier: 'easter-caker',\n    type: NftType.PANCAKE,\n    variationId: 15,\n  },\n  {\n    name: \"Flipsie Easter '21\",\n    description: 'Watch out for Flipsie’s spatula smash!',\n    images: {\n      lg: 'flipsie-easter-21-lg.png',\n      md: 'flipsie-easter-21-md.png',\n      sm: 'flipsie-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-flipper.png',\n    },\n    sortOrder: 999,\n    identifier: 'easter-flipper',\n    type: NftType.PANCAKE,\n    variationId: 14,\n  },\n  {\n    name: \"Stormy Easter '21\",\n    description: 'Do you like chocolate with your syrup? Go long!',\n    images: {\n      lg: 'stormy-easter-21-lg.png',\n      md: 'stormy-easter-21-md.png',\n      sm: 'stormy-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-storm.png',\n    },\n    sortOrder: 999,\n    identifier: 'easter-storm',\n    type: NftType.PANCAKE,\n    variationId: 12,\n  },\n  {\n    name: 'Bullish',\n    description: 'Happy Niu Year! This bunny’s excited for the year of the bull (market!)',\n    images: {\n      lg: 'bullish-lg.png',\n      md: 'bullish-md.png',\n      sm: 'bullish-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.png',\n    },\n    video: {\n      webm: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.webm',\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.mp4',\n    },\n    sortOrder: 999,\n    identifier: 'bullish',\n    type: NftType.PANCAKE,\n    variationId: 11,\n  },\n  {\n    name: 'Hiccup',\n    description: \"Oopsie daisy! Hiccup's had a bit of an accident. Poor little fella.\",\n    images: {\n      lg: 'hiccup-lg.png',\n      md: 'hiccup-md.png',\n      sm: 'hiccup-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQ6EE6gkVzAQUdQLLM7CyrnME6LZHCoy92ZERW8HXmyjw/hiccup.png',\n    },\n    sortOrder: 999,\n    identifier: 'hiccup',\n    type: NftType.PANCAKE,\n    variationId: 10,\n  },\n  {\n    name: 'Sleepy',\n    description: 'Aww, looks like eating pancakes all day is tough work. Sweet dreams!',\n    images: {\n      lg: 'sleepy-lg.png',\n      md: 'sleepy-md.png',\n      sm: 'sleepy-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sleepy.png',\n      blur: 'sleepy-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'sleepy',\n    type: NftType.PANCAKE,\n    variationId: 5,\n  },\n  {\n    name: 'Sunny',\n    description: 'Sunny is always cheerful when there are pancakes around. Smile!',\n    images: {\n      lg: 'sunny-lg.png',\n      md: 'sunny-md.png',\n      sm: 'sunny-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sunny.png',\n      blur: 'sunny-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'sunny',\n    type: NftType.PANCAKE,\n    variationId: 9,\n  },\n  {\n    name: 'Churro',\n    description: \"Don't let that dopey smile deceive you... Churro's a master CAKE chef!\",\n    images: {\n      lg: 'churro-lg.png',\n      md: 'churro-md.png',\n      sm: 'churro-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/churro.png',\n      blur: 'churro-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'churro',\n    type: NftType.PANCAKE,\n    variationId: 8,\n  },\n  {\n    name: 'Dollop',\n    description: \"Nommm... Oh hi, I'm just meditating on the meaning of CAKE.\",\n    images: {\n      lg: 'dollop-lg.png',\n      md: 'dollop-md.png',\n      sm: 'dollop-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/dollop.png',\n      blur: 'dollop-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'dollop',\n    type: NftType.PANCAKE,\n    variationId: 6,\n  },\n  {\n    name: 'Twinkle',\n    description: \"Three guesses what's put that twinkle in those eyes! (Hint: it's CAKE)\",\n    images: {\n      lg: 'twinkle-lg.png',\n      md: 'twinkle-md.png',\n      sm: 'twinkle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/twinkle.png',\n      blur: 'twinkle-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'twinkle',\n    type: NftType.PANCAKE,\n    variationId: 7,\n  },\n  {\n    name: 'Swapsies',\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\n    images: {\n      lg: 'swapsies-lg.png',\n      md: 'swapsies-md.png',\n      sm: 'swapsies-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\n      blur: 'swapsies-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'swapsies',\n    type: NftType.PANCAKE,\n    variationId: 0,\n  },\n  {\n    name: 'Drizzle',\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\n    images: {\n      lg: 'drizzle-lg.png',\n      md: 'drizzle-md.png',\n      sm: 'drizzle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\n      blur: 'drizzle-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'drizzle',\n    type: NftType.PANCAKE,\n    variationId: 1,\n  },\n  {\n    name: 'Blueberries',\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\n    images: {\n      lg: 'blueberries-lg.png',\n      md: 'blueberries-md.png',\n      sm: 'blueberries-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\n      blur: 'blueberries-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'blueberries',\n    type: NftType.PANCAKE,\n    variationId: 2,\n  },\n  {\n    name: 'Circular',\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\n    images: {\n      lg: 'circular-lg.png',\n      md: 'circular-md.png',\n      sm: 'circular-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\n      blur: 'circular-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'circular',\n    type: NftType.PANCAKE,\n    variationId: 3,\n  },\n  {\n    name: 'Sparkle',\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\n    images: {\n      lg: 'sparkle-lg.png',\n      md: 'sparkle-md.png',\n      sm: 'sparkle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\n      blur: 'sparkle-blur.png',\n    },\n    sortOrder: 999,\n    identifier: 'sparkle',\n    type: NftType.PANCAKE,\n    variationId: 4,\n  },\n]\n\nexport default Nfts\n"],"sourceRoot":""}